/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PropertySale.
 * @see com.portal.platform.PropertySale
 */

public interface PropertySaleService {
   /**
	 * Creates a new propertysale.
	 * 
	 * @param created
	 *            The information of the created propertysale.
	 * @return The created propertysale.
	 */
	public PropertySale create(PropertySale created);

	/**
	 * Deletes a propertysale.
	 * 
	 * @param propertysaleId
	 *            The id of the deleted propertysale.
	 * @return The deleted propertysale.
	 * @throws EntityNotFoundException
	 *             if no propertysale is found with the given id.
	 */
	public PropertySale delete(Integer propertysaleId) throws EntityNotFoundException;

	/**
	 * Finds all propertysales.
	 * 
	 * @return A list of propertysales.
	 */
	public Page<PropertySale> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PropertySale> findAll(Pageable pageable);
	
	/**
	 * Finds propertysale by id.
	 * 
	 * @param id
	 *            The id of the wanted propertysale.
	 * @return The found propertysale. If no propertysale is found, this method returns
	 *         null.
	 */
	public PropertySale findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a propertysale.
	 * 
	 * @param updated
	 *            The information of the updated propertysale.
	 * @return The updated propertysale.
	 * @throws EntityNotFoundException
	 *             if no propertysale is found with given id.
	 */
	public PropertySale update(PropertySale updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the propertysales in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the propertysale.
	 */

	public long countAll();


    public Page<PropertySale> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

