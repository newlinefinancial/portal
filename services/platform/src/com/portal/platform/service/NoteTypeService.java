/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class NoteType.
 * @see com.portal.platform.NoteType
 */

public interface NoteTypeService {
   /**
	 * Creates a new notetype.
	 * 
	 * @param created
	 *            The information of the created notetype.
	 * @return The created notetype.
	 */
	public NoteType create(NoteType created);

	/**
	 * Deletes a notetype.
	 * 
	 * @param notetypeId
	 *            The id of the deleted notetype.
	 * @return The deleted notetype.
	 * @throws EntityNotFoundException
	 *             if no notetype is found with the given id.
	 */
	public NoteType delete(Integer notetypeId) throws EntityNotFoundException;

	/**
	 * Finds all notetypes.
	 * 
	 * @return A list of notetypes.
	 */
	public Page<NoteType> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<NoteType> findAll(Pageable pageable);
	
	/**
	 * Finds notetype by id.
	 * 
	 * @param id
	 *            The id of the wanted notetype.
	 * @return The found notetype. If no notetype is found, this method returns
	 *         null.
	 */
	public NoteType findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a notetype.
	 * 
	 * @param updated
	 *            The information of the updated notetype.
	 * @return The updated notetype.
	 * @throws EntityNotFoundException
	 *             if no notetype is found with given id.
	 */
	public NoteType update(NoteType updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the notetypes in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the notetype.
	 */

	public long countAll();


    public Page<NoteType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

