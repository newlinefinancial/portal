/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PropertySale.
 * @see com.portal.platform.PropertySale
 */
@Service("platform.PropertySaleService")
public class PropertySaleServiceImpl implements PropertySaleService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PropertySaleServiceImpl.class);

    @Autowired
    @Qualifier("platform.PropertySaleDao")
    private WMGenericDao<PropertySale, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PropertySale, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PropertySale> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PropertySale create(PropertySale propertysale) {
        LOGGER.debug("Creating a new propertysale with information: {}" , propertysale);
        return this.wmGenericDao.create(propertysale);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PropertySale delete(Integer propertysaleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting propertysale with id: {}" , propertysaleId);
        PropertySale deleted = this.wmGenericDao.findById(propertysaleId);
        if (deleted == null) {
            LOGGER.debug("No propertysale found with id: {}" , propertysaleId);
            throw new EntityNotFoundException(String.valueOf(propertysaleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PropertySale> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all propertysales");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PropertySale> findAll(Pageable pageable) {
        LOGGER.debug("Finding all propertysales");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PropertySale findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding propertysale by id: {}" , id);
        PropertySale propertysale=this.wmGenericDao.findById(id);
        if(propertysale==null){
            LOGGER.debug("No propertysale found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return propertysale;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PropertySale update(PropertySale updated) throws EntityNotFoundException {
        LOGGER.debug("Updating propertysale with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


