/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalMatterData.
 * @see com.portal.platform.PortalMatterData
 */

public interface PortalMatterDataService {
   /**
	 * Creates a new portalmatterdata.
	 * 
	 * @param created
	 *            The information of the created portalmatterdata.
	 * @return The created portalmatterdata.
	 */
	public PortalMatterData create(PortalMatterData created);

	/**
	 * Deletes a portalmatterdata.
	 * 
	 * @param portalmatterdataId
	 *            The id of the deleted portalmatterdata.
	 * @return The deleted portalmatterdata.
	 * @throws EntityNotFoundException
	 *             if no portalmatterdata is found with the given id.
	 */
	public PortalMatterData delete(PortalMatterDataId portalmatterdataId) throws EntityNotFoundException;

	/**
	 * Finds all portalmatterdatas.
	 * 
	 * @return A list of portalmatterdatas.
	 */
	public Page<PortalMatterData> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalMatterData> findAll(Pageable pageable);
	
	/**
	 * Finds portalmatterdata by id.
	 * 
	 * @param id
	 *            The id of the wanted portalmatterdata.
	 * @return The found portalmatterdata. If no portalmatterdata is found, this method returns
	 *         null.
	 */
	public PortalMatterData findById(PortalMatterDataId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portalmatterdata.
	 * 
	 * @param updated
	 *            The information of the updated portalmatterdata.
	 * @return The updated portalmatterdata.
	 * @throws EntityNotFoundException
	 *             if no portalmatterdata is found with given id.
	 */
	public PortalMatterData update(PortalMatterData updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portalmatterdatas in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portalmatterdata.
	 */

	public long countAll();


    public Page<PortalMatterData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

