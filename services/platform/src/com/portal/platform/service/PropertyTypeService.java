/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PropertyType.
 * @see com.portal.platform.PropertyType
 */

public interface PropertyTypeService {
   /**
	 * Creates a new propertytype.
	 * 
	 * @param created
	 *            The information of the created propertytype.
	 * @return The created propertytype.
	 */
	public PropertyType create(PropertyType created);

	/**
	 * Deletes a propertytype.
	 * 
	 * @param propertytypeId
	 *            The id of the deleted propertytype.
	 * @return The deleted propertytype.
	 * @throws EntityNotFoundException
	 *             if no propertytype is found with the given id.
	 */
	public PropertyType delete(Integer propertytypeId) throws EntityNotFoundException;

	/**
	 * Finds all propertytypes.
	 * 
	 * @return A list of propertytypes.
	 */
	public Page<PropertyType> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PropertyType> findAll(Pageable pageable);
	
	/**
	 * Finds propertytype by id.
	 * 
	 * @param id
	 *            The id of the wanted propertytype.
	 * @return The found propertytype. If no propertytype is found, this method returns
	 *         null.
	 */
	public PropertyType findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a propertytype.
	 * 
	 * @param updated
	 *            The information of the updated propertytype.
	 * @return The updated propertytype.
	 * @throws EntityNotFoundException
	 *             if no propertytype is found with given id.
	 */
	public PropertyType update(PropertyType updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the propertytypes in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the propertytype.
	 */

	public long countAll();


    public Page<PropertyType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

