/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class AccrualType.
 * @see com.portal.platform.AccrualType
 */
@Service("platform.AccrualTypeService")
public class AccrualTypeServiceImpl implements AccrualTypeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AccrualTypeServiceImpl.class);

    @Autowired
    @Qualifier("platform.AccrualTypeDao")
    private WMGenericDao<AccrualType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AccrualType, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<AccrualType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public AccrualType create(AccrualType accrualtype) {
        LOGGER.debug("Creating a new accrualtype with information: {}" , accrualtype);
        return this.wmGenericDao.create(accrualtype);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public AccrualType delete(Integer accrualtypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting accrualtype with id: {}" , accrualtypeId);
        AccrualType deleted = this.wmGenericDao.findById(accrualtypeId);
        if (deleted == null) {
            LOGGER.debug("No accrualtype found with id: {}" , accrualtypeId);
            throw new EntityNotFoundException(String.valueOf(accrualtypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<AccrualType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all accrualtypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<AccrualType> findAll(Pageable pageable) {
        LOGGER.debug("Finding all accrualtypes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public AccrualType findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding accrualtype by id: {}" , id);
        AccrualType accrualtype=this.wmGenericDao.findById(id);
        if(accrualtype==null){
            LOGGER.debug("No accrualtype found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return accrualtype;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public AccrualType update(AccrualType updated) throws EntityNotFoundException {
        LOGGER.debug("Updating accrualtype with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


