/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class TitleType.
 * @see com.portal.platform.TitleType
 */
@Service("platform.TitleTypeService")
public class TitleTypeServiceImpl implements TitleTypeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TitleTypeServiceImpl.class);

    @Autowired
    @Qualifier("platform.TitleTypeDao")
    private WMGenericDao<TitleType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TitleType, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<TitleType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public TitleType create(TitleType titletype) {
        LOGGER.debug("Creating a new titletype with information: {}" , titletype);
        return this.wmGenericDao.create(titletype);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public TitleType delete(Integer titletypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting titletype with id: {}" , titletypeId);
        TitleType deleted = this.wmGenericDao.findById(titletypeId);
        if (deleted == null) {
            LOGGER.debug("No titletype found with id: {}" , titletypeId);
            throw new EntityNotFoundException(String.valueOf(titletypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<TitleType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all titletypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<TitleType> findAll(Pageable pageable) {
        LOGGER.debug("Finding all titletypes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public TitleType findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding titletype by id: {}" , id);
        TitleType titletype=this.wmGenericDao.findById(id);
        if(titletype==null){
            LOGGER.debug("No titletype found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return titletype;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public TitleType update(TitleType updated) throws EntityNotFoundException {
        LOGGER.debug("Updating titletype with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


