/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalAuctionTitle.
 * @see com.portal.platform.PortalAuctionTitle
 */
@Service("platform.PortalAuctionTitleService")
public class PortalAuctionTitleServiceImpl implements PortalAuctionTitleService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionTitleServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalAuctionTitleDao")
    private WMGenericDao<PortalAuctionTitle, PortalAuctionTitleId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalAuctionTitle, PortalAuctionTitleId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalAuctionTitle> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalAuctionTitle create(PortalAuctionTitle portalauctiontitle) {
        LOGGER.debug("Creating a new portalauctiontitle with information: {}" , portalauctiontitle);
        return this.wmGenericDao.create(portalauctiontitle);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionTitle delete(PortalAuctionTitleId portalauctiontitleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalauctiontitle with id: {}" , portalauctiontitleId);
        PortalAuctionTitle deleted = this.wmGenericDao.findById(portalauctiontitleId);
        if (deleted == null) {
            LOGGER.debug("No portalauctiontitle found with id: {}" , portalauctiontitleId);
            throw new EntityNotFoundException(String.valueOf(portalauctiontitleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionTitle> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalauctiontitles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionTitle> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalauctiontitles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalAuctionTitle findById(PortalAuctionTitleId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalauctiontitle by id: {}" , id);
        PortalAuctionTitle portalauctiontitle=this.wmGenericDao.findById(id);
        if(portalauctiontitle==null){
            LOGGER.debug("No portalauctiontitle found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalauctiontitle;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionTitle update(PortalAuctionTitle updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalauctiontitle with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalAuctionTitleId id = new PortalAuctionTitleId();
        id.setConsideration(updated.getConsideration());
        id.setDate(updated.getDate());
        id.setDocNumber(updated.getDocNumber());
        id.setGrantee(updated.getGrantee());
        id.setGrantor(updated.getGrantor());
        id.setId(updated.getId());
        id.setPropertyId(updated.getPropertyId());
        id.setTitleType(updated.getTitleType());
        id.setCategory(updated.getCategory());
        id.setName(updated.getName());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


