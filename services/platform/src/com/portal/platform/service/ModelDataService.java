/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class ModelData.
 * @see com.portal.platform.ModelData
 */

public interface ModelDataService {
   /**
	 * Creates a new modeldata.
	 * 
	 * @param created
	 *            The information of the created modeldata.
	 * @return The created modeldata.
	 */
	public ModelData create(ModelData created);

	/**
	 * Deletes a modeldata.
	 * 
	 * @param modeldataId
	 *            The id of the deleted modeldata.
	 * @return The deleted modeldata.
	 * @throws EntityNotFoundException
	 *             if no modeldata is found with the given id.
	 */
	public ModelData delete(ModelDataId modeldataId) throws EntityNotFoundException;

	/**
	 * Finds all modeldatas.
	 * 
	 * @return A list of modeldatas.
	 */
	public Page<ModelData> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ModelData> findAll(Pageable pageable);
	
	/**
	 * Finds modeldata by id.
	 * 
	 * @param id
	 *            The id of the wanted modeldata.
	 * @return The found modeldata. If no modeldata is found, this method returns
	 *         null.
	 */
	public ModelData findById(ModelDataId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a modeldata.
	 * 
	 * @param updated
	 *            The information of the updated modeldata.
	 * @return The updated modeldata.
	 * @throws EntityNotFoundException
	 *             if no modeldata is found with given id.
	 */
	public ModelData update(ModelData updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the modeldatas in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the modeldata.
	 */

	public long countAll();


    public Page<ModelData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

