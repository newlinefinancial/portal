/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Inspection.
 * @see com.portal.platform.Inspection
 */
@Service("platform.InspectionService")
public class InspectionServiceImpl implements InspectionService {


    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionServiceImpl.class);

    @Autowired
    @Qualifier("platform.InspectionDao")
    private WMGenericDao<Inspection, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Inspection, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Inspection> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Inspection create(Inspection inspection) {
        LOGGER.debug("Creating a new inspection with information: {}" , inspection);
        return this.wmGenericDao.create(inspection);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Inspection delete(Integer inspectionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting inspection with id: {}" , inspectionId);
        Inspection deleted = this.wmGenericDao.findById(inspectionId);
        if (deleted == null) {
            LOGGER.debug("No inspection found with id: {}" , inspectionId);
            throw new EntityNotFoundException(String.valueOf(inspectionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Inspection> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all inspections");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Inspection> findAll(Pageable pageable) {
        LOGGER.debug("Finding all inspections");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Inspection findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding inspection by id: {}" , id);
        Inspection inspection=this.wmGenericDao.findById(id);
        if(inspection==null){
            LOGGER.debug("No inspection found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return inspection;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Inspection update(Inspection updated) throws EntityNotFoundException {
        LOGGER.debug("Updating inspection with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


