/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Certificate.
 * @see com.portal.platform.Certificate
 */
@Service("platform.CertificateService")
public class CertificateServiceImpl implements CertificateService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CertificateServiceImpl.class);

    @Autowired
    @Qualifier("platform.CertificateDao")
    private WMGenericDao<Certificate, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Certificate, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Certificate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Certificate create(Certificate certificate) {
        LOGGER.debug("Creating a new certificate with information: {}" , certificate);
        return this.wmGenericDao.create(certificate);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Certificate delete(Integer certificateId) throws EntityNotFoundException {
        LOGGER.debug("Deleting certificate with id: {}" , certificateId);
        Certificate deleted = this.wmGenericDao.findById(certificateId);
        if (deleted == null) {
            LOGGER.debug("No certificate found with id: {}" , certificateId);
            throw new EntityNotFoundException(String.valueOf(certificateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Certificate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all certificates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Certificate> findAll(Pageable pageable) {
        LOGGER.debug("Finding all certificates");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Certificate findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding certificate by id: {}" , id);
        Certificate certificate=this.wmGenericDao.findById(id);
        if(certificate==null){
            LOGGER.debug("No certificate found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return certificate;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Certificate update(Certificate updated) throws EntityNotFoundException {
        LOGGER.debug("Updating certificate with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


