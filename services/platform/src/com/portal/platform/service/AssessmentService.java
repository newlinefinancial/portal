/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Assessment.
 * @see com.portal.platform.Assessment
 */

public interface AssessmentService {
   /**
	 * Creates a new assessment.
	 * 
	 * @param created
	 *            The information of the created assessment.
	 * @return The created assessment.
	 */
	public Assessment create(Assessment created);

	/**
	 * Deletes a assessment.
	 * 
	 * @param assessmentId
	 *            The id of the deleted assessment.
	 * @return The deleted assessment.
	 * @throws EntityNotFoundException
	 *             if no assessment is found with the given id.
	 */
	public Assessment delete(Integer assessmentId) throws EntityNotFoundException;

	/**
	 * Finds all assessments.
	 * 
	 * @return A list of assessments.
	 */
	public Page<Assessment> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Assessment> findAll(Pageable pageable);
	
	/**
	 * Finds assessment by id.
	 * 
	 * @param id
	 *            The id of the wanted assessment.
	 * @return The found assessment. If no assessment is found, this method returns
	 *         null.
	 */
	public Assessment findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a assessment.
	 * 
	 * @param updated
	 *            The information of the updated assessment.
	 * @return The updated assessment.
	 * @throws EntityNotFoundException
	 *             if no assessment is found with given id.
	 */
	public Assessment update(Assessment updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the assessments in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the assessment.
	 */

	public long countAll();


    public Page<Assessment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

