/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class MatterParty.
 * @see com.portal.platform.MatterParty
 */
@Service("platform.MatterPartyService")
public class MatterPartyServiceImpl implements MatterPartyService {


    private static final Logger LOGGER = LoggerFactory.getLogger(MatterPartyServiceImpl.class);

    @Autowired
    @Qualifier("platform.MatterPartyDao")
    private WMGenericDao<MatterParty, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MatterParty, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<MatterParty> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public MatterParty create(MatterParty matterparty) {
        LOGGER.debug("Creating a new matterparty with information: {}" , matterparty);
        return this.wmGenericDao.create(matterparty);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public MatterParty delete(Integer matterpartyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting matterparty with id: {}" , matterpartyId);
        MatterParty deleted = this.wmGenericDao.findById(matterpartyId);
        if (deleted == null) {
            LOGGER.debug("No matterparty found with id: {}" , matterpartyId);
            throw new EntityNotFoundException(String.valueOf(matterpartyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<MatterParty> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all matterpartys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<MatterParty> findAll(Pageable pageable) {
        LOGGER.debug("Finding all matterpartys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public MatterParty findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding matterparty by id: {}" , id);
        MatterParty matterparty=this.wmGenericDao.findById(id);
        if(matterparty==null){
            LOGGER.debug("No matterparty found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return matterparty;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public MatterParty update(MatterParty updated) throws EntityNotFoundException {
        LOGGER.debug("Updating matterparty with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


