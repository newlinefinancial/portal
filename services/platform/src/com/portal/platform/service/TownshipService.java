/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Township.
 * @see com.portal.platform.Township
 */

public interface TownshipService {
   /**
	 * Creates a new township.
	 * 
	 * @param created
	 *            The information of the created township.
	 * @return The created township.
	 */
	public Township create(Township created);

	/**
	 * Deletes a township.
	 * 
	 * @param townshipId
	 *            The id of the deleted township.
	 * @return The deleted township.
	 * @throws EntityNotFoundException
	 *             if no township is found with the given id.
	 */
	public Township delete(Integer townshipId) throws EntityNotFoundException;

	/**
	 * Finds all townships.
	 * 
	 * @return A list of townships.
	 */
	public Page<Township> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Township> findAll(Pageable pageable);
	
	/**
	 * Finds township by id.
	 * 
	 * @param id
	 *            The id of the wanted township.
	 * @return The found township. If no township is found, this method returns
	 *         null.
	 */
	public Township findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a township.
	 * 
	 * @param updated
	 *            The information of the updated township.
	 * @return The updated township.
	 * @throws EntityNotFoundException
	 *             if no township is found with given id.
	 */
	public Township update(Township updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the townships in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the township.
	 */

	public long countAll();


    public Page<Township> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

