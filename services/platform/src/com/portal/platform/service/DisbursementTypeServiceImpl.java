/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class DisbursementType.
 * @see com.portal.platform.DisbursementType
 */
@Service("platform.DisbursementTypeService")
public class DisbursementTypeServiceImpl implements DisbursementTypeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DisbursementTypeServiceImpl.class);

    @Autowired
    @Qualifier("platform.DisbursementTypeDao")
    private WMGenericDao<DisbursementType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DisbursementType, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<DisbursementType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public DisbursementType create(DisbursementType disbursementtype) {
        LOGGER.debug("Creating a new disbursementtype with information: {}" , disbursementtype);
        return this.wmGenericDao.create(disbursementtype);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public DisbursementType delete(Integer disbursementtypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting disbursementtype with id: {}" , disbursementtypeId);
        DisbursementType deleted = this.wmGenericDao.findById(disbursementtypeId);
        if (deleted == null) {
            LOGGER.debug("No disbursementtype found with id: {}" , disbursementtypeId);
            throw new EntityNotFoundException(String.valueOf(disbursementtypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<DisbursementType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all disbursementtypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<DisbursementType> findAll(Pageable pageable) {
        LOGGER.debug("Finding all disbursementtypes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public DisbursementType findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding disbursementtype by id: {}" , id);
        DisbursementType disbursementtype=this.wmGenericDao.findById(id);
        if(disbursementtype==null){
            LOGGER.debug("No disbursementtype found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return disbursementtype;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public DisbursementType update(DisbursementType updated) throws EntityNotFoundException {
        LOGGER.debug("Updating disbursementtype with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


