/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class InterestType.
 * @see com.portal.platform.InterestType
 */
@Service("platform.InterestTypeService")
public class InterestTypeServiceImpl implements InterestTypeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(InterestTypeServiceImpl.class);

    @Autowired
    @Qualifier("platform.InterestTypeDao")
    private WMGenericDao<InterestType, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InterestType, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<InterestType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public InterestType create(InterestType interesttype) {
        LOGGER.debug("Creating a new interesttype with information: {}" , interesttype);
        return this.wmGenericDao.create(interesttype);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public InterestType delete(String interesttypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting interesttype with id: {}" , interesttypeId);
        InterestType deleted = this.wmGenericDao.findById(interesttypeId);
        if (deleted == null) {
            LOGGER.debug("No interesttype found with id: {}" , interesttypeId);
            throw new EntityNotFoundException(String.valueOf(interesttypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<InterestType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all interesttypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<InterestType> findAll(Pageable pageable) {
        LOGGER.debug("Finding all interesttypes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public InterestType findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding interesttype by id: {}" , id);
        InterestType interesttype=this.wmGenericDao.findById(id);
        if(interesttype==null){
            LOGGER.debug("No interesttype found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return interesttype;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public InterestType update(InterestType updated) throws EntityNotFoundException {
        LOGGER.debug("Updating interesttype with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getCode();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


