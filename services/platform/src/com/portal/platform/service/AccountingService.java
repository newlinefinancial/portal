/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Accounting.
 * @see com.portal.platform.Accounting
 */

public interface AccountingService {
   /**
	 * Creates a new accounting.
	 * 
	 * @param created
	 *            The information of the created accounting.
	 * @return The created accounting.
	 */
	public Accounting create(Accounting created);

	/**
	 * Deletes a accounting.
	 * 
	 * @param accountingId
	 *            The id of the deleted accounting.
	 * @return The deleted accounting.
	 * @throws EntityNotFoundException
	 *             if no accounting is found with the given id.
	 */
	public Accounting delete(AccountingId accountingId) throws EntityNotFoundException;

	/**
	 * Finds all accountings.
	 * 
	 * @return A list of accountings.
	 */
	public Page<Accounting> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Accounting> findAll(Pageable pageable);
	
	/**
	 * Finds accounting by id.
	 * 
	 * @param id
	 *            The id of the wanted accounting.
	 * @return The found accounting. If no accounting is found, this method returns
	 *         null.
	 */
	public Accounting findById(AccountingId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a accounting.
	 * 
	 * @param updated
	 *            The information of the updated accounting.
	 * @return The updated accounting.
	 * @throws EntityNotFoundException
	 *             if no accounting is found with given id.
	 */
	public Accounting update(Accounting updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the accountings in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the accounting.
	 */

	public long countAll();


    public Page<Accounting> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

