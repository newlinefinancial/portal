/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Accounting.
 * @see com.portal.platform.Accounting
 */
@Service("platform.AccountingService")
public class AccountingServiceImpl implements AccountingService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AccountingServiceImpl.class);

    @Autowired
    @Qualifier("platform.AccountingDao")
    private WMGenericDao<Accounting, AccountingId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Accounting, AccountingId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Accounting> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Accounting create(Accounting accounting) {
        LOGGER.debug("Creating a new accounting with information: {}" , accounting);
        return this.wmGenericDao.create(accounting);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Accounting delete(AccountingId accountingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting accounting with id: {}" , accountingId);
        Accounting deleted = this.wmGenericDao.findById(accountingId);
        if (deleted == null) {
            LOGGER.debug("No accounting found with id: {}" , accountingId);
            throw new EntityNotFoundException(String.valueOf(accountingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Accounting> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all accountings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Accounting> findAll(Pageable pageable) {
        LOGGER.debug("Finding all accountings");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Accounting findById(AccountingId id) throws EntityNotFoundException {
        LOGGER.debug("Finding accounting by id: {}" , id);
        Accounting accounting=this.wmGenericDao.findById(id);
        if(accounting==null){
            LOGGER.debug("No accounting found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return accounting;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Accounting update(Accounting updated) throws EntityNotFoundException {
        LOGGER.debug("Updating accounting with information: {}" , updated);
        this.wmGenericDao.update(updated);

        AccountingId id = new AccountingId();
        id.setCertificateId(updated.getCertificateId());
        id.setAccountingDate(updated.getAccountingDate());
        id.setEffectiveDate(updated.getEffectiveDate());
        id.setTransaction(updated.getTransaction());
        id.setCategory(updated.getCategory());
        id.setType(updated.getType());
        id.setPrincipal(updated.getPrincipal());
        id.setRevenue(updated.getRevenue());
        id.setCash(updated.getCash());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


