/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalInspectFilter.
 * @see com.portal.platform.PortalInspectFilter
 */
@Service("platform.PortalInspectFilterService")
public class PortalInspectFilterServiceImpl implements PortalInspectFilterService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalInspectFilterServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalInspectFilterDao")
    private WMGenericDao<PortalInspectFilter, PortalInspectFilterId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalInspectFilter, PortalInspectFilterId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalInspectFilter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalInspectFilter create(PortalInspectFilter portalinspectfilter) {
        LOGGER.debug("Creating a new portalinspectfilter with information: {}" , portalinspectfilter);
        return this.wmGenericDao.create(portalinspectfilter);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalInspectFilter delete(PortalInspectFilterId portalinspectfilterId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalinspectfilter with id: {}" , portalinspectfilterId);
        PortalInspectFilter deleted = this.wmGenericDao.findById(portalinspectfilterId);
        if (deleted == null) {
            LOGGER.debug("No portalinspectfilter found with id: {}" , portalinspectfilterId);
            throw new EntityNotFoundException(String.valueOf(portalinspectfilterId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalInspectFilter> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalinspectfilters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalInspectFilter> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalinspectfilters");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalInspectFilter findById(PortalInspectFilterId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalinspectfilter by id: {}" , id);
        PortalInspectFilter portalinspectfilter=this.wmGenericDao.findById(id);
        if(portalinspectfilter==null){
            LOGGER.debug("No portalinspectfilter found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalinspectfilter;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalInspectFilter update(PortalInspectFilter updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalinspectfilter with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalInspectFilterId id = new PortalInspectFilterId();
        id.setDropDown(updated.getDropDown());
        id.setOrder(updated.getOrder());
        id.setInspected(updated.getInspected());
        id.setInspId(updated.getInspId());
        id.setPropertyId(updated.getPropertyId());
        id.setAuctionId(updated.getAuctionId());
        id.setPin(updated.getPin());
        id.setLatlong(updated.getLatlong());
        id.setAddress(updated.getAddress());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


