/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Buyer.
 * @see com.portal.platform.Buyer
 */
@Service("platform.BuyerService")
public class BuyerServiceImpl implements BuyerService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BuyerServiceImpl.class);

    @Autowired
    @Qualifier("platform.BuyerDao")
    private WMGenericDao<Buyer, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Buyer, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Buyer> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Buyer create(Buyer buyer) {
        LOGGER.debug("Creating a new buyer with information: {}" , buyer);
        return this.wmGenericDao.create(buyer);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Buyer delete(Integer buyerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting buyer with id: {}" , buyerId);
        Buyer deleted = this.wmGenericDao.findById(buyerId);
        if (deleted == null) {
            LOGGER.debug("No buyer found with id: {}" , buyerId);
            throw new EntityNotFoundException(String.valueOf(buyerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Buyer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all buyers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Buyer> findAll(Pageable pageable) {
        LOGGER.debug("Finding all buyers");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Buyer findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding buyer by id: {}" , id);
        Buyer buyer=this.wmGenericDao.findById(id);
        if(buyer==null){
            LOGGER.debug("No buyer found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return buyer;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Buyer update(Buyer updated) throws EntityNotFoundException {
        LOGGER.debug("Updating buyer with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


