/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class ModelHistoricalAuctions.
 * @see com.portal.platform.ModelHistoricalAuctions
 */
@Service("platform.ModelHistoricalAuctionsService")
public class ModelHistoricalAuctionsServiceImpl implements ModelHistoricalAuctionsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ModelHistoricalAuctionsServiceImpl.class);

    @Autowired
    @Qualifier("platform.ModelHistoricalAuctionsDao")
    private WMGenericDao<ModelHistoricalAuctions, ModelHistoricalAuctionsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ModelHistoricalAuctions, ModelHistoricalAuctionsId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<ModelHistoricalAuctions> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public ModelHistoricalAuctions create(ModelHistoricalAuctions modelhistoricalauctions) {
        LOGGER.debug("Creating a new modelhistoricalauctions with information: {}" , modelhistoricalauctions);
        return this.wmGenericDao.create(modelhistoricalauctions);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public ModelHistoricalAuctions delete(ModelHistoricalAuctionsId modelhistoricalauctionsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting modelhistoricalauctions with id: {}" , modelhistoricalauctionsId);
        ModelHistoricalAuctions deleted = this.wmGenericDao.findById(modelhistoricalauctionsId);
        if (deleted == null) {
            LOGGER.debug("No modelhistoricalauctions found with id: {}" , modelhistoricalauctionsId);
            throw new EntityNotFoundException(String.valueOf(modelhistoricalauctionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<ModelHistoricalAuctions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all modelhistoricalauctionss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<ModelHistoricalAuctions> findAll(Pageable pageable) {
        LOGGER.debug("Finding all modelhistoricalauctionss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public ModelHistoricalAuctions findById(ModelHistoricalAuctionsId id) throws EntityNotFoundException {
        LOGGER.debug("Finding modelhistoricalauctions by id: {}" , id);
        ModelHistoricalAuctions modelhistoricalauctions=this.wmGenericDao.findById(id);
        if(modelhistoricalauctions==null){
            LOGGER.debug("No modelhistoricalauctions found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return modelhistoricalauctions;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public ModelHistoricalAuctions update(ModelHistoricalAuctions updated) throws EntityNotFoundException {
        LOGGER.debug("Updating modelhistoricalauctions with information: {}" , updated);
        this.wmGenericDao.update(updated);

        ModelHistoricalAuctionsId id = new ModelHistoricalAuctionsId();
        id.setAuctionId(updated.getAuctionId());
        id.setAuctionYear(updated.getAuctionYear());
        id.setCountPublished(updated.getCountPublished());
        id.setCountAuctioned(updated.getCountAuctioned());
        id.setCountForfeited(updated.getCountForfeited());
        id.setCountOpensales(updated.getCountOpensales());
        id.setCountOpenpriors(updated.getCountOpenpriors());
        id.setTaxYear1(updated.getTaxYear1());
        id.setAuctionResult1(updated.getAuctionResult1());
        id.setDispositionStatus1(updated.getDispositionStatus1());
        id.setDispositionDate1(updated.getDispositionDate1());
        id.setOpenStatus1(updated.getOpenStatus1());
        id.setTaxYear2(updated.getTaxYear2());
        id.setAuctionResult2(updated.getAuctionResult2());
        id.setDispositionStatus2(updated.getDispositionStatus2());
        id.setDispositionDate2(updated.getDispositionDate2());
        id.setOpenStatus2(updated.getOpenStatus2());
        id.setTaxYear3(updated.getTaxYear3());
        id.setAuctionResult3(updated.getAuctionResult3());
        id.setDispositionStatus3(updated.getDispositionStatus3());
        id.setDispositionDate3(updated.getDispositionDate3());
        id.setOpenStatus3(updated.getOpenStatus3());
        id.setTaxYear4(updated.getTaxYear4());
        id.setAuctionResult4(updated.getAuctionResult4());
        id.setDispositionStatus4(updated.getDispositionStatus4());
        id.setDispositionDate4(updated.getDispositionDate4());
        id.setOpenStatus4(updated.getOpenStatus4());
        id.setTaxYear5(updated.getTaxYear5());
        id.setAuctionResult5(updated.getAuctionResult5());
        id.setDispositionStatus5(updated.getDispositionStatus5());
        id.setDispositionDate5(updated.getDispositionDate5());
        id.setOpenStatus5(updated.getOpenStatus5());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


