/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Accrual.
 * @see com.portal.platform.Accrual
 */
@Service("platform.AccrualService")
public class AccrualServiceImpl implements AccrualService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AccrualServiceImpl.class);

    @Autowired
    @Qualifier("platform.AccrualDao")
    private WMGenericDao<Accrual, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Accrual, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Accrual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Accrual create(Accrual accrual) {
        LOGGER.debug("Creating a new accrual with information: {}" , accrual);
        return this.wmGenericDao.create(accrual);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Accrual delete(Integer accrualId) throws EntityNotFoundException {
        LOGGER.debug("Deleting accrual with id: {}" , accrualId);
        Accrual deleted = this.wmGenericDao.findById(accrualId);
        if (deleted == null) {
            LOGGER.debug("No accrual found with id: {}" , accrualId);
            throw new EntityNotFoundException(String.valueOf(accrualId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Accrual> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all accruals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Accrual> findAll(Pageable pageable) {
        LOGGER.debug("Finding all accruals");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Accrual findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding accrual by id: {}" , id);
        Accrual accrual=this.wmGenericDao.findById(id);
        if(accrual==null){
            LOGGER.debug("No accrual found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return accrual;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Accrual update(Accrual updated) throws EntityNotFoundException {
        LOGGER.debug("Updating accrual with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


