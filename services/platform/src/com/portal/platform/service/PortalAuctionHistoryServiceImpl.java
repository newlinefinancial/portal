/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalAuctionHistory.
 * @see com.portal.platform.PortalAuctionHistory
 */
@Service("platform.PortalAuctionHistoryService")
public class PortalAuctionHistoryServiceImpl implements PortalAuctionHistoryService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionHistoryServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalAuctionHistoryDao")
    private WMGenericDao<PortalAuctionHistory, PortalAuctionHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalAuctionHistory, PortalAuctionHistoryId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalAuctionHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalAuctionHistory create(PortalAuctionHistory portalauctionhistory) {
        LOGGER.debug("Creating a new portalauctionhistory with information: {}" , portalauctionhistory);
        return this.wmGenericDao.create(portalauctionhistory);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionHistory delete(PortalAuctionHistoryId portalauctionhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalauctionhistory with id: {}" , portalauctionhistoryId);
        PortalAuctionHistory deleted = this.wmGenericDao.findById(portalauctionhistoryId);
        if (deleted == null) {
            LOGGER.debug("No portalauctionhistory found with id: {}" , portalauctionhistoryId);
            throw new EntityNotFoundException(String.valueOf(portalauctionhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalauctionhistorys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionHistory> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalauctionhistorys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalAuctionHistory findById(PortalAuctionHistoryId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalauctionhistory by id: {}" , id);
        PortalAuctionHistory portalauctionhistory=this.wmGenericDao.findById(id);
        if(portalauctionhistory==null){
            LOGGER.debug("No portalauctionhistory found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalauctionhistory;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionHistory update(PortalAuctionHistory updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalauctionhistory with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalAuctionHistoryId id = new PortalAuctionHistoryId();
        id.setPropertyId(updated.getPropertyId());
        id.setAuctionId(updated.getAuctionId());
        id.setAuctionYear(updated.getAuctionYear());
        id.setPriorYearsDue(updated.getPriorYearsDue());
        id.setAuctionYearBilled(updated.getAuctionYearBilled());
        id.setAuctionYearDue(updated.getAuctionYearDue());
        id.setSaleAmount(updated.getSaleAmount());
        id.setRemoved(updated.getRemoved());
        id.setMarketValue(updated.getMarketValue());
        id.setAssessedValuationBuilding(updated.getAssessedValuationBuilding());
        id.setAssessedValuationLand(updated.getAssessedValuationLand());
        id.setAssessedValuationTotal(updated.getAssessedValuationTotal());
        id.setAssesseeAddressCity(updated.getAssesseeAddressCity());
        id.setAssesseeAddressLine1(updated.getAssesseeAddressLine1());
        id.setAssesseeAddressState(updated.getAssesseeAddressState());
        id.setAssesseeAddressZip(updated.getAssesseeAddressZip());
        id.setAssesseeName(updated.getAssesseeName());
        id.setHomeExemption(updated.getHomeExemption());
        id.setSeniorExemption(updated.getSeniorExemption());
        id.setAssessmentYear(updated.getAssessmentYear());
        id.setCode(updated.getCode());
        id.setDescription(updated.getDescription());
        id.setPropertyType(updated.getPropertyType());
        id.setStatus(updated.getStatus());
        id.setBidRate(updated.getBidRate());
        id.setOverrideTimestamp(updated.getOverrideTimestamp());
        id.setOverrideUser(updated.getOverrideUser());
        id.setSaleDate(updated.getSaleDate());
        id.setWinningBid(updated.getWinningBid());
        id.setBuyer(updated.getBuyer());
        id.setAuctionResult(updated.getAuctionResult());
        id.setAuctionStatus(updated.getAuctionStatus());
        id.setDispositionDate(updated.getDispositionDate());
        id.setDispositionResearchDate(updated.getDispositionResearchDate());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


