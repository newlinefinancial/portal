/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class TaxHistory.
 * @see com.portal.platform.TaxHistory
 */

public interface TaxHistoryService {
   /**
	 * Creates a new taxhistory.
	 * 
	 * @param created
	 *            The information of the created taxhistory.
	 * @return The created taxhistory.
	 */
	public TaxHistory create(TaxHistory created);

	/**
	 * Deletes a taxhistory.
	 * 
	 * @param taxhistoryId
	 *            The id of the deleted taxhistory.
	 * @return The deleted taxhistory.
	 * @throws EntityNotFoundException
	 *             if no taxhistory is found with the given id.
	 */
	public TaxHistory delete(Integer taxhistoryId) throws EntityNotFoundException;

	/**
	 * Finds all taxhistorys.
	 * 
	 * @return A list of taxhistorys.
	 */
	public Page<TaxHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TaxHistory> findAll(Pageable pageable);
	
	/**
	 * Finds taxhistory by id.
	 * 
	 * @param id
	 *            The id of the wanted taxhistory.
	 * @return The found taxhistory. If no taxhistory is found, this method returns
	 *         null.
	 */
	public TaxHistory findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a taxhistory.
	 * 
	 * @param updated
	 *            The information of the updated taxhistory.
	 * @return The updated taxhistory.
	 * @throws EntityNotFoundException
	 *             if no taxhistory is found with given id.
	 */
	public TaxHistory update(TaxHistory updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the taxhistorys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the taxhistory.
	 */

	public long countAll();


    public Page<TaxHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

