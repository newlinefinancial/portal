/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class BorrowingBase.
 * @see com.portal.platform.BorrowingBase
 */

public interface BorrowingBaseService {
   /**
	 * Creates a new borrowingbase.
	 * 
	 * @param created
	 *            The information of the created borrowingbase.
	 * @return The created borrowingbase.
	 */
	public BorrowingBase create(BorrowingBase created);

	/**
	 * Deletes a borrowingbase.
	 * 
	 * @param borrowingbaseId
	 *            The id of the deleted borrowingbase.
	 * @return The deleted borrowingbase.
	 * @throws EntityNotFoundException
	 *             if no borrowingbase is found with the given id.
	 */
	public BorrowingBase delete(BorrowingBaseId borrowingbaseId) throws EntityNotFoundException;

	/**
	 * Finds all borrowingbases.
	 * 
	 * @return A list of borrowingbases.
	 */
	public Page<BorrowingBase> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<BorrowingBase> findAll(Pageable pageable);
	
	/**
	 * Finds borrowingbase by id.
	 * 
	 * @param id
	 *            The id of the wanted borrowingbase.
	 * @return The found borrowingbase. If no borrowingbase is found, this method returns
	 *         null.
	 */
	public BorrowingBase findById(BorrowingBaseId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a borrowingbase.
	 * 
	 * @param updated
	 *            The information of the updated borrowingbase.
	 * @return The updated borrowingbase.
	 * @throws EntityNotFoundException
	 *             if no borrowingbase is found with given id.
	 */
	public BorrowingBase update(BorrowingBase updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the borrowingbases in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the borrowingbase.
	 */

	public long countAll();


    public Page<BorrowingBase> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

