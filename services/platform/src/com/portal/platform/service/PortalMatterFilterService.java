/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalMatterFilter.
 * @see com.portal.platform.PortalMatterFilter
 */

public interface PortalMatterFilterService {
   /**
	 * Creates a new portalmatterfilter.
	 * 
	 * @param created
	 *            The information of the created portalmatterfilter.
	 * @return The created portalmatterfilter.
	 */
	public PortalMatterFilter create(PortalMatterFilter created);

	/**
	 * Deletes a portalmatterfilter.
	 * 
	 * @param portalmatterfilterId
	 *            The id of the deleted portalmatterfilter.
	 * @return The deleted portalmatterfilter.
	 * @throws EntityNotFoundException
	 *             if no portalmatterfilter is found with the given id.
	 */
	public PortalMatterFilter delete(PortalMatterFilterId portalmatterfilterId) throws EntityNotFoundException;

	/**
	 * Finds all portalmatterfilters.
	 * 
	 * @return A list of portalmatterfilters.
	 */
	public Page<PortalMatterFilter> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalMatterFilter> findAll(Pageable pageable);
	
	/**
	 * Finds portalmatterfilter by id.
	 * 
	 * @param id
	 *            The id of the wanted portalmatterfilter.
	 * @return The found portalmatterfilter. If no portalmatterfilter is found, this method returns
	 *         null.
	 */
	public PortalMatterFilter findById(PortalMatterFilterId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portalmatterfilter.
	 * 
	 * @param updated
	 *            The information of the updated portalmatterfilter.
	 * @return The updated portalmatterfilter.
	 * @throws EntityNotFoundException
	 *             if no portalmatterfilter is found with given id.
	 */
	public PortalMatterFilter update(PortalMatterFilter updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portalmatterfilters in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portalmatterfilter.
	 */

	public long countAll();


    public Page<PortalMatterFilter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

