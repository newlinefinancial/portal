/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PropertyClass.
 * @see com.portal.platform.PropertyClass
 */

public interface PropertyClassService {
   /**
	 * Creates a new propertyclass.
	 * 
	 * @param created
	 *            The information of the created propertyclass.
	 * @return The created propertyclass.
	 */
	public PropertyClass create(PropertyClass created);

	/**
	 * Deletes a propertyclass.
	 * 
	 * @param propertyclassId
	 *            The id of the deleted propertyclass.
	 * @return The deleted propertyclass.
	 * @throws EntityNotFoundException
	 *             if no propertyclass is found with the given id.
	 */
	public PropertyClass delete(Integer propertyclassId) throws EntityNotFoundException;

	/**
	 * Finds all propertyclasss.
	 * 
	 * @return A list of propertyclasss.
	 */
	public Page<PropertyClass> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PropertyClass> findAll(Pageable pageable);
	
	/**
	 * Finds propertyclass by id.
	 * 
	 * @param id
	 *            The id of the wanted propertyclass.
	 * @return The found propertyclass. If no propertyclass is found, this method returns
	 *         null.
	 */
	public PropertyClass findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a propertyclass.
	 * 
	 * @param updated
	 *            The information of the updated propertyclass.
	 * @return The updated propertyclass.
	 * @throws EntityNotFoundException
	 *             if no propertyclass is found with given id.
	 */
	public PropertyClass update(PropertyClass updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the propertyclasss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the propertyclass.
	 */

	public long countAll();


    public Page<PropertyClass> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

