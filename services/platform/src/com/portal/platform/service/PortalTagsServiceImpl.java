/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalTags.
 * @see com.portal.platform.PortalTags
 */
@Service("platform.PortalTagsService")
public class PortalTagsServiceImpl implements PortalTagsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalTagsServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalTagsDao")
    private WMGenericDao<PortalTags, PortalTagsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalTags, PortalTagsId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalTags> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalTags create(PortalTags portaltags) {
        LOGGER.debug("Creating a new portaltags with information: {}" , portaltags);
        return this.wmGenericDao.create(portaltags);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalTags delete(PortalTagsId portaltagsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portaltags with id: {}" , portaltagsId);
        PortalTags deleted = this.wmGenericDao.findById(portaltagsId);
        if (deleted == null) {
            LOGGER.debug("No portaltags found with id: {}" , portaltagsId);
            throw new EntityNotFoundException(String.valueOf(portaltagsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalTags> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portaltagss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalTags> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portaltagss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalTags findById(PortalTagsId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portaltags by id: {}" , id);
        PortalTags portaltags=this.wmGenericDao.findById(id);
        if(portaltags==null){
            LOGGER.debug("No portaltags found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portaltags;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalTags update(PortalTags updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portaltags with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalTagsId id = new PortalTagsId();
        id.setPropertyId(updated.getPropertyId());
        id.setReview(updated.getReview());
        id.setInspect(updated.getInspect());
        id.setCheckCounty(updated.getCheckCounty());
        id.setCheckTitle(updated.getCheckTitle());
        id.setGood(updated.getGood());
        id.setMeh(updated.getMeh());
        id.setPoor(updated.getPoor());
        id.setVacant(updated.getVacant());
        id.setBoarded(updated.getBoarded());
        id.setGone(updated.getGone());
        id.setNg(updated.getNg());
        id.setForSale(updated.getForSale());
        id.setDivided(updated.getDivided());
        id.setTax_valueIssue(updated.getTax_valueIssue());
        id.setBuildingCourt(updated.getBuildingCourt());
        id.setDemoLien(updated.getDemoLien());
        id.setDemoOrder(updated.getDemoOrder());
        id.setExtension(updated.getExtension());
        id.setTakeNotice(updated.getTakeNotice());
        id.setRedemptionLetter(updated.getRedemptionLetter());
        id.setSieHearing(updated.getSieHearing());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


