/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class AuctionResult.
 * @see com.portal.platform.AuctionResult
 */

public interface AuctionResultService {
   /**
	 * Creates a new auctionresult.
	 * 
	 * @param created
	 *            The information of the created auctionresult.
	 * @return The created auctionresult.
	 */
	public AuctionResult create(AuctionResult created);

	/**
	 * Deletes a auctionresult.
	 * 
	 * @param auctionresultId
	 *            The id of the deleted auctionresult.
	 * @return The deleted auctionresult.
	 * @throws EntityNotFoundException
	 *             if no auctionresult is found with the given id.
	 */
	public AuctionResult delete(Integer auctionresultId) throws EntityNotFoundException;

	/**
	 * Finds all auctionresults.
	 * 
	 * @return A list of auctionresults.
	 */
	public Page<AuctionResult> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AuctionResult> findAll(Pageable pageable);
	
	/**
	 * Finds auctionresult by id.
	 * 
	 * @param id
	 *            The id of the wanted auctionresult.
	 * @return The found auctionresult. If no auctionresult is found, this method returns
	 *         null.
	 */
	public AuctionResult findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a auctionresult.
	 * 
	 * @param updated
	 *            The information of the updated auctionresult.
	 * @return The updated auctionresult.
	 * @throws EntityNotFoundException
	 *             if no auctionresult is found with given id.
	 */
	public AuctionResult update(AuctionResult updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the auctionresults in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the auctionresult.
	 */

	public long countAll();


    public Page<AuctionResult> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

