/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalCertificateData.
 * @see com.portal.platform.PortalCertificateData
 */
@Service("platform.PortalCertificateDataService")
public class PortalCertificateDataServiceImpl implements PortalCertificateDataService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateDataServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalCertificateDataDao")
    private WMGenericDao<PortalCertificateData, PortalCertificateDataId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalCertificateData, PortalCertificateDataId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalCertificateData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalCertificateData create(PortalCertificateData portalcertificatedata) {
        LOGGER.debug("Creating a new portalcertificatedata with information: {}" , portalcertificatedata);
        return this.wmGenericDao.create(portalcertificatedata);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateData delete(PortalCertificateDataId portalcertificatedataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalcertificatedata with id: {}" , portalcertificatedataId);
        PortalCertificateData deleted = this.wmGenericDao.findById(portalcertificatedataId);
        if (deleted == null) {
            LOGGER.debug("No portalcertificatedata found with id: {}" , portalcertificatedataId);
            throw new EntityNotFoundException(String.valueOf(portalcertificatedataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalcertificatedatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateData> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalcertificatedatas");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalCertificateData findById(PortalCertificateDataId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalcertificatedata by id: {}" , id);
        PortalCertificateData portalcertificatedata=this.wmGenericDao.findById(id);
        if(portalcertificatedata==null){
            LOGGER.debug("No portalcertificatedata found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalcertificatedata;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateData update(PortalCertificateData updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalcertificatedata with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalCertificateDataId id = new PortalCertificateDataId();
        id.setCertificateId(updated.getCertificateId());
        id.setPropertyId(updated.getPropertyId());
        id.setPin(updated.getPin());
        id.setVolume(updated.getVolume());
        id.setHeader(updated.getHeader());
        id.setCode(updated.getCode());
        id.setPropertyType(updated.getPropertyType());
        id.setCertificateNumber(updated.getCertificateNumber());
        id.setBidRate(updated.getBidRate());
        id.setTaxYear(updated.getTaxYear());
        id.setDateSold(updated.getDateSold());
        id.setStatus(updated.getStatus());
        id.setStatusChangeDate(updated.getStatusChangeDate());
        id.setStorageStatus(updated.getStorageStatus());
        id.setBank(updated.getBank());
        id.setExpirationDate(updated.getExpirationDate());
        id.setCountyName(updated.getCountyName());
        id.setCertificatePrincipal(updated.getCertificatePrincipal());
        id.setSubPrincipal(updated.getSubPrincipal());
        id.setFeePrincipal(updated.getFeePrincipal());
        id.setCertificateRevenue(updated.getCertificateRevenue());
        id.setSubRevenue(updated.getSubRevenue());
        id.setFeeRevenue(updated.getFeeRevenue());
        id.setPrincipal(updated.getPrincipal());
        id.setRevenue(updated.getRevenue());
        id.setBalanceDue(updated.getBalanceDue());
        id.setPaymentInTransit(updated.getPaymentInTransit());
        id.setDueAfterSettlement(updated.getDueAfterSettlement());
        id.setMatterNumber(updated.getMatterNumber());
        id.setInitialCourtDate(updated.getInitialCourtDate());
        id.setFiledDate(updated.getFiledDate());
        id.setClosedDate(updated.getClosedDate());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


