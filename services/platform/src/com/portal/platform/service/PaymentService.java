/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Payment.
 * @see com.portal.platform.Payment
 */

public interface PaymentService {
   /**
	 * Creates a new payment.
	 * 
	 * @param created
	 *            The information of the created payment.
	 * @return The created payment.
	 */
	public Payment create(Payment created);

	/**
	 * Deletes a payment.
	 * 
	 * @param paymentId
	 *            The id of the deleted payment.
	 * @return The deleted payment.
	 * @throws EntityNotFoundException
	 *             if no payment is found with the given id.
	 */
	public Payment delete(Integer paymentId) throws EntityNotFoundException;

	/**
	 * Finds all payments.
	 * 
	 * @return A list of payments.
	 */
	public Page<Payment> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Payment> findAll(Pageable pageable);
	
	/**
	 * Finds payment by id.
	 * 
	 * @param id
	 *            The id of the wanted payment.
	 * @return The found payment. If no payment is found, this method returns
	 *         null.
	 */
	public Payment findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a payment.
	 * 
	 * @param updated
	 *            The information of the updated payment.
	 * @return The updated payment.
	 * @throws EntityNotFoundException
	 *             if no payment is found with given id.
	 */
	public Payment update(Payment updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the payments in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the payment.
	 */

	public long countAll();


    public Page<Payment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

