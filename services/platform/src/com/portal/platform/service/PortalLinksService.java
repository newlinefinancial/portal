/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalLinks.
 * @see com.portal.platform.PortalLinks
 */

public interface PortalLinksService {
   /**
	 * Creates a new portallinks.
	 * 
	 * @param created
	 *            The information of the created portallinks.
	 * @return The created portallinks.
	 */
	public PortalLinks create(PortalLinks created);

	/**
	 * Deletes a portallinks.
	 * 
	 * @param portallinksId
	 *            The id of the deleted portallinks.
	 * @return The deleted portallinks.
	 * @throws EntityNotFoundException
	 *             if no portallinks is found with the given id.
	 */
	public PortalLinks delete(PortalLinksId portallinksId) throws EntityNotFoundException;

	/**
	 * Finds all portallinkss.
	 * 
	 * @return A list of portallinkss.
	 */
	public Page<PortalLinks> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalLinks> findAll(Pageable pageable);
	
	/**
	 * Finds portallinks by id.
	 * 
	 * @param id
	 *            The id of the wanted portallinks.
	 * @return The found portallinks. If no portallinks is found, this method returns
	 *         null.
	 */
	public PortalLinks findById(PortalLinksId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portallinks.
	 * 
	 * @param updated
	 *            The information of the updated portallinks.
	 * @return The updated portallinks.
	 * @throws EntityNotFoundException
	 *             if no portallinks is found with given id.
	 */
	public PortalLinks update(PortalLinks updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portallinkss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portallinks.
	 */

	public long countAll();


    public Page<PortalLinks> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

