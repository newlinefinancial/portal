/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class InspectionRoute.
 * @see com.portal.platform.InspectionRoute
 */

public interface InspectionRouteService {
   /**
	 * Creates a new inspectionroute.
	 * 
	 * @param created
	 *            The information of the created inspectionroute.
	 * @return The created inspectionroute.
	 */
	public InspectionRoute create(InspectionRoute created);

	/**
	 * Deletes a inspectionroute.
	 * 
	 * @param inspectionrouteId
	 *            The id of the deleted inspectionroute.
	 * @return The deleted inspectionroute.
	 * @throws EntityNotFoundException
	 *             if no inspectionroute is found with the given id.
	 */
	public InspectionRoute delete(Integer inspectionrouteId) throws EntityNotFoundException;

	/**
	 * Finds all inspectionroutes.
	 * 
	 * @return A list of inspectionroutes.
	 */
	public Page<InspectionRoute> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<InspectionRoute> findAll(Pageable pageable);
	
	/**
	 * Finds inspectionroute by id.
	 * 
	 * @param id
	 *            The id of the wanted inspectionroute.
	 * @return The found inspectionroute. If no inspectionroute is found, this method returns
	 *         null.
	 */
	public InspectionRoute findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a inspectionroute.
	 * 
	 * @param updated
	 *            The information of the updated inspectionroute.
	 * @return The updated inspectionroute.
	 * @throws EntityNotFoundException
	 *             if no inspectionroute is found with given id.
	 */
	public InspectionRoute update(InspectionRoute updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the inspectionroutes in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the inspectionroute.
	 */

	public long countAll();


    public Page<InspectionRoute> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

