/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.portal.platform.InspectionRoute;

/**
 * Service object for domain model class InspectionRoute.
 *
 * @see {@link InspectionRoute}
 */
public interface InspectionRouteService {


	/**
	 * Finds InspectionRoute by id.
	 *
	 * @param inspectionRouteId The id of the wanted InspectionRoute.
	 * @return The found InspectionRoute. If no InspectionRoute is found, this method returns null.
	 */
	InspectionRoute getById(Integer inspectionRouteId) throws EntityNotFoundException;

	/**
	 * Finds all InspectionRoutes.
	 *
	 * @return A list of InspectionRoutes.
	 */
    @Deprecated
	Page<InspectionRoute> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all InspectionRoutes.
	 * @return A list of InspectionRoutes.
	 */
    Page<InspectionRoute> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the InspectionRoutes in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the InspectionRoute.
	 */
	long count(String query);

    Page<InspectionRoute> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

