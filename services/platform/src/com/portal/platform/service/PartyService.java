/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Party.
 * @see com.portal.platform.Party
 */

public interface PartyService {
   /**
	 * Creates a new party.
	 * 
	 * @param created
	 *            The information of the created party.
	 * @return The created party.
	 */
	public Party create(Party created);

	/**
	 * Deletes a party.
	 * 
	 * @param partyId
	 *            The id of the deleted party.
	 * @return The deleted party.
	 * @throws EntityNotFoundException
	 *             if no party is found with the given id.
	 */
	public Party delete(Integer partyId) throws EntityNotFoundException;

	/**
	 * Finds all partys.
	 * 
	 * @return A list of partys.
	 */
	public Page<Party> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Party> findAll(Pageable pageable);
	
	/**
	 * Finds party by id.
	 * 
	 * @param id
	 *            The id of the wanted party.
	 * @return The found party. If no party is found, this method returns
	 *         null.
	 */
	public Party findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a party.
	 * 
	 * @param updated
	 *            The information of the updated party.
	 * @return The updated party.
	 * @throws EntityNotFoundException
	 *             if no party is found with given id.
	 */
	public Party update(Party updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the partys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the party.
	 */

	public long countAll();


    public Page<Party> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

