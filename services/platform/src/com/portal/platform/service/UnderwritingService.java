/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Underwriting.
 * @see com.portal.platform.Underwriting
 */

public interface UnderwritingService {
   /**
	 * Creates a new underwriting.
	 * 
	 * @param created
	 *            The information of the created underwriting.
	 * @return The created underwriting.
	 */
	public Underwriting create(Underwriting created);

	/**
	 * Deletes a underwriting.
	 * 
	 * @param underwritingId
	 *            The id of the deleted underwriting.
	 * @return The deleted underwriting.
	 * @throws EntityNotFoundException
	 *             if no underwriting is found with the given id.
	 */
	public Underwriting delete(Integer underwritingId) throws EntityNotFoundException;

	/**
	 * Finds all underwritings.
	 * 
	 * @return A list of underwritings.
	 */
	public Page<Underwriting> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Underwriting> findAll(Pageable pageable);
	
	/**
	 * Finds underwriting by id.
	 * 
	 * @param id
	 *            The id of the wanted underwriting.
	 * @return The found underwriting. If no underwriting is found, this method returns
	 *         null.
	 */
	public Underwriting findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a underwriting.
	 * 
	 * @param updated
	 *            The information of the updated underwriting.
	 * @return The updated underwriting.
	 * @throws EntityNotFoundException
	 *             if no underwriting is found with given id.
	 */
	public Underwriting update(Underwriting updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the underwritings in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the underwriting.
	 */

	public long countAll();


    public Page<Underwriting> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

