/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Rule.
 * @see com.portal.platform.Rule
 */
@Service("platform.RuleService")
public class RuleServiceImpl implements RuleService {


    private static final Logger LOGGER = LoggerFactory.getLogger(RuleServiceImpl.class);

    @Autowired
    @Qualifier("platform.RuleDao")
    private WMGenericDao<Rule, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Rule, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Rule> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Rule create(Rule rule) {
        LOGGER.debug("Creating a new rule with information: {}" , rule);
        return this.wmGenericDao.create(rule);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Rule delete(Integer ruleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting rule with id: {}" , ruleId);
        Rule deleted = this.wmGenericDao.findById(ruleId);
        if (deleted == null) {
            LOGGER.debug("No rule found with id: {}" , ruleId);
            throw new EntityNotFoundException(String.valueOf(ruleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Rule> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all rules");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Rule> findAll(Pageable pageable) {
        LOGGER.debug("Finding all rules");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Rule findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding rule by id: {}" , id);
        Rule rule=this.wmGenericDao.findById(id);
        if(rule==null){
            LOGGER.debug("No rule found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return rule;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Rule update(Rule updated) throws EntityNotFoundException {
        LOGGER.debug("Updating rule with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


