/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Date.
 * @see com.portal.platform.Date
 */
@Service("platform.DateService")
public class DateServiceImpl implements DateService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DateServiceImpl.class);

    @Autowired
    @Qualifier("platform.DateDao")
    private WMGenericDao<Date, java.util.Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Date, java.util.Date> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Date> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Date create(Date date) {
        LOGGER.debug("Creating a new date with information: {}" , date);
        return this.wmGenericDao.create(date);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Date delete(java.util.Date dateId) throws EntityNotFoundException {
        LOGGER.debug("Deleting date with id: {}" , dateId);
        Date deleted = this.wmGenericDao.findById(dateId);
        if (deleted == null) {
            LOGGER.debug("No date found with id: {}" , dateId);
            throw new EntityNotFoundException(String.valueOf(dateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Date> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all dates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Date> findAll(Pageable pageable) {
        LOGGER.debug("Finding all dates");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Date findById(java.util.Date id) throws EntityNotFoundException {
        LOGGER.debug("Finding date by id: {}" , id);
        Date date=this.wmGenericDao.findById(id);
        if(date==null){
            LOGGER.debug("No date found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return date;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Date update(Date updated) throws EntityNotFoundException {
        LOGGER.debug("Updating date with information: {}" , updated);
        this.wmGenericDao.update(updated);

        java.util.Date id = (java.util.Date)updated.getDate();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


