/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.portal.platform.Date;

/**
 * ServiceImpl object for domain model class Date.
 *
 * @see Date
 */
@Service("platform.DateService")
public class DateServiceImpl implements DateService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateServiceImpl.class);

    @Autowired
    @Qualifier("platform.DateDao")
    private WMGenericDao<Date, java.util.Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Date, java.util.Date> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "platformTransactionManager")
    @Override
	public Date create(Date dateInstance) {
        LOGGER.debug("Creating a new Date with information: {}", dateInstance);
        return this.wmGenericDao.create(dateInstance);
    }

	@Transactional(readOnly = true, value = "platformTransactionManager")
	@Override
	public Date getById(java.util.Date dateInstanceId) throws EntityNotFoundException {
        LOGGER.debug("Finding Date by id: {}", dateInstanceId);
        Date dateInstance = this.wmGenericDao.findById(dateInstanceId);
        if (dateInstance == null){
            LOGGER.debug("No Date found with id: {}", dateInstanceId);
            throw new EntityNotFoundException(String.valueOf(dateInstanceId));
        }
        return dateInstance;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
	@Override
	public Date update(Date dateInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating Date with information: {}", dateInstance);
        this.wmGenericDao.update(dateInstance);

        java.util.Date dateInstanceId = dateInstance.getDate();

        return this.wmGenericDao.findById(dateInstanceId);
    }

    @Transactional(value = "platformTransactionManager")
	@Override
	public Date delete(java.util.Date dateInstanceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Date with id: {}", dateInstanceId);
        Date deleted = this.wmGenericDao.findById(dateInstanceId);
        if (deleted == null) {
            LOGGER.debug("No Date found with id: {}", dateInstanceId);
            throw new EntityNotFoundException(String.valueOf(dateInstanceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "platformTransactionManager")
	@Override
	public Page<Date> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Dates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Date> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Dates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service platform for table Date to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "platformTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Date> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

