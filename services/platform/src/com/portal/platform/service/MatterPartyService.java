/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class MatterParty.
 * @see com.portal.platform.MatterParty
 */

public interface MatterPartyService {
   /**
	 * Creates a new matterparty.
	 * 
	 * @param created
	 *            The information of the created matterparty.
	 * @return The created matterparty.
	 */
	public MatterParty create(MatterParty created);

	/**
	 * Deletes a matterparty.
	 * 
	 * @param matterpartyId
	 *            The id of the deleted matterparty.
	 * @return The deleted matterparty.
	 * @throws EntityNotFoundException
	 *             if no matterparty is found with the given id.
	 */
	public MatterParty delete(Integer matterpartyId) throws EntityNotFoundException;

	/**
	 * Finds all matterpartys.
	 * 
	 * @return A list of matterpartys.
	 */
	public Page<MatterParty> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<MatterParty> findAll(Pageable pageable);
	
	/**
	 * Finds matterparty by id.
	 * 
	 * @param id
	 *            The id of the wanted matterparty.
	 * @return The found matterparty. If no matterparty is found, this method returns
	 *         null.
	 */
	public MatterParty findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a matterparty.
	 * 
	 * @param updated
	 *            The information of the updated matterparty.
	 * @return The updated matterparty.
	 * @throws EntityNotFoundException
	 *             if no matterparty is found with given id.
	 */
	public MatterParty update(MatterParty updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the matterpartys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the matterparty.
	 */

	public long countAll();


    public Page<MatterParty> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

