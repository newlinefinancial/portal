/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class BorrowingBase.
 * @see com.portal.platform.BorrowingBase
 */
@Service("platform.BorrowingBaseService")
public class BorrowingBaseServiceImpl implements BorrowingBaseService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BorrowingBaseServiceImpl.class);

    @Autowired
    @Qualifier("platform.BorrowingBaseDao")
    private WMGenericDao<BorrowingBase, BorrowingBaseId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BorrowingBase, BorrowingBaseId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<BorrowingBase> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public BorrowingBase create(BorrowingBase borrowingbase) {
        LOGGER.debug("Creating a new borrowingbase with information: {}" , borrowingbase);
        return this.wmGenericDao.create(borrowingbase);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BorrowingBase delete(BorrowingBaseId borrowingbaseId) throws EntityNotFoundException {
        LOGGER.debug("Deleting borrowingbase with id: {}" , borrowingbaseId);
        BorrowingBase deleted = this.wmGenericDao.findById(borrowingbaseId);
        if (deleted == null) {
            LOGGER.debug("No borrowingbase found with id: {}" , borrowingbaseId);
            throw new EntityNotFoundException(String.valueOf(borrowingbaseId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BorrowingBase> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all borrowingbases");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BorrowingBase> findAll(Pageable pageable) {
        LOGGER.debug("Finding all borrowingbases");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public BorrowingBase findById(BorrowingBaseId id) throws EntityNotFoundException {
        LOGGER.debug("Finding borrowingbase by id: {}" , id);
        BorrowingBase borrowingbase=this.wmGenericDao.findById(id);
        if(borrowingbase==null){
            LOGGER.debug("No borrowingbase found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return borrowingbase;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BorrowingBase update(BorrowingBase updated) throws EntityNotFoundException {
        LOGGER.debug("Updating borrowingbase with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BorrowingBaseId id = new BorrowingBaseId();
        id.setState(updated.getState());
        id.setCounty(updated.getCounty());
        id.setTaxYear(updated.getTaxYear());
        id.setCertificatePrincipal(updated.getCertificatePrincipal());
        id.setSubPrincipal(updated.getSubPrincipal());
        id.setTrustReceipt(updated.getTrustReceipt());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


