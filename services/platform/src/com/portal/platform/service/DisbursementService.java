/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Disbursement.
 * @see com.portal.platform.Disbursement
 */

public interface DisbursementService {
   /**
	 * Creates a new disbursement.
	 * 
	 * @param created
	 *            The information of the created disbursement.
	 * @return The created disbursement.
	 */
	public Disbursement create(Disbursement created);

	/**
	 * Deletes a disbursement.
	 * 
	 * @param disbursementId
	 *            The id of the deleted disbursement.
	 * @return The deleted disbursement.
	 * @throws EntityNotFoundException
	 *             if no disbursement is found with the given id.
	 */
	public Disbursement delete(Integer disbursementId) throws EntityNotFoundException;

	/**
	 * Finds all disbursements.
	 * 
	 * @return A list of disbursements.
	 */
	public Page<Disbursement> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Disbursement> findAll(Pageable pageable);
	
	/**
	 * Finds disbursement by id.
	 * 
	 * @param id
	 *            The id of the wanted disbursement.
	 * @return The found disbursement. If no disbursement is found, this method returns
	 *         null.
	 */
	public Disbursement findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a disbursement.
	 * 
	 * @param updated
	 *            The information of the updated disbursement.
	 * @return The updated disbursement.
	 * @throws EntityNotFoundException
	 *             if no disbursement is found with given id.
	 */
	public Disbursement update(Disbursement updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the disbursements in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the disbursement.
	 */

	public long countAll();


    public Page<Disbursement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

