/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalLinks.
 * @see com.portal.platform.PortalLinks
 */
@Service("platform.PortalLinksService")
public class PortalLinksServiceImpl implements PortalLinksService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalLinksServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalLinksDao")
    private WMGenericDao<PortalLinks, PortalLinksId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalLinks, PortalLinksId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalLinks> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalLinks create(PortalLinks portallinks) {
        LOGGER.debug("Creating a new portallinks with information: {}" , portallinks);
        return this.wmGenericDao.create(portallinks);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalLinks delete(PortalLinksId portallinksId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portallinks with id: {}" , portallinksId);
        PortalLinks deleted = this.wmGenericDao.findById(portallinksId);
        if (deleted == null) {
            LOGGER.debug("No portallinks found with id: {}" , portallinksId);
            throw new EntityNotFoundException(String.valueOf(portallinksId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalLinks> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portallinkss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalLinks> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portallinkss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalLinks findById(PortalLinksId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portallinks by id: {}" , id);
        PortalLinks portallinks=this.wmGenericDao.findById(id);
        if(portallinks==null){
            LOGGER.debug("No portallinks found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portallinks;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalLinks update(PortalLinks updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portallinks with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalLinksId id = new PortalLinksId();
        id.setPropertyId(updated.getPropertyId());
        id.setGis(updated.getGis());
        id.setAssessor(updated.getAssessor());
        id.setTreasurer(updated.getTreasurer());
        id.setRecorder(updated.getRecorder());
        id.setClerk(updated.getClerk());
        id.setNewlinePhoto(updated.getNewlinePhoto());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


