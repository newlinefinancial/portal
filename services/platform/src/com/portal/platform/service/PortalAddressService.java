/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalAddress.
 * @see com.portal.platform.PortalAddress
 */

public interface PortalAddressService {
   /**
	 * Creates a new portaladdress.
	 * 
	 * @param created
	 *            The information of the created portaladdress.
	 * @return The created portaladdress.
	 */
	public PortalAddress create(PortalAddress created);

	/**
	 * Deletes a portaladdress.
	 * 
	 * @param portaladdressId
	 *            The id of the deleted portaladdress.
	 * @return The deleted portaladdress.
	 * @throws EntityNotFoundException
	 *             if no portaladdress is found with the given id.
	 */
	public PortalAddress delete(PortalAddressId portaladdressId) throws EntityNotFoundException;

	/**
	 * Finds all portaladdresss.
	 * 
	 * @return A list of portaladdresss.
	 */
	public Page<PortalAddress> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalAddress> findAll(Pageable pageable);
	
	/**
	 * Finds portaladdress by id.
	 * 
	 * @param id
	 *            The id of the wanted portaladdress.
	 * @return The found portaladdress. If no portaladdress is found, this method returns
	 *         null.
	 */
	public PortalAddress findById(PortalAddressId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portaladdress.
	 * 
	 * @param updated
	 *            The information of the updated portaladdress.
	 * @return The updated portaladdress.
	 * @throws EntityNotFoundException
	 *             if no portaladdress is found with given id.
	 */
	public PortalAddress update(PortalAddress updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portaladdresss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portaladdress.
	 */

	public long countAll();


    public Page<PortalAddress> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

