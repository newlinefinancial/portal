/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Inspection.
 * @see com.portal.platform.Inspection
 */

public interface InspectionService {
   /**
	 * Creates a new inspection.
	 * 
	 * @param created
	 *            The information of the created inspection.
	 * @return The created inspection.
	 */
	public Inspection create(Inspection created);

	/**
	 * Deletes a inspection.
	 * 
	 * @param inspectionId
	 *            The id of the deleted inspection.
	 * @return The deleted inspection.
	 * @throws EntityNotFoundException
	 *             if no inspection is found with the given id.
	 */
	public Inspection delete(Integer inspectionId) throws EntityNotFoundException;

	/**
	 * Finds all inspections.
	 * 
	 * @return A list of inspections.
	 */
	public Page<Inspection> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Inspection> findAll(Pageable pageable);
	
	/**
	 * Finds inspection by id.
	 * 
	 * @param id
	 *            The id of the wanted inspection.
	 * @return The found inspection. If no inspection is found, this method returns
	 *         null.
	 */
	public Inspection findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a inspection.
	 * 
	 * @param updated
	 *            The information of the updated inspection.
	 * @return The updated inspection.
	 * @throws EntityNotFoundException
	 *             if no inspection is found with given id.
	 */
	public Inspection update(Inspection updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the inspections in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the inspection.
	 */

	public long countAll();


    public Page<Inspection> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

