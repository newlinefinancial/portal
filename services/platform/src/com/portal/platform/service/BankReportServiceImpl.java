/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class BankReport.
 * @see com.portal.platform.BankReport
 */
@Service("platform.BankReportService")
public class BankReportServiceImpl implements BankReportService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BankReportServiceImpl.class);

    @Autowired
    @Qualifier("platform.BankReportDao")
    private WMGenericDao<BankReport, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BankReport, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<BankReport> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public BankReport create(BankReport bankreport) {
        LOGGER.debug("Creating a new bankreport with information: {}" , bankreport);
        return this.wmGenericDao.create(bankreport);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BankReport delete(Integer bankreportId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bankreport with id: {}" , bankreportId);
        BankReport deleted = this.wmGenericDao.findById(bankreportId);
        if (deleted == null) {
            LOGGER.debug("No bankreport found with id: {}" , bankreportId);
            throw new EntityNotFoundException(String.valueOf(bankreportId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BankReport> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bankreports");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BankReport> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bankreports");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public BankReport findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding bankreport by id: {}" , id);
        BankReport bankreport=this.wmGenericDao.findById(id);
        if(bankreport==null){
            LOGGER.debug("No bankreport found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bankreport;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BankReport update(BankReport updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bankreport with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


