/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Matter.
 * @see com.portal.platform.Matter
 */
@Service("platform.MatterService")
public class MatterServiceImpl implements MatterService {


    private static final Logger LOGGER = LoggerFactory.getLogger(MatterServiceImpl.class);

    @Autowired
    @Qualifier("platform.MatterDao")
    private WMGenericDao<Matter, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Matter, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Matter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Matter create(Matter matter) {
        LOGGER.debug("Creating a new matter with information: {}" , matter);
        return this.wmGenericDao.create(matter);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Matter delete(Integer matterId) throws EntityNotFoundException {
        LOGGER.debug("Deleting matter with id: {}" , matterId);
        Matter deleted = this.wmGenericDao.findById(matterId);
        if (deleted == null) {
            LOGGER.debug("No matter found with id: {}" , matterId);
            throw new EntityNotFoundException(String.valueOf(matterId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Matter> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all matters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Matter> findAll(Pageable pageable) {
        LOGGER.debug("Finding all matters");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Matter findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding matter by id: {}" , id);
        Matter matter=this.wmGenericDao.findById(id);
        if(matter==null){
            LOGGER.debug("No matter found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return matter;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Matter update(Matter updated) throws EntityNotFoundException {
        LOGGER.debug("Updating matter with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


