/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalMatterParty.
 * @see com.portal.platform.PortalMatterParty
 */

public interface PortalMatterPartyService {
   /**
	 * Creates a new portalmatterparty.
	 * 
	 * @param created
	 *            The information of the created portalmatterparty.
	 * @return The created portalmatterparty.
	 */
	public PortalMatterParty create(PortalMatterParty created);

	/**
	 * Deletes a portalmatterparty.
	 * 
	 * @param portalmatterpartyId
	 *            The id of the deleted portalmatterparty.
	 * @return The deleted portalmatterparty.
	 * @throws EntityNotFoundException
	 *             if no portalmatterparty is found with the given id.
	 */
	public PortalMatterParty delete(PortalMatterPartyId portalmatterpartyId) throws EntityNotFoundException;

	/**
	 * Finds all portalmatterpartys.
	 * 
	 * @return A list of portalmatterpartys.
	 */
	public Page<PortalMatterParty> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalMatterParty> findAll(Pageable pageable);
	
	/**
	 * Finds portalmatterparty by id.
	 * 
	 * @param id
	 *            The id of the wanted portalmatterparty.
	 * @return The found portalmatterparty. If no portalmatterparty is found, this method returns
	 *         null.
	 */
	public PortalMatterParty findById(PortalMatterPartyId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portalmatterparty.
	 * 
	 * @param updated
	 *            The information of the updated portalmatterparty.
	 * @return The updated portalmatterparty.
	 * @throws EntityNotFoundException
	 *             if no portalmatterparty is found with given id.
	 */
	public PortalMatterParty update(PortalMatterParty updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portalmatterpartys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portalmatterparty.
	 */

	public long countAll();


    public Page<PortalMatterParty> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

