/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalCertificateNote.
 * @see com.portal.platform.PortalCertificateNote
 */
@Service("platform.PortalCertificateNoteService")
public class PortalCertificateNoteServiceImpl implements PortalCertificateNoteService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateNoteServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalCertificateNoteDao")
    private WMGenericDao<PortalCertificateNote, PortalCertificateNoteId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalCertificateNote, PortalCertificateNoteId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalCertificateNote> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalCertificateNote create(PortalCertificateNote portalcertificatenote) {
        LOGGER.debug("Creating a new portalcertificatenote with information: {}" , portalcertificatenote);
        return this.wmGenericDao.create(portalcertificatenote);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateNote delete(PortalCertificateNoteId portalcertificatenoteId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalcertificatenote with id: {}" , portalcertificatenoteId);
        PortalCertificateNote deleted = this.wmGenericDao.findById(portalcertificatenoteId);
        if (deleted == null) {
            LOGGER.debug("No portalcertificatenote found with id: {}" , portalcertificatenoteId);
            throw new EntityNotFoundException(String.valueOf(portalcertificatenoteId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateNote> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalcertificatenotes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateNote> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalcertificatenotes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalCertificateNote findById(PortalCertificateNoteId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalcertificatenote by id: {}" , id);
        PortalCertificateNote portalcertificatenote=this.wmGenericDao.findById(id);
        if(portalcertificatenote==null){
            LOGGER.debug("No portalcertificatenote found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalcertificatenote;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateNote update(PortalCertificateNote updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalcertificatenote with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalCertificateNoteId id = new PortalCertificateNoteId();
        id.setNoteId(updated.getNoteId());
        id.setCertificateId(updated.getCertificateId());
        id.setUser(updated.getUser());
        id.setCreated(updated.getCreated());
        id.setDue(updated.getDue());
        id.setDone(updated.getDone());
        id.setNoteDescription(updated.getNoteDescription());
        id.setNoteTypeId(updated.getNoteTypeId());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


