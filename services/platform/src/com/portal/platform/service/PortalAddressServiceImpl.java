/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalAddress.
 * @see com.portal.platform.PortalAddress
 */
@Service("platform.PortalAddressService")
public class PortalAddressServiceImpl implements PortalAddressService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAddressServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalAddressDao")
    private WMGenericDao<PortalAddress, PortalAddressId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalAddress, PortalAddressId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalAddress> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalAddress create(PortalAddress portaladdress) {
        LOGGER.debug("Creating a new portaladdress with information: {}" , portaladdress);
        return this.wmGenericDao.create(portaladdress);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAddress delete(PortalAddressId portaladdressId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portaladdress with id: {}" , portaladdressId);
        PortalAddress deleted = this.wmGenericDao.findById(portaladdressId);
        if (deleted == null) {
            LOGGER.debug("No portaladdress found with id: {}" , portaladdressId);
            throw new EntityNotFoundException(String.valueOf(portaladdressId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAddress> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portaladdresss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAddress> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portaladdresss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalAddress findById(PortalAddressId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portaladdress by id: {}" , id);
        PortalAddress portaladdress=this.wmGenericDao.findById(id);
        if(portaladdress==null){
            LOGGER.debug("No portaladdress found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portaladdress;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAddress update(PortalAddress updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portaladdress with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalAddressId id = new PortalAddressId();
        id.setCountyName(updated.getCountyName());
        id.setBank(updated.getBank());
        id.setTaxYear(updated.getTaxYear());
        id.setVolume(updated.getVolume());
        id.setPin(updated.getPin());
        id.setCertificateNumber(updated.getCertificateNumber());
        id.setDateSold(updated.getDateSold());
        id.setExpirationDate(updated.getExpirationDate());
        id.setStatus(updated.getStatus());
        id.setTaxYearNotices(updated.getTaxYearNotices());
        id.setAddressLine1(updated.getAddressLine1());
        id.setAddressLine2(updated.getAddressLine2());
        id.setAddressCity(updated.getAddressCity());
        id.setAddressZip(updated.getAddressZip());
        id.setAddressVerified(updated.getAddressVerified());
        id.setAddressSource1(updated.getAddressSource1());
        id.setAddressSource2(updated.getAddressSource2());
        id.setAssesseeName(updated.getAssesseeName());
        id.setAssesseeAddressLine1(updated.getAssesseeAddressLine1());
        id.setAssesseeAddressCity(updated.getAssesseeAddressCity());
        id.setAssesseeAddressState(updated.getAssesseeAddressState());
        id.setAssesseeAddressZip(updated.getAssesseeAddressZip());
        id.setCode(updated.getCode());
        id.setZoning(updated.getZoning());
        id.setImprovementLevel(updated.getImprovementLevel());
        id.setCertificatePrincipal(updated.getCertificatePrincipal());
        id.setSubPrincipal(updated.getSubPrincipal());
        id.setFeePrincipal(updated.getFeePrincipal());
        id.setPrincipal(updated.getPrincipal());
        id.setCertificateRevenue(updated.getCertificateRevenue());
        id.setSubRevenue(updated.getSubRevenue());
        id.setFeeRevenue(updated.getFeeRevenue());
        id.setRevenue(updated.getRevenue());
        id.setRedemptionAmount(updated.getRedemptionAmount());
        id.setAmountPaid(updated.getAmountPaid());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


