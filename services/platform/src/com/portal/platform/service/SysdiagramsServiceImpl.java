/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.portal.platform.Sysdiagrams;

/**
 * ServiceImpl object for domain model class Sysdiagrams.
 *
 * @see Sysdiagrams
 */
@Service("platform.SysdiagramsService")
public class SysdiagramsServiceImpl implements SysdiagramsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SysdiagramsServiceImpl.class);

    @Autowired
    @Qualifier("platform.SysdiagramsDao")
    private WMGenericDao<Sysdiagrams, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Sysdiagrams, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "platformTransactionManager")
    @Override
	public Sysdiagrams create(Sysdiagrams sysdiagrams) {
        LOGGER.debug("Creating a new Sysdiagrams with information: {}", sysdiagrams);
        return this.wmGenericDao.create(sysdiagrams);
    }

	@Transactional(readOnly = true, value = "platformTransactionManager")
	@Override
	public Sysdiagrams getById(Integer sysdiagramsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Sysdiagrams by id: {}", sysdiagramsId);
        Sysdiagrams sysdiagrams = this.wmGenericDao.findById(sysdiagramsId);
        if (sysdiagrams == null){
            LOGGER.debug("No Sysdiagrams found with id: {}", sysdiagramsId);
            throw new EntityNotFoundException(String.valueOf(sysdiagramsId));
        }
        return sysdiagrams;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
	@Override
	public Sysdiagrams update(Sysdiagrams sysdiagrams) throws EntityNotFoundException {
        LOGGER.debug("Updating Sysdiagrams with information: {}", sysdiagrams);
        this.wmGenericDao.update(sysdiagrams);

        Integer sysdiagramsId = sysdiagrams.getDiagramId();

        return this.wmGenericDao.findById(sysdiagramsId);
    }

    @Transactional(value = "platformTransactionManager")
	@Override
	public Sysdiagrams delete(Integer sysdiagramsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Sysdiagrams with id: {}", sysdiagramsId);
        Sysdiagrams deleted = this.wmGenericDao.findById(sysdiagramsId);
        if (deleted == null) {
            LOGGER.debug("No Sysdiagrams found with id: {}", sysdiagramsId);
            throw new EntityNotFoundException(String.valueOf(sysdiagramsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "platformTransactionManager")
	@Override
	public Page<Sysdiagrams> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Sysdiagrams");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Sysdiagrams> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Sysdiagrams");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service platform for table Sysdiagrams to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "platformTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Sysdiagrams> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

