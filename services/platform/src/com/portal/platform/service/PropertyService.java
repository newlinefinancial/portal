/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Property.
 * @see com.portal.platform.Property
 */

public interface PropertyService {
   /**
	 * Creates a new property.
	 * 
	 * @param created
	 *            The information of the created property.
	 * @return The created property.
	 */
	public Property create(Property created);

	/**
	 * Deletes a property.
	 * 
	 * @param propertyId
	 *            The id of the deleted property.
	 * @return The deleted property.
	 * @throws EntityNotFoundException
	 *             if no property is found with the given id.
	 */
	public Property delete(Integer propertyId) throws EntityNotFoundException;

	/**
	 * Finds all propertys.
	 * 
	 * @return A list of propertys.
	 */
	public Page<Property> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Property> findAll(Pageable pageable);
	
	/**
	 * Finds property by id.
	 * 
	 * @param id
	 *            The id of the wanted property.
	 * @return The found property. If no property is found, this method returns
	 *         null.
	 */
	public Property findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a property.
	 * 
	 * @param updated
	 *            The information of the updated property.
	 * @return The updated property.
	 * @throws EntityNotFoundException
	 *             if no property is found with given id.
	 */
	public Property update(Property updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the propertys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the property.
	 */

	public long countAll();


    public Page<Property> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

