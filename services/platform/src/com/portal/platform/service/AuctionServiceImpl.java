/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Auction.
 * @see com.portal.platform.Auction
 */
@Service("platform.AuctionService")
public class AuctionServiceImpl implements AuctionService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AuctionServiceImpl.class);

    @Autowired
    @Qualifier("platform.AuctionDao")
    private WMGenericDao<Auction, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Auction, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Auction> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Auction create(Auction auction) {
        LOGGER.debug("Creating a new auction with information: {}" , auction);
        return this.wmGenericDao.create(auction);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Auction delete(Integer auctionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting auction with id: {}" , auctionId);
        Auction deleted = this.wmGenericDao.findById(auctionId);
        if (deleted == null) {
            LOGGER.debug("No auction found with id: {}" , auctionId);
            throw new EntityNotFoundException(String.valueOf(auctionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Auction> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all auctions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Auction> findAll(Pageable pageable) {
        LOGGER.debug("Finding all auctions");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Auction findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding auction by id: {}" , id);
        Auction auction=this.wmGenericDao.findById(id);
        if(auction==null){
            LOGGER.debug("No auction found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return auction;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Auction update(Auction updated) throws EntityNotFoundException {
        LOGGER.debug("Updating auction with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


