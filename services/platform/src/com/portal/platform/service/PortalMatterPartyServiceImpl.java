/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalMatterParty.
 * @see com.portal.platform.PortalMatterParty
 */
@Service("platform.PortalMatterPartyService")
public class PortalMatterPartyServiceImpl implements PortalMatterPartyService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalMatterPartyServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalMatterPartyDao")
    private WMGenericDao<PortalMatterParty, PortalMatterPartyId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalMatterParty, PortalMatterPartyId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalMatterParty> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalMatterParty create(PortalMatterParty portalmatterparty) {
        LOGGER.debug("Creating a new portalmatterparty with information: {}" , portalmatterparty);
        return this.wmGenericDao.create(portalmatterparty);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalMatterParty delete(PortalMatterPartyId portalmatterpartyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalmatterparty with id: {}" , portalmatterpartyId);
        PortalMatterParty deleted = this.wmGenericDao.findById(portalmatterpartyId);
        if (deleted == null) {
            LOGGER.debug("No portalmatterparty found with id: {}" , portalmatterpartyId);
            throw new EntityNotFoundException(String.valueOf(portalmatterpartyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalMatterParty> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalmatterpartys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalMatterParty> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalmatterpartys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalMatterParty findById(PortalMatterPartyId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalmatterparty by id: {}" , id);
        PortalMatterParty portalmatterparty=this.wmGenericDao.findById(id);
        if(portalmatterparty==null){
            LOGGER.debug("No portalmatterparty found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalmatterparty;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalMatterParty update(PortalMatterParty updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalmatterparty with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalMatterPartyId id = new PortalMatterPartyId();
        id.setMatterPartyId(updated.getMatterPartyId());
        id.setInterestType1(updated.getInterestType1());
        id.setInterestType2(updated.getInterestType2());
        id.setInterestType3(updated.getInterestType3());
        id.setServiceType(updated.getServiceType());
        id.setService1Reference(updated.getService1Reference());
        id.setService1Status(updated.getService1Status());
        id.setService2Reference(updated.getService2Reference());
        id.setService2Status(updated.getService2Status());
        id.setService2Flag(updated.getService2Flag());
        id.setService3Reference(updated.getService3Reference());
        id.setService3Status(updated.getService3Status());
        id.setService3Flag(updated.getService3Flag());
        id.setName(updated.getName());
        id.setCareOf(updated.getCareOf());
        id.setAddress(updated.getAddress());
        id.setCity(updated.getCity());
        id.setState(updated.getState());
        id.setZip(updated.getZip());
        id.setPartyId(updated.getPartyId());
        id.setPartyCsz(updated.getPartyCsz());
        id.setClass_(updated.getClass_());
        id.setSource1(updated.getSource1());
        id.setSource2(updated.getSource2());
        id.setPiq(updated.getPiq());
        id.setMatterId(updated.getMatterId());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


