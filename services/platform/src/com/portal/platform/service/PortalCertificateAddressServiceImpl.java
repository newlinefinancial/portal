/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalCertificateAddress.
 * @see com.portal.platform.PortalCertificateAddress
 */
@Service("platform.PortalCertificateAddressService")
public class PortalCertificateAddressServiceImpl implements PortalCertificateAddressService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateAddressServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalCertificateAddressDao")
    private WMGenericDao<PortalCertificateAddress, PortalCertificateAddressId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalCertificateAddress, PortalCertificateAddressId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalCertificateAddress> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalCertificateAddress create(PortalCertificateAddress portalcertificateaddress) {
        LOGGER.debug("Creating a new portalcertificateaddress with information: {}" , portalcertificateaddress);
        return this.wmGenericDao.create(portalcertificateaddress);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateAddress delete(PortalCertificateAddressId portalcertificateaddressId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalcertificateaddress with id: {}" , portalcertificateaddressId);
        PortalCertificateAddress deleted = this.wmGenericDao.findById(portalcertificateaddressId);
        if (deleted == null) {
            LOGGER.debug("No portalcertificateaddress found with id: {}" , portalcertificateaddressId);
            throw new EntityNotFoundException(String.valueOf(portalcertificateaddressId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateAddress> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalcertificateaddresss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateAddress> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalcertificateaddresss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalCertificateAddress findById(PortalCertificateAddressId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalcertificateaddress by id: {}" , id);
        PortalCertificateAddress portalcertificateaddress=this.wmGenericDao.findById(id);
        if(portalcertificateaddress==null){
            LOGGER.debug("No portalcertificateaddress found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalcertificateaddress;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateAddress update(PortalCertificateAddress updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalcertificateaddress with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalCertificateAddressId id = new PortalCertificateAddressId();
        id.setCountyName(updated.getCountyName());
        id.setCertificateId(updated.getCertificateId());
        id.setBank(updated.getBank());
        id.setTaxYear(updated.getTaxYear());
        id.setVolume(updated.getVolume());
        id.setPin(updated.getPin());
        id.setCertificateNumber(updated.getCertificateNumber());
        id.setDateSold(updated.getDateSold());
        id.setExpirationDate(updated.getExpirationDate());
        id.setStatus(updated.getStatus());
        id.setTaxYearNotices(updated.getTaxYearNotices());
        id.setAddressLine1(updated.getAddressLine1());
        id.setAddressLine2(updated.getAddressLine2());
        id.setAddressCity(updated.getAddressCity());
        id.setAddressZip(updated.getAddressZip());
        id.setAddressVerified(updated.getAddressVerified());
        id.setAddressSource1(updated.getAddressSource1());
        id.setAddressSource2(updated.getAddressSource2());
        id.setAssesseeName(updated.getAssesseeName());
        id.setAssesseeAddressLine1(updated.getAssesseeAddressLine1());
        id.setAssesseeAddressCity(updated.getAssesseeAddressCity());
        id.setAssesseeAddressState(updated.getAssesseeAddressState());
        id.setAssesseeAddressZip(updated.getAssesseeAddressZip());
        id.setCode(updated.getCode());
        id.setZoning(updated.getZoning());
        id.setImprovementLevel(updated.getImprovementLevel());
        id.setCertificatePrincipal(updated.getCertificatePrincipal());
        id.setSubPrincipal(updated.getSubPrincipal());
        id.setFeePrincipal(updated.getFeePrincipal());
        id.setPrincipal(updated.getPrincipal());
        id.setCertificateRevenue(updated.getCertificateRevenue());
        id.setSubRevenue(updated.getSubRevenue());
        id.setFeeRevenue(updated.getFeeRevenue());
        id.setRevenue(updated.getRevenue());
        id.setRedemptionAmount(updated.getRedemptionAmount());
        id.setAmountPaid(updated.getAmountPaid());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


