/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class NoteType.
 * @see com.portal.platform.NoteType
 */
@Service("platform.NoteTypeService")
public class NoteTypeServiceImpl implements NoteTypeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NoteTypeServiceImpl.class);

    @Autowired
    @Qualifier("platform.NoteTypeDao")
    private WMGenericDao<NoteType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<NoteType, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<NoteType> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public NoteType create(NoteType notetype) {
        LOGGER.debug("Creating a new notetype with information: {}" , notetype);
        return this.wmGenericDao.create(notetype);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public NoteType delete(Integer notetypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting notetype with id: {}" , notetypeId);
        NoteType deleted = this.wmGenericDao.findById(notetypeId);
        if (deleted == null) {
            LOGGER.debug("No notetype found with id: {}" , notetypeId);
            throw new EntityNotFoundException(String.valueOf(notetypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<NoteType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all notetypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<NoteType> findAll(Pageable pageable) {
        LOGGER.debug("Finding all notetypes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public NoteType findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding notetype by id: {}" , id);
        NoteType notetype=this.wmGenericDao.findById(id);
        if(notetype==null){
            LOGGER.debug("No notetype found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return notetype;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public NoteType update(NoteType updated) throws EntityNotFoundException {
        LOGGER.debug("Updating notetype with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


