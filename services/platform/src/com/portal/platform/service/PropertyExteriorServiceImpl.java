/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PropertyExterior.
 * @see com.portal.platform.PropertyExterior
 */
@Service("platform.PropertyExteriorService")
public class PropertyExteriorServiceImpl implements PropertyExteriorService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyExteriorServiceImpl.class);

    @Autowired
    @Qualifier("platform.PropertyExteriorDao")
    private WMGenericDao<PropertyExterior, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PropertyExterior, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PropertyExterior> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PropertyExterior create(PropertyExterior propertyexterior) {
        LOGGER.debug("Creating a new propertyexterior with information: {}" , propertyexterior);
        return this.wmGenericDao.create(propertyexterior);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PropertyExterior delete(Integer propertyexteriorId) throws EntityNotFoundException {
        LOGGER.debug("Deleting propertyexterior with id: {}" , propertyexteriorId);
        PropertyExterior deleted = this.wmGenericDao.findById(propertyexteriorId);
        if (deleted == null) {
            LOGGER.debug("No propertyexterior found with id: {}" , propertyexteriorId);
            throw new EntityNotFoundException(String.valueOf(propertyexteriorId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PropertyExterior> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all propertyexteriors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PropertyExterior> findAll(Pageable pageable) {
        LOGGER.debug("Finding all propertyexteriors");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PropertyExterior findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding propertyexterior by id: {}" , id);
        PropertyExterior propertyexterior=this.wmGenericDao.findById(id);
        if(propertyexterior==null){
            LOGGER.debug("No propertyexterior found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return propertyexterior;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PropertyExterior update(PropertyExterior updated) throws EntityNotFoundException {
        LOGGER.debug("Updating propertyexterior with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


