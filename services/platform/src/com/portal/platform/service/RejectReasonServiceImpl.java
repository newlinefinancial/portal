/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class RejectReason.
 * @see com.portal.platform.RejectReason
 */
@Service("platform.RejectReasonService")
public class RejectReasonServiceImpl implements RejectReasonService {


    private static final Logger LOGGER = LoggerFactory.getLogger(RejectReasonServiceImpl.class);

    @Autowired
    @Qualifier("platform.RejectReasonDao")
    private WMGenericDao<RejectReason, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RejectReason, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<RejectReason> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public RejectReason create(RejectReason rejectreason) {
        LOGGER.debug("Creating a new rejectreason with information: {}" , rejectreason);
        return this.wmGenericDao.create(rejectreason);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public RejectReason delete(Integer rejectreasonId) throws EntityNotFoundException {
        LOGGER.debug("Deleting rejectreason with id: {}" , rejectreasonId);
        RejectReason deleted = this.wmGenericDao.findById(rejectreasonId);
        if (deleted == null) {
            LOGGER.debug("No rejectreason found with id: {}" , rejectreasonId);
            throw new EntityNotFoundException(String.valueOf(rejectreasonId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<RejectReason> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all rejectreasons");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<RejectReason> findAll(Pageable pageable) {
        LOGGER.debug("Finding all rejectreasons");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public RejectReason findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding rejectreason by id: {}" , id);
        RejectReason rejectreason=this.wmGenericDao.findById(id);
        if(rejectreason==null){
            LOGGER.debug("No rejectreason found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return rejectreason;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public RejectReason update(RejectReason updated) throws EntityNotFoundException {
        LOGGER.debug("Updating rejectreason with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


