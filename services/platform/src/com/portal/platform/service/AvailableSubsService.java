/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class AvailableSubs.
 * @see com.portal.platform.AvailableSubs
 */

public interface AvailableSubsService {
   /**
	 * Creates a new availablesubs.
	 * 
	 * @param created
	 *            The information of the created availablesubs.
	 * @return The created availablesubs.
	 */
	public AvailableSubs create(AvailableSubs created);

	/**
	 * Deletes a availablesubs.
	 * 
	 * @param availablesubsId
	 *            The id of the deleted availablesubs.
	 * @return The deleted availablesubs.
	 * @throws EntityNotFoundException
	 *             if no availablesubs is found with the given id.
	 */
	public AvailableSubs delete(Integer availablesubsId) throws EntityNotFoundException;

	/**
	 * Finds all availablesubss.
	 * 
	 * @return A list of availablesubss.
	 */
	public Page<AvailableSubs> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AvailableSubs> findAll(Pageable pageable);
	
	/**
	 * Finds availablesubs by id.
	 * 
	 * @param id
	 *            The id of the wanted availablesubs.
	 * @return The found availablesubs. If no availablesubs is found, this method returns
	 *         null.
	 */
	public AvailableSubs findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a availablesubs.
	 * 
	 * @param updated
	 *            The information of the updated availablesubs.
	 * @return The updated availablesubs.
	 * @throws EntityNotFoundException
	 *             if no availablesubs is found with given id.
	 */
	public AvailableSubs update(AvailableSubs updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the availablesubss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the availablesubs.
	 */

	public long countAll();


    public Page<AvailableSubs> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

