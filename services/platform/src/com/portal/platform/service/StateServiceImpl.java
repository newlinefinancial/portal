/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class State.
 * @see com.portal.platform.State
 */
@Service("platform.StateService")
public class StateServiceImpl implements StateService {


    private static final Logger LOGGER = LoggerFactory.getLogger(StateServiceImpl.class);

    @Autowired
    @Qualifier("platform.StateDao")
    private WMGenericDao<State, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<State, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<State> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public State create(State state) {
        LOGGER.debug("Creating a new state with information: {}" , state);
        return this.wmGenericDao.create(state);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public State delete(Integer stateId) throws EntityNotFoundException {
        LOGGER.debug("Deleting state with id: {}" , stateId);
        State deleted = this.wmGenericDao.findById(stateId);
        if (deleted == null) {
            LOGGER.debug("No state found with id: {}" , stateId);
            throw new EntityNotFoundException(String.valueOf(stateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<State> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all states");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<State> findAll(Pageable pageable) {
        LOGGER.debug("Finding all states");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public State findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding state by id: {}" , id);
        State state=this.wmGenericDao.findById(id);
        if(state==null){
            LOGGER.debug("No state found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return state;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public State update(State updated) throws EntityNotFoundException {
        LOGGER.debug("Updating state with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


