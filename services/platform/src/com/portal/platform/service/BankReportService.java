/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class BankReport.
 * @see com.portal.platform.BankReport
 */

public interface BankReportService {
   /**
	 * Creates a new bankreport.
	 * 
	 * @param created
	 *            The information of the created bankreport.
	 * @return The created bankreport.
	 */
	public BankReport create(BankReport created);

	/**
	 * Deletes a bankreport.
	 * 
	 * @param bankreportId
	 *            The id of the deleted bankreport.
	 * @return The deleted bankreport.
	 * @throws EntityNotFoundException
	 *             if no bankreport is found with the given id.
	 */
	public BankReport delete(Integer bankreportId) throws EntityNotFoundException;

	/**
	 * Finds all bankreports.
	 * 
	 * @return A list of bankreports.
	 */
	public Page<BankReport> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<BankReport> findAll(Pageable pageable);
	
	/**
	 * Finds bankreport by id.
	 * 
	 * @param id
	 *            The id of the wanted bankreport.
	 * @return The found bankreport. If no bankreport is found, this method returns
	 *         null.
	 */
	public BankReport findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a bankreport.
	 * 
	 * @param updated
	 *            The information of the updated bankreport.
	 * @return The updated bankreport.
	 * @throws EntityNotFoundException
	 *             if no bankreport is found with given id.
	 */
	public BankReport update(BankReport updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the bankreports in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the bankreport.
	 */

	public long countAll();


    public Page<BankReport> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

