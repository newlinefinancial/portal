/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Buyer.
 * @see com.portal.platform.Buyer
 */

public interface BuyerService {
   /**
	 * Creates a new buyer.
	 * 
	 * @param created
	 *            The information of the created buyer.
	 * @return The created buyer.
	 */
	public Buyer create(Buyer created);

	/**
	 * Deletes a buyer.
	 * 
	 * @param buyerId
	 *            The id of the deleted buyer.
	 * @return The deleted buyer.
	 * @throws EntityNotFoundException
	 *             if no buyer is found with the given id.
	 */
	public Buyer delete(Integer buyerId) throws EntityNotFoundException;

	/**
	 * Finds all buyers.
	 * 
	 * @return A list of buyers.
	 */
	public Page<Buyer> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Buyer> findAll(Pageable pageable);
	
	/**
	 * Finds buyer by id.
	 * 
	 * @param id
	 *            The id of the wanted buyer.
	 * @return The found buyer. If no buyer is found, this method returns
	 *         null.
	 */
	public Buyer findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a buyer.
	 * 
	 * @param updated
	 *            The information of the updated buyer.
	 * @return The updated buyer.
	 * @throws EntityNotFoundException
	 *             if no buyer is found with given id.
	 */
	public Buyer update(Buyer updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the buyers in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the buyer.
	 */

	public long countAll();


    public Page<Buyer> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

