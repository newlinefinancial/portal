/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class AuctionStat.
 * @see com.portal.platform.AuctionStat
 */

public interface AuctionStatService {
   /**
	 * Creates a new auctionstat.
	 * 
	 * @param created
	 *            The information of the created auctionstat.
	 * @return The created auctionstat.
	 */
	public AuctionStat create(AuctionStat created);

	/**
	 * Deletes a auctionstat.
	 * 
	 * @param auctionstatId
	 *            The id of the deleted auctionstat.
	 * @return The deleted auctionstat.
	 * @throws EntityNotFoundException
	 *             if no auctionstat is found with the given id.
	 */
	public AuctionStat delete(AuctionStatId auctionstatId) throws EntityNotFoundException;

	/**
	 * Finds all auctionstats.
	 * 
	 * @return A list of auctionstats.
	 */
	public Page<AuctionStat> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AuctionStat> findAll(Pageable pageable);
	
	/**
	 * Finds auctionstat by id.
	 * 
	 * @param id
	 *            The id of the wanted auctionstat.
	 * @return The found auctionstat. If no auctionstat is found, this method returns
	 *         null.
	 */
	public AuctionStat findById(AuctionStatId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a auctionstat.
	 * 
	 * @param updated
	 *            The information of the updated auctionstat.
	 * @return The updated auctionstat.
	 * @throws EntityNotFoundException
	 *             if no auctionstat is found with given id.
	 */
	public AuctionStat update(AuctionStat updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the auctionstats in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the auctionstat.
	 */

	public long countAll();


    public Page<AuctionStat> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

