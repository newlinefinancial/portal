/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Note.
 * @see com.portal.platform.Note
 */
@Service("platform.NoteService")
public class NoteServiceImpl implements NoteService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NoteServiceImpl.class);

    @Autowired
    @Qualifier("platform.NoteDao")
    private WMGenericDao<Note, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Note, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Note> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Note create(Note note) {
        LOGGER.debug("Creating a new note with information: {}" , note);
        return this.wmGenericDao.create(note);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Note delete(Integer noteId) throws EntityNotFoundException {
        LOGGER.debug("Deleting note with id: {}" , noteId);
        Note deleted = this.wmGenericDao.findById(noteId);
        if (deleted == null) {
            LOGGER.debug("No note found with id: {}" , noteId);
            throw new EntityNotFoundException(String.valueOf(noteId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Note> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all notes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Note> findAll(Pageable pageable) {
        LOGGER.debug("Finding all notes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Note findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding note by id: {}" , id);
        Note note=this.wmGenericDao.findById(id);
        if(note==null){
            LOGGER.debug("No note found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return note;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Note update(Note updated) throws EntityNotFoundException {
        LOGGER.debug("Updating note with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


