/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Balance.
 * @see com.portal.platform.Balance
 */
@Service("platform.BalanceService")
public class BalanceServiceImpl implements BalanceService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BalanceServiceImpl.class);

    @Autowired
    @Qualifier("platform.BalanceDao")
    private WMGenericDao<Balance, BalanceId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Balance, BalanceId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Balance> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Balance create(Balance balance) {
        LOGGER.debug("Creating a new balance with information: {}" , balance);
        return this.wmGenericDao.create(balance);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Balance delete(BalanceId balanceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting balance with id: {}" , balanceId);
        Balance deleted = this.wmGenericDao.findById(balanceId);
        if (deleted == null) {
            LOGGER.debug("No balance found with id: {}" , balanceId);
            throw new EntityNotFoundException(String.valueOf(balanceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Balance> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all balances");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Balance> findAll(Pageable pageable) {
        LOGGER.debug("Finding all balances");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Balance findById(BalanceId id) throws EntityNotFoundException {
        LOGGER.debug("Finding balance by id: {}" , id);
        Balance balance=this.wmGenericDao.findById(id);
        if(balance==null){
            LOGGER.debug("No balance found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return balance;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Balance update(Balance updated) throws EntityNotFoundException {
        LOGGER.debug("Updating balance with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BalanceId id = new BalanceId();
        id.setCertificateId(updated.getCertificateId());
        id.setPrior(updated.getPrior());
        id.setCertificatePrincipal(updated.getCertificatePrincipal());
        id.setSubPrincipal(updated.getSubPrincipal());
        id.setFeePrincipal(updated.getFeePrincipal());
        id.setPrincipal(updated.getPrincipal());
        id.setCertificateRevenue(updated.getCertificateRevenue());
        id.setSubRevenue(updated.getSubRevenue());
        id.setFeeRevenue(updated.getFeeRevenue());
        id.setRevenue(updated.getRevenue());
        id.setRedemptionAmount(updated.getRedemptionAmount());
        id.setAmountPaid(updated.getAmountPaid());
        id.setBalanceDue(updated.getBalanceDue());
        id.setPaymentInTransit(updated.getPaymentInTransit());
        id.setDueAfterSettlement(updated.getDueAfterSettlement());
        id.setFacilityPayoff(updated.getFacilityPayoff());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


