/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Grade.
 * @see com.portal.platform.Grade
 */
@Service("platform.GradeService")
public class GradeServiceImpl implements GradeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(GradeServiceImpl.class);

    @Autowired
    @Qualifier("platform.GradeDao")
    private WMGenericDao<Grade, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Grade, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Grade> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Grade create(Grade grade) {
        LOGGER.debug("Creating a new grade with information: {}" , grade);
        return this.wmGenericDao.create(grade);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Grade delete(Integer gradeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting grade with id: {}" , gradeId);
        Grade deleted = this.wmGenericDao.findById(gradeId);
        if (deleted == null) {
            LOGGER.debug("No grade found with id: {}" , gradeId);
            throw new EntityNotFoundException(String.valueOf(gradeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Grade> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all grades");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Grade> findAll(Pageable pageable) {
        LOGGER.debug("Finding all grades");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Grade findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding grade by id: {}" , id);
        Grade grade=this.wmGenericDao.findById(id);
        if(grade==null){
            LOGGER.debug("No grade found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return grade;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Grade update(Grade updated) throws EntityNotFoundException {
        LOGGER.debug("Updating grade with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


