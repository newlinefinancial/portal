/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PropertyExterior.
 * @see com.portal.platform.PropertyExterior
 */

public interface PropertyExteriorService {
   /**
	 * Creates a new propertyexterior.
	 * 
	 * @param created
	 *            The information of the created propertyexterior.
	 * @return The created propertyexterior.
	 */
	public PropertyExterior create(PropertyExterior created);

	/**
	 * Deletes a propertyexterior.
	 * 
	 * @param propertyexteriorId
	 *            The id of the deleted propertyexterior.
	 * @return The deleted propertyexterior.
	 * @throws EntityNotFoundException
	 *             if no propertyexterior is found with the given id.
	 */
	public PropertyExterior delete(Integer propertyexteriorId) throws EntityNotFoundException;

	/**
	 * Finds all propertyexteriors.
	 * 
	 * @return A list of propertyexteriors.
	 */
	public Page<PropertyExterior> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PropertyExterior> findAll(Pageable pageable);
	
	/**
	 * Finds propertyexterior by id.
	 * 
	 * @param id
	 *            The id of the wanted propertyexterior.
	 * @return The found propertyexterior. If no propertyexterior is found, this method returns
	 *         null.
	 */
	public PropertyExterior findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a propertyexterior.
	 * 
	 * @param updated
	 *            The information of the updated propertyexterior.
	 * @return The updated propertyexterior.
	 * @throws EntityNotFoundException
	 *             if no propertyexterior is found with given id.
	 */
	public PropertyExterior update(PropertyExterior updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the propertyexteriors in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the propertyexterior.
	 */

	public long countAll();


    public Page<PropertyExterior> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

