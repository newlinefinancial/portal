/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Payment.
 * @see com.portal.platform.Payment
 */
@Service("platform.PaymentService")
public class PaymentServiceImpl implements PaymentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentServiceImpl.class);

    @Autowired
    @Qualifier("platform.PaymentDao")
    private WMGenericDao<Payment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Payment, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Payment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Payment create(Payment payment) {
        LOGGER.debug("Creating a new payment with information: {}" , payment);
        return this.wmGenericDao.create(payment);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Payment delete(Integer paymentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting payment with id: {}" , paymentId);
        Payment deleted = this.wmGenericDao.findById(paymentId);
        if (deleted == null) {
            LOGGER.debug("No payment found with id: {}" , paymentId);
            throw new EntityNotFoundException(String.valueOf(paymentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Payment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all payments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Payment> findAll(Pageable pageable) {
        LOGGER.debug("Finding all payments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Payment findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding payment by id: {}" , id);
        Payment payment=this.wmGenericDao.findById(id);
        if(payment==null){
            LOGGER.debug("No payment found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return payment;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Payment update(Payment updated) throws EntityNotFoundException {
        LOGGER.debug("Updating payment with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


