/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class TaxSchedule.
 * @see com.portal.platform.TaxSchedule
 */
@Service("platform.TaxScheduleService")
public class TaxScheduleServiceImpl implements TaxScheduleService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TaxScheduleServiceImpl.class);

    @Autowired
    @Qualifier("platform.TaxScheduleDao")
    private WMGenericDao<TaxSchedule, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TaxSchedule, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<TaxSchedule> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public TaxSchedule create(TaxSchedule taxschedule) {
        LOGGER.debug("Creating a new taxschedule with information: {}" , taxschedule);
        return this.wmGenericDao.create(taxschedule);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public TaxSchedule delete(Integer taxscheduleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting taxschedule with id: {}" , taxscheduleId);
        TaxSchedule deleted = this.wmGenericDao.findById(taxscheduleId);
        if (deleted == null) {
            LOGGER.debug("No taxschedule found with id: {}" , taxscheduleId);
            throw new EntityNotFoundException(String.valueOf(taxscheduleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<TaxSchedule> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all taxschedules");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<TaxSchedule> findAll(Pageable pageable) {
        LOGGER.debug("Finding all taxschedules");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public TaxSchedule findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding taxschedule by id: {}" , id);
        TaxSchedule taxschedule=this.wmGenericDao.findById(id);
        if(taxschedule==null){
            LOGGER.debug("No taxschedule found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return taxschedule;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public TaxSchedule update(TaxSchedule updated) throws EntityNotFoundException {
        LOGGER.debug("Updating taxschedule with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


