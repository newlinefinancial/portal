/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Disbursement.
 * @see com.portal.platform.Disbursement
 */
@Service("platform.DisbursementService")
public class DisbursementServiceImpl implements DisbursementService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DisbursementServiceImpl.class);

    @Autowired
    @Qualifier("platform.DisbursementDao")
    private WMGenericDao<Disbursement, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Disbursement, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Disbursement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Disbursement create(Disbursement disbursement) {
        LOGGER.debug("Creating a new disbursement with information: {}" , disbursement);
        return this.wmGenericDao.create(disbursement);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Disbursement delete(Integer disbursementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting disbursement with id: {}" , disbursementId);
        Disbursement deleted = this.wmGenericDao.findById(disbursementId);
        if (deleted == null) {
            LOGGER.debug("No disbursement found with id: {}" , disbursementId);
            throw new EntityNotFoundException(String.valueOf(disbursementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Disbursement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all disbursements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Disbursement> findAll(Pageable pageable) {
        LOGGER.debug("Finding all disbursements");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Disbursement findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding disbursement by id: {}" , id);
        Disbursement disbursement=this.wmGenericDao.findById(id);
        if(disbursement==null){
            LOGGER.debug("No disbursement found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return disbursement;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Disbursement update(Disbursement updated) throws EntityNotFoundException {
        LOGGER.debug("Updating disbursement with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


