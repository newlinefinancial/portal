/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class ModelData.
 * @see com.portal.platform.ModelData
 */
@Service("platform.ModelDataService")
public class ModelDataServiceImpl implements ModelDataService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ModelDataServiceImpl.class);

    @Autowired
    @Qualifier("platform.ModelDataDao")
    private WMGenericDao<ModelData, ModelDataId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ModelData, ModelDataId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<ModelData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public ModelData create(ModelData modeldata) {
        LOGGER.debug("Creating a new modeldata with information: {}" , modeldata);
        return this.wmGenericDao.create(modeldata);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public ModelData delete(ModelDataId modeldataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting modeldata with id: {}" , modeldataId);
        ModelData deleted = this.wmGenericDao.findById(modeldataId);
        if (deleted == null) {
            LOGGER.debug("No modeldata found with id: {}" , modeldataId);
            throw new EntityNotFoundException(String.valueOf(modeldataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<ModelData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all modeldatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<ModelData> findAll(Pageable pageable) {
        LOGGER.debug("Finding all modeldatas");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public ModelData findById(ModelDataId id) throws EntityNotFoundException {
        LOGGER.debug("Finding modeldata by id: {}" , id);
        ModelData modeldata=this.wmGenericDao.findById(id);
        if(modeldata==null){
            LOGGER.debug("No modeldata found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return modeldata;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public ModelData update(ModelData updated) throws EntityNotFoundException {
        LOGGER.debug("Updating modeldata with information: {}" , updated);
        this.wmGenericDao.update(updated);

        ModelDataId id = new ModelDataId();
        id.setAuctionId(updated.getAuctionId());
        id.setTaxYear(updated.getTaxYear());
        id.setMonthsDelinquent(updated.getMonthsDelinquent());
        id.setPriorYearsDue(updated.getPriorYearsDue());
        id.setOtherDue(updated.getOtherDue());
        id.setAuctionYearDue(updated.getAuctionYearDue());
        id.setTotalAmtDue(updated.getTotalAmtDue());
        id.setAnnualTaxAmt(updated.getAnnualTaxAmt());
        id.setIniSubStatus(updated.getIniSubStatus());
        id.setIniSubPct(updated.getIniSubPct());
        id.setLtv(updated.getLtv());
        id.setLastRedemptionDate(updated.getLastRedemptionDate());
        id.setStatus(updated.getStatus());
        id.setDispositionDate(updated.getDispositionDate());
        id.setDispositionResearchDate(updated.getDispositionResearchDate());
        id.setLabel(updated.getLabel());
        id.setPropertyId(updated.getPropertyId());
        id.setPropertyPin(updated.getPropertyPin());
        id.setCountyName(updated.getCountyName());
        id.setTownshipName(updated.getTownshipName());
        id.setDead(updated.getDead());
        id.setAddressLine1(updated.getAddressLine1());
        id.setAddressLine2(updated.getAddressLine2());
        id.setAddressCity(updated.getAddressCity());
        id.setState(updated.getState());
        id.setAddressZip(updated.getAddressZip());
        id.setLatitude(updated.getLatitude());
        id.setLongitude(updated.getLongitude());
        id.setPropertyType(updated.getPropertyType());
        id.setPropertyExteriorId(updated.getPropertyExteriorId());
        id.setPropertyExterior(updated.getPropertyExterior());
        id.setYearBuilt(updated.getYearBuilt());
        id.setYearImproved(updated.getYearImproved());
        id.setLotSize(updated.getLotSize());
        id.setSqftLiving(updated.getSqftLiving());
        id.setSqftTotal(updated.getSqftTotal());
        id.setLookup(updated.getLookup());
        id.setGrade(updated.getGrade());
        id.setBuildingCount(updated.getBuildingCount());
        id.setAreaCountPublished(updated.getAreaCountPublished());
        id.setAreaCountForfeited(updated.getAreaCountForfeited());
        id.setAreaCountAuctioned(updated.getAreaCountAuctioned());
        id.setAreaCountRedeemed(updated.getAreaCountRedeemed());
        id.setAssTaxYear(updated.getAssTaxYear());
        id.setMarketValue(updated.getMarketValue());
        id.setHomeExemption(updated.getHomeExemption());
        id.setSeniorExemption(updated.getSeniorExemption());
        id.setDoubleExemption(updated.getDoubleExemption());
        id.setEqualizedValuation(updated.getEqualizedValuation());
        id.setSeniorFreeze(updated.getSeniorFreeze());
        id.setAssesseeName(updated.getAssesseeName());
        id.setAssesseeAddressLine1(updated.getAssesseeAddressLine1());
        id.setAssesseeAddressCity(updated.getAssesseeAddressCity());
        id.setAssesseeAddressState(updated.getAssesseeAddressState());
        id.setAssesseeAddressZip(updated.getAssesseeAddressZip());
        id.setPropertyClassId(updated.getPropertyClassId());
        id.setZoningImprovement(updated.getZoningImprovement());
        id.setDescription(updated.getDescription());
        id.setFilter(updated.getFilter());
        id.setCountPublished(updated.getCountPublished());
        id.setCountAuctioned(updated.getCountAuctioned());
        id.setCountForfeited(updated.getCountForfeited());
        id.setCountOpensales(updated.getCountOpensales());
        id.setCountOpenpriors(updated.getCountOpenpriors());
        id.setDemoFlg(updated.getDemoFlg());
        id.setGov(updated.getGov());
        id.setGovLien(updated.getGovLien());
        id.setNumMortgages(updated.getNumMortgages());
        id.setValMortgages(updated.getValMortgages());
        id.setMaxValMortgages(updated.getMaxValMortgages());
        id.setMinValMortgages(updated.getMinValMortgages());
        id.setNewestMortgage(updated.getNewestMortgage());
        id.setOldestMortgage(updated.getOldestMortgage());
        id.setNumDeed(updated.getNumDeed());
        id.setValDeed(updated.getValDeed());
        id.setMaxValDeed(updated.getMaxValDeed());
        id.setMinValDeed(updated.getMinValDeed());
        id.setNewestDeed(updated.getNewestDeed());
        id.setOldestDeed(updated.getOldestDeed());
        id.setNumLien(updated.getNumLien());
        id.setValLien(updated.getValLien());
        id.setMaxValLien(updated.getMaxValLien());
        id.setMinValLien(updated.getMinValLien());
        id.setNewestLien(updated.getNewestLien());
        id.setOldestLien(updated.getOldestLien());
        id.setNumLis(updated.getNumLis());
        id.setValLis(updated.getValLis());
        id.setMaxValLis(updated.getMaxValLis());
        id.setMinValLis(updated.getMinValLis());
        id.setNewestLis(updated.getNewestLis());
        id.setOldestLis(updated.getOldestLis());
        id.setNumAssignment(updated.getNumAssignment());
        id.setValAssignment(updated.getValAssignment());
        id.setMaxValAssignment(updated.getMaxValAssignment());
        id.setMinValAssignment(updated.getMinValAssignment());
        id.setNewestAssignment(updated.getNewestAssignment());
        id.setOldestAssignment(updated.getOldestAssignment());
        id.setNumQuit(updated.getNumQuit());
        id.setValQuit(updated.getValQuit());
        id.setMaxValQuit(updated.getMaxValQuit());
        id.setMinValQuit(updated.getMinValQuit());
        id.setNewestQuit(updated.getNewestQuit());
        id.setOldestQuit(updated.getOldestQuit());
        id.setNumForeclosure(updated.getNumForeclosure());
        id.setValForeclosure(updated.getValForeclosure());
        id.setMaxValForeclosure(updated.getMaxValForeclosure());
        id.setMinValForeclosure(updated.getMinValForeclosure());
        id.setNewestForeclosure(updated.getNewestForeclosure());
        id.setOldestForeclosure(updated.getOldestForeclosure());
        id.setNumRents(updated.getNumRents());
        id.setValRents(updated.getValRents());
        id.setMaxValRents(updated.getMaxValRents());
        id.setMinValRents(updated.getMinValRents());
        id.setNewestRents(updated.getNewestRents());
        id.setOldestRents(updated.getOldestRents());
        id.setNumBuilding(updated.getNumBuilding());
        id.setValBuilding(updated.getValBuilding());
        id.setMaxValBuilding(updated.getMaxValBuilding());
        id.setMinValBuilding(updated.getMinValBuilding());
        id.setNewestBuilding(updated.getNewestBuilding());
        id.setOldestBuilding(updated.getOldestBuilding());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


