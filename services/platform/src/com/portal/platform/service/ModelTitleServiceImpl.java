/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class ModelTitle.
 * @see com.portal.platform.ModelTitle
 */
@Service("platform.ModelTitleService")
public class ModelTitleServiceImpl implements ModelTitleService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ModelTitleServiceImpl.class);

    @Autowired
    @Qualifier("platform.ModelTitleDao")
    private WMGenericDao<ModelTitle, ModelTitleId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ModelTitle, ModelTitleId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<ModelTitle> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public ModelTitle create(ModelTitle modeltitle) {
        LOGGER.debug("Creating a new modeltitle with information: {}" , modeltitle);
        return this.wmGenericDao.create(modeltitle);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public ModelTitle delete(ModelTitleId modeltitleId) throws EntityNotFoundException {
        LOGGER.debug("Deleting modeltitle with id: {}" , modeltitleId);
        ModelTitle deleted = this.wmGenericDao.findById(modeltitleId);
        if (deleted == null) {
            LOGGER.debug("No modeltitle found with id: {}" , modeltitleId);
            throw new EntityNotFoundException(String.valueOf(modeltitleId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<ModelTitle> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all modeltitles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<ModelTitle> findAll(Pageable pageable) {
        LOGGER.debug("Finding all modeltitles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public ModelTitle findById(ModelTitleId id) throws EntityNotFoundException {
        LOGGER.debug("Finding modeltitle by id: {}" , id);
        ModelTitle modeltitle=this.wmGenericDao.findById(id);
        if(modeltitle==null){
            LOGGER.debug("No modeltitle found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return modeltitle;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public ModelTitle update(ModelTitle updated) throws EntityNotFoundException {
        LOGGER.debug("Updating modeltitle with information: {}" , updated);
        this.wmGenericDao.update(updated);

        ModelTitleId id = new ModelTitleId();
        id.setAuctionId(updated.getAuctionId());
        id.setPropertyId(updated.getPropertyId());
        id.setDemoFlg(updated.getDemoFlg());
        id.setGov(updated.getGov());
        id.setGovLien(updated.getGovLien());
        id.setNumMortgages(updated.getNumMortgages());
        id.setValMortgages(updated.getValMortgages());
        id.setMaxValMortgages(updated.getMaxValMortgages());
        id.setMinValMortgages(updated.getMinValMortgages());
        id.setNewestMortgage(updated.getNewestMortgage());
        id.setOldestMortgage(updated.getOldestMortgage());
        id.setNumDeed(updated.getNumDeed());
        id.setValDeed(updated.getValDeed());
        id.setMaxValDeed(updated.getMaxValDeed());
        id.setMinValDeed(updated.getMinValDeed());
        id.setNewestDeed(updated.getNewestDeed());
        id.setOldestDeed(updated.getOldestDeed());
        id.setNumLien(updated.getNumLien());
        id.setValLien(updated.getValLien());
        id.setMaxValLien(updated.getMaxValLien());
        id.setMinValLien(updated.getMinValLien());
        id.setNewestLien(updated.getNewestLien());
        id.setOldestLien(updated.getOldestLien());
        id.setNumLis(updated.getNumLis());
        id.setValLis(updated.getValLis());
        id.setMaxValLis(updated.getMaxValLis());
        id.setMinValLis(updated.getMinValLis());
        id.setNewestLis(updated.getNewestLis());
        id.setOldestLis(updated.getOldestLis());
        id.setNumAssignment(updated.getNumAssignment());
        id.setValAssignment(updated.getValAssignment());
        id.setMaxValAssignment(updated.getMaxValAssignment());
        id.setMinValAssignment(updated.getMinValAssignment());
        id.setNewestAssignment(updated.getNewestAssignment());
        id.setOldestAssignment(updated.getOldestAssignment());
        id.setNumQuit(updated.getNumQuit());
        id.setValQuit(updated.getValQuit());
        id.setMaxValQuit(updated.getMaxValQuit());
        id.setMinValQuit(updated.getMinValQuit());
        id.setNewestQuit(updated.getNewestQuit());
        id.setOldestQuit(updated.getOldestQuit());
        id.setNumForeclosure(updated.getNumForeclosure());
        id.setValForeclosure(updated.getValForeclosure());
        id.setMaxValForeclosure(updated.getMaxValForeclosure());
        id.setMinValForeclosure(updated.getMinValForeclosure());
        id.setNewestForeclosure(updated.getNewestForeclosure());
        id.setOldestForeclosure(updated.getOldestForeclosure());
        id.setNumRents(updated.getNumRents());
        id.setValRents(updated.getValRents());
        id.setMaxValRents(updated.getMaxValRents());
        id.setMinValRents(updated.getMinValRents());
        id.setNewestRents(updated.getNewestRents());
        id.setOldestRents(updated.getOldestRents());
        id.setNumBuilding(updated.getNumBuilding());
        id.setValBuilding(updated.getValBuilding());
        id.setMaxValBuilding(updated.getMaxValBuilding());
        id.setMinValBuilding(updated.getMinValBuilding());
        id.setNewestBuilding(updated.getNewestBuilding());
        id.setOldestBuilding(updated.getOldestBuilding());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


