/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalAuctionNote.
 * @see com.portal.platform.PortalAuctionNote
 */

public interface PortalAuctionNoteService {
   /**
	 * Creates a new portalauctionnote.
	 * 
	 * @param created
	 *            The information of the created portalauctionnote.
	 * @return The created portalauctionnote.
	 */
	public PortalAuctionNote create(PortalAuctionNote created);

	/**
	 * Deletes a portalauctionnote.
	 * 
	 * @param portalauctionnoteId
	 *            The id of the deleted portalauctionnote.
	 * @return The deleted portalauctionnote.
	 * @throws EntityNotFoundException
	 *             if no portalauctionnote is found with the given id.
	 */
	public PortalAuctionNote delete(PortalAuctionNoteId portalauctionnoteId) throws EntityNotFoundException;

	/**
	 * Finds all portalauctionnotes.
	 * 
	 * @return A list of portalauctionnotes.
	 */
	public Page<PortalAuctionNote> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalAuctionNote> findAll(Pageable pageable);
	
	/**
	 * Finds portalauctionnote by id.
	 * 
	 * @param id
	 *            The id of the wanted portalauctionnote.
	 * @return The found portalauctionnote. If no portalauctionnote is found, this method returns
	 *         null.
	 */
	public PortalAuctionNote findById(PortalAuctionNoteId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portalauctionnote.
	 * 
	 * @param updated
	 *            The information of the updated portalauctionnote.
	 * @return The updated portalauctionnote.
	 * @throws EntityNotFoundException
	 *             if no portalauctionnote is found with given id.
	 */
	public PortalAuctionNote update(PortalAuctionNote updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portalauctionnotes in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portalauctionnote.
	 */

	public long countAll();


    public Page<PortalAuctionNote> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

