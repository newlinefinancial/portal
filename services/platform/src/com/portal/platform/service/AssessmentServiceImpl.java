/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Assessment.
 * @see com.portal.platform.Assessment
 */
@Service("platform.AssessmentService")
public class AssessmentServiceImpl implements AssessmentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentServiceImpl.class);

    @Autowired
    @Qualifier("platform.AssessmentDao")
    private WMGenericDao<Assessment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Assessment, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Assessment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Assessment create(Assessment assessment) {
        LOGGER.debug("Creating a new assessment with information: {}" , assessment);
        return this.wmGenericDao.create(assessment);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Assessment delete(Integer assessmentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assessment with id: {}" , assessmentId);
        Assessment deleted = this.wmGenericDao.findById(assessmentId);
        if (deleted == null) {
            LOGGER.debug("No assessment found with id: {}" , assessmentId);
            throw new EntityNotFoundException(String.valueOf(assessmentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Assessment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assessments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Assessment> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assessments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Assessment findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assessment by id: {}" , id);
        Assessment assessment=this.wmGenericDao.findById(id);
        if(assessment==null){
            LOGGER.debug("No assessment found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assessment;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Assessment update(Assessment updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assessment with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


