/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalAuctionNote.
 * @see com.portal.platform.PortalAuctionNote
 */
@Service("platform.PortalAuctionNoteService")
public class PortalAuctionNoteServiceImpl implements PortalAuctionNoteService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionNoteServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalAuctionNoteDao")
    private WMGenericDao<PortalAuctionNote, PortalAuctionNoteId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalAuctionNote, PortalAuctionNoteId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalAuctionNote> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalAuctionNote create(PortalAuctionNote portalauctionnote) {
        LOGGER.debug("Creating a new portalauctionnote with information: {}" , portalauctionnote);
        return this.wmGenericDao.create(portalauctionnote);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionNote delete(PortalAuctionNoteId portalauctionnoteId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalauctionnote with id: {}" , portalauctionnoteId);
        PortalAuctionNote deleted = this.wmGenericDao.findById(portalauctionnoteId);
        if (deleted == null) {
            LOGGER.debug("No portalauctionnote found with id: {}" , portalauctionnoteId);
            throw new EntityNotFoundException(String.valueOf(portalauctionnoteId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionNote> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalauctionnotes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionNote> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalauctionnotes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalAuctionNote findById(PortalAuctionNoteId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalauctionnote by id: {}" , id);
        PortalAuctionNote portalauctionnote=this.wmGenericDao.findById(id);
        if(portalauctionnote==null){
            LOGGER.debug("No portalauctionnote found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalauctionnote;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionNote update(PortalAuctionNote updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalauctionnote with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalAuctionNoteId id = new PortalAuctionNoteId();
        id.setPropertyId(updated.getPropertyId());
        id.setNoteId(updated.getNoteId());
        id.setUser(updated.getUser());
        id.setCreated(updated.getCreated());
        id.setDone(updated.getDone());
        id.setNoteDescription(updated.getNoteDescription());
        id.setNoteTypeId(updated.getNoteTypeId());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


