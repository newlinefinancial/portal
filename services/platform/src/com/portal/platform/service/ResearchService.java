/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Research.
 * @see com.portal.platform.Research
 */

public interface ResearchService {
   /**
	 * Creates a new research.
	 * 
	 * @param created
	 *            The information of the created research.
	 * @return The created research.
	 */
	public Research create(Research created);

	/**
	 * Deletes a research.
	 * 
	 * @param researchId
	 *            The id of the deleted research.
	 * @return The deleted research.
	 * @throws EntityNotFoundException
	 *             if no research is found with the given id.
	 */
	public Research delete(Integer researchId) throws EntityNotFoundException;

	/**
	 * Finds all researchs.
	 * 
	 * @return A list of researchs.
	 */
	public Page<Research> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Research> findAll(Pageable pageable);
	
	/**
	 * Finds research by id.
	 * 
	 * @param id
	 *            The id of the wanted research.
	 * @return The found research. If no research is found, this method returns
	 *         null.
	 */
	public Research findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a research.
	 * 
	 * @param updated
	 *            The information of the updated research.
	 * @return The updated research.
	 * @throws EntityNotFoundException
	 *             if no research is found with given id.
	 */
	public Research update(Research updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the researchs in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the research.
	 */

	public long countAll();


    public Page<Research> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

