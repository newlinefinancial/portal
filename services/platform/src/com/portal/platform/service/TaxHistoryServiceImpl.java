/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class TaxHistory.
 * @see com.portal.platform.TaxHistory
 */
@Service("platform.TaxHistoryService")
public class TaxHistoryServiceImpl implements TaxHistoryService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TaxHistoryServiceImpl.class);

    @Autowired
    @Qualifier("platform.TaxHistoryDao")
    private WMGenericDao<TaxHistory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TaxHistory, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<TaxHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public TaxHistory create(TaxHistory taxhistory) {
        LOGGER.debug("Creating a new taxhistory with information: {}" , taxhistory);
        return this.wmGenericDao.create(taxhistory);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public TaxHistory delete(Integer taxhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting taxhistory with id: {}" , taxhistoryId);
        TaxHistory deleted = this.wmGenericDao.findById(taxhistoryId);
        if (deleted == null) {
            LOGGER.debug("No taxhistory found with id: {}" , taxhistoryId);
            throw new EntityNotFoundException(String.valueOf(taxhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<TaxHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all taxhistorys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<TaxHistory> findAll(Pageable pageable) {
        LOGGER.debug("Finding all taxhistorys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public TaxHistory findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding taxhistory by id: {}" , id);
        TaxHistory taxhistory=this.wmGenericDao.findById(id);
        if(taxhistory==null){
            LOGGER.debug("No taxhistory found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return taxhistory;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public TaxHistory update(TaxHistory updated) throws EntityNotFoundException {
        LOGGER.debug("Updating taxhistory with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


