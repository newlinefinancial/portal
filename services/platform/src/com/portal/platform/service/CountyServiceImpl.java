/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class County.
 * @see com.portal.platform.County
 */
@Service("platform.CountyService")
public class CountyServiceImpl implements CountyService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CountyServiceImpl.class);

    @Autowired
    @Qualifier("platform.CountyDao")
    private WMGenericDao<County, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<County, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<County> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public County create(County county) {
        LOGGER.debug("Creating a new county with information: {}" , county);
        return this.wmGenericDao.create(county);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public County delete(Integer countyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting county with id: {}" , countyId);
        County deleted = this.wmGenericDao.findById(countyId);
        if (deleted == null) {
            LOGGER.debug("No county found with id: {}" , countyId);
            throw new EntityNotFoundException(String.valueOf(countyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<County> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all countys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<County> findAll(Pageable pageable) {
        LOGGER.debug("Finding all countys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public County findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding county by id: {}" , id);
        County county=this.wmGenericDao.findById(id);
        if(county==null){
            LOGGER.debug("No county found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return county;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public County update(County updated) throws EntityNotFoundException {
        LOGGER.debug("Updating county with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


