/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Score.
 * @see com.portal.platform.Score
 */
@Service("platform.ScoreService")
public class ScoreServiceImpl implements ScoreService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ScoreServiceImpl.class);

    @Autowired
    @Qualifier("platform.ScoreDao")
    private WMGenericDao<Score, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Score, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Score> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Score create(Score score) {
        LOGGER.debug("Creating a new score with information: {}" , score);
        return this.wmGenericDao.create(score);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Score delete(Integer scoreId) throws EntityNotFoundException {
        LOGGER.debug("Deleting score with id: {}" , scoreId);
        Score deleted = this.wmGenericDao.findById(scoreId);
        if (deleted == null) {
            LOGGER.debug("No score found with id: {}" , scoreId);
            throw new EntityNotFoundException(String.valueOf(scoreId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Score> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all scores");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Score> findAll(Pageable pageable) {
        LOGGER.debug("Finding all scores");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Score findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding score by id: {}" , id);
        Score score=this.wmGenericDao.findById(id);
        if(score==null){
            LOGGER.debug("No score found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return score;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Score update(Score updated) throws EntityNotFoundException {
        LOGGER.debug("Updating score with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


