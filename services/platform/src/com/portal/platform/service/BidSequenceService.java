/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class BidSequence.
 * @see com.portal.platform.BidSequence
 */

public interface BidSequenceService {
   /**
	 * Creates a new bidsequence.
	 * 
	 * @param created
	 *            The information of the created bidsequence.
	 * @return The created bidsequence.
	 */
	public BidSequence create(BidSequence created);

	/**
	 * Deletes a bidsequence.
	 * 
	 * @param bidsequenceId
	 *            The id of the deleted bidsequence.
	 * @return The deleted bidsequence.
	 * @throws EntityNotFoundException
	 *             if no bidsequence is found with the given id.
	 */
	public BidSequence delete(BidSequenceId bidsequenceId) throws EntityNotFoundException;

	/**
	 * Finds all bidsequences.
	 * 
	 * @return A list of bidsequences.
	 */
	public Page<BidSequence> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<BidSequence> findAll(Pageable pageable);
	
	/**
	 * Finds bidsequence by id.
	 * 
	 * @param id
	 *            The id of the wanted bidsequence.
	 * @return The found bidsequence. If no bidsequence is found, this method returns
	 *         null.
	 */
	public BidSequence findById(BidSequenceId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a bidsequence.
	 * 
	 * @param updated
	 *            The information of the updated bidsequence.
	 * @return The updated bidsequence.
	 * @throws EntityNotFoundException
	 *             if no bidsequence is found with given id.
	 */
	public BidSequence update(BidSequence updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the bidsequences in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the bidsequence.
	 */

	public long countAll();


    public Page<BidSequence> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

