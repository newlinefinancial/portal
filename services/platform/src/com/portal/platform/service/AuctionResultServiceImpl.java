/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class AuctionResult.
 * @see com.portal.platform.AuctionResult
 */
@Service("platform.AuctionResultService")
public class AuctionResultServiceImpl implements AuctionResultService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AuctionResultServiceImpl.class);

    @Autowired
    @Qualifier("platform.AuctionResultDao")
    private WMGenericDao<AuctionResult, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AuctionResult, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<AuctionResult> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public AuctionResult create(AuctionResult auctionresult) {
        LOGGER.debug("Creating a new auctionresult with information: {}" , auctionresult);
        return this.wmGenericDao.create(auctionresult);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public AuctionResult delete(Integer auctionresultId) throws EntityNotFoundException {
        LOGGER.debug("Deleting auctionresult with id: {}" , auctionresultId);
        AuctionResult deleted = this.wmGenericDao.findById(auctionresultId);
        if (deleted == null) {
            LOGGER.debug("No auctionresult found with id: {}" , auctionresultId);
            throw new EntityNotFoundException(String.valueOf(auctionresultId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<AuctionResult> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all auctionresults");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<AuctionResult> findAll(Pageable pageable) {
        LOGGER.debug("Finding all auctionresults");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public AuctionResult findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding auctionresult by id: {}" , id);
        AuctionResult auctionresult=this.wmGenericDao.findById(id);
        if(auctionresult==null){
            LOGGER.debug("No auctionresult found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return auctionresult;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public AuctionResult update(AuctionResult updated) throws EntityNotFoundException {
        LOGGER.debug("Updating auctionresult with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


