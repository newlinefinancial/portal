/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class GradeStat.
 * @see com.portal.platform.GradeStat
 */
@Service("platform.GradeStatService")
public class GradeStatServiceImpl implements GradeStatService {


    private static final Logger LOGGER = LoggerFactory.getLogger(GradeStatServiceImpl.class);

    @Autowired
    @Qualifier("platform.GradeStatDao")
    private WMGenericDao<GradeStat, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<GradeStat, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<GradeStat> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public GradeStat create(GradeStat gradestat) {
        LOGGER.debug("Creating a new gradestat with information: {}" , gradestat);
        return this.wmGenericDao.create(gradestat);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public GradeStat delete(Integer gradestatId) throws EntityNotFoundException {
        LOGGER.debug("Deleting gradestat with id: {}" , gradestatId);
        GradeStat deleted = this.wmGenericDao.findById(gradestatId);
        if (deleted == null) {
            LOGGER.debug("No gradestat found with id: {}" , gradestatId);
            throw new EntityNotFoundException(String.valueOf(gradestatId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<GradeStat> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all gradestats");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<GradeStat> findAll(Pageable pageable) {
        LOGGER.debug("Finding all gradestats");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public GradeStat findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding gradestat by id: {}" , id);
        GradeStat gradestat=this.wmGenericDao.findById(id);
        if(gradestat==null){
            LOGGER.debug("No gradestat found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return gradestat;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public GradeStat update(GradeStat updated) throws EntityNotFoundException {
        LOGGER.debug("Updating gradestat with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getGradeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


