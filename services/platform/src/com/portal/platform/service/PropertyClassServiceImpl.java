/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PropertyClass.
 * @see com.portal.platform.PropertyClass
 */
@Service("platform.PropertyClassService")
public class PropertyClassServiceImpl implements PropertyClassService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyClassServiceImpl.class);

    @Autowired
    @Qualifier("platform.PropertyClassDao")
    private WMGenericDao<PropertyClass, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PropertyClass, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PropertyClass> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PropertyClass create(PropertyClass propertyclass) {
        LOGGER.debug("Creating a new propertyclass with information: {}" , propertyclass);
        return this.wmGenericDao.create(propertyclass);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PropertyClass delete(Integer propertyclassId) throws EntityNotFoundException {
        LOGGER.debug("Deleting propertyclass with id: {}" , propertyclassId);
        PropertyClass deleted = this.wmGenericDao.findById(propertyclassId);
        if (deleted == null) {
            LOGGER.debug("No propertyclass found with id: {}" , propertyclassId);
            throw new EntityNotFoundException(String.valueOf(propertyclassId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PropertyClass> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all propertyclasss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PropertyClass> findAll(Pageable pageable) {
        LOGGER.debug("Finding all propertyclasss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PropertyClass findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding propertyclass by id: {}" , id);
        PropertyClass propertyclass=this.wmGenericDao.findById(id);
        if(propertyclass==null){
            LOGGER.debug("No propertyclass found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return propertyclass;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PropertyClass update(PropertyClass updated) throws EntityNotFoundException {
        LOGGER.debug("Updating propertyclass with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


