/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class ModelTitle.
 * @see com.portal.platform.ModelTitle
 */

public interface ModelTitleService {
   /**
	 * Creates a new modeltitle.
	 * 
	 * @param created
	 *            The information of the created modeltitle.
	 * @return The created modeltitle.
	 */
	public ModelTitle create(ModelTitle created);

	/**
	 * Deletes a modeltitle.
	 * 
	 * @param modeltitleId
	 *            The id of the deleted modeltitle.
	 * @return The deleted modeltitle.
	 * @throws EntityNotFoundException
	 *             if no modeltitle is found with the given id.
	 */
	public ModelTitle delete(ModelTitleId modeltitleId) throws EntityNotFoundException;

	/**
	 * Finds all modeltitles.
	 * 
	 * @return A list of modeltitles.
	 */
	public Page<ModelTitle> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ModelTitle> findAll(Pageable pageable);
	
	/**
	 * Finds modeltitle by id.
	 * 
	 * @param id
	 *            The id of the wanted modeltitle.
	 * @return The found modeltitle. If no modeltitle is found, this method returns
	 *         null.
	 */
	public ModelTitle findById(ModelTitleId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a modeltitle.
	 * 
	 * @param updated
	 *            The information of the updated modeltitle.
	 * @return The updated modeltitle.
	 * @throws EntityNotFoundException
	 *             if no modeltitle is found with given id.
	 */
	public ModelTitle update(ModelTitle updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the modeltitles in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the modeltitle.
	 */

	public long countAll();


    public Page<ModelTitle> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

