/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Property.
 * @see com.portal.platform.Property
 */
@Service("platform.PropertyService")
public class PropertyServiceImpl implements PropertyService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyServiceImpl.class);

    @Autowired
    @Qualifier("platform.PropertyDao")
    private WMGenericDao<Property, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Property, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Property> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Property create(Property property) {
        LOGGER.debug("Creating a new property with information: {}" , property);
        return this.wmGenericDao.create(property);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Property delete(Integer propertyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting property with id: {}" , propertyId);
        Property deleted = this.wmGenericDao.findById(propertyId);
        if (deleted == null) {
            LOGGER.debug("No property found with id: {}" , propertyId);
            throw new EntityNotFoundException(String.valueOf(propertyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Property> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all propertys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Property> findAll(Pageable pageable) {
        LOGGER.debug("Finding all propertys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Property findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding property by id: {}" , id);
        Property property=this.wmGenericDao.findById(id);
        if(property==null){
            LOGGER.debug("No property found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return property;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Property update(Property updated) throws EntityNotFoundException {
        LOGGER.debug("Updating property with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


