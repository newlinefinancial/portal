/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class BidSequence.
 * @see com.portal.platform.BidSequence
 */
@Service("platform.BidSequenceService")
public class BidSequenceServiceImpl implements BidSequenceService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BidSequenceServiceImpl.class);

    @Autowired
    @Qualifier("platform.BidSequenceDao")
    private WMGenericDao<BidSequence, BidSequenceId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BidSequence, BidSequenceId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<BidSequence> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public BidSequence create(BidSequence bidsequence) {
        LOGGER.debug("Creating a new bidsequence with information: {}" , bidsequence);
        return this.wmGenericDao.create(bidsequence);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BidSequence delete(BidSequenceId bidsequenceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bidsequence with id: {}" , bidsequenceId);
        BidSequence deleted = this.wmGenericDao.findById(bidsequenceId);
        if (deleted == null) {
            LOGGER.debug("No bidsequence found with id: {}" , bidsequenceId);
            throw new EntityNotFoundException(String.valueOf(bidsequenceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BidSequence> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bidsequences");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BidSequence> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bidsequences");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public BidSequence findById(BidSequenceId id) throws EntityNotFoundException {
        LOGGER.debug("Finding bidsequence by id: {}" , id);
        BidSequence bidsequence=this.wmGenericDao.findById(id);
        if(bidsequence==null){
            LOGGER.debug("No bidsequence found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bidsequence;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BidSequence update(BidSequence updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bidsequence with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BidSequenceId id = new BidSequenceId();
        id.setAuctionId(updated.getAuctionId());
        id.setTaxYear(updated.getTaxYear());
        id.setPropertyId(updated.getPropertyId());
        id.setAuctionDay(updated.getAuctionDay());
        id.setOrder(updated.getOrder());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


