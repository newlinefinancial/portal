/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class RejectReason.
 * @see com.portal.platform.RejectReason
 */

public interface RejectReasonService {
   /**
	 * Creates a new rejectreason.
	 * 
	 * @param created
	 *            The information of the created rejectreason.
	 * @return The created rejectreason.
	 */
	public RejectReason create(RejectReason created);

	/**
	 * Deletes a rejectreason.
	 * 
	 * @param rejectreasonId
	 *            The id of the deleted rejectreason.
	 * @return The deleted rejectreason.
	 * @throws EntityNotFoundException
	 *             if no rejectreason is found with the given id.
	 */
	public RejectReason delete(Integer rejectreasonId) throws EntityNotFoundException;

	/**
	 * Finds all rejectreasons.
	 * 
	 * @return A list of rejectreasons.
	 */
	public Page<RejectReason> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<RejectReason> findAll(Pageable pageable);
	
	/**
	 * Finds rejectreason by id.
	 * 
	 * @param id
	 *            The id of the wanted rejectreason.
	 * @return The found rejectreason. If no rejectreason is found, this method returns
	 *         null.
	 */
	public RejectReason findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a rejectreason.
	 * 
	 * @param updated
	 *            The information of the updated rejectreason.
	 * @return The updated rejectreason.
	 * @throws EntityNotFoundException
	 *             if no rejectreason is found with given id.
	 */
	public RejectReason update(RejectReason updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the rejectreasons in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the rejectreason.
	 */

	public long countAll();


    public Page<RejectReason> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

