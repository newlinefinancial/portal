/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Source.
 * @see com.portal.platform.Source
 */

public interface SourceService {
   /**
	 * Creates a new source.
	 * 
	 * @param created
	 *            The information of the created source.
	 * @return The created source.
	 */
	public Source create(Source created);

	/**
	 * Deletes a source.
	 * 
	 * @param sourceId
	 *            The id of the deleted source.
	 * @return The deleted source.
	 * @throws EntityNotFoundException
	 *             if no source is found with the given id.
	 */
	public Source delete(String sourceId) throws EntityNotFoundException;

	/**
	 * Finds all sources.
	 * 
	 * @return A list of sources.
	 */
	public Page<Source> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Source> findAll(Pageable pageable);
	
	/**
	 * Finds source by id.
	 * 
	 * @param id
	 *            The id of the wanted source.
	 * @return The found source. If no source is found, this method returns
	 *         null.
	 */
	public Source findById(String id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a source.
	 * 
	 * @param updated
	 *            The information of the updated source.
	 * @return The updated source.
	 * @throws EntityNotFoundException
	 *             if no source is found with given id.
	 */
	public Source update(Source updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the sources in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the source.
	 */

	public long countAll();


    public Page<Source> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

