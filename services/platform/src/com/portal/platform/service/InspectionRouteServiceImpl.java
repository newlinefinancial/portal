/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class InspectionRoute.
 * @see com.portal.platform.InspectionRoute
 */
@Service("platform.InspectionRouteService")
public class InspectionRouteServiceImpl implements InspectionRouteService {


    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionRouteServiceImpl.class);

    @Autowired
    @Qualifier("platform.InspectionRouteDao")
    private WMGenericDao<InspectionRoute, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InspectionRoute, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<InspectionRoute> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public InspectionRoute create(InspectionRoute inspectionroute) {
        LOGGER.debug("Creating a new inspectionroute with information: {}" , inspectionroute);
        return this.wmGenericDao.create(inspectionroute);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public InspectionRoute delete(Integer inspectionrouteId) throws EntityNotFoundException {
        LOGGER.debug("Deleting inspectionroute with id: {}" , inspectionrouteId);
        InspectionRoute deleted = this.wmGenericDao.findById(inspectionrouteId);
        if (deleted == null) {
            LOGGER.debug("No inspectionroute found with id: {}" , inspectionrouteId);
            throw new EntityNotFoundException(String.valueOf(inspectionrouteId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<InspectionRoute> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all inspectionroutes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<InspectionRoute> findAll(Pageable pageable) {
        LOGGER.debug("Finding all inspectionroutes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public InspectionRoute findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding inspectionroute by id: {}" , id);
        InspectionRoute inspectionroute=this.wmGenericDao.findById(id);
        if(inspectionroute==null){
            LOGGER.debug("No inspectionroute found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return inspectionroute;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public InspectionRoute update(InspectionRoute updated) throws EntityNotFoundException {
        LOGGER.debug("Updating inspectionroute with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


