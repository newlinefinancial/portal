/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class AvailableSubs.
 * @see com.portal.platform.AvailableSubs
 */
@Service("platform.AvailableSubsService")
public class AvailableSubsServiceImpl implements AvailableSubsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AvailableSubsServiceImpl.class);

    @Autowired
    @Qualifier("platform.AvailableSubsDao")
    private WMGenericDao<AvailableSubs, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AvailableSubs, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<AvailableSubs> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public AvailableSubs create(AvailableSubs availablesubs) {
        LOGGER.debug("Creating a new availablesubs with information: {}" , availablesubs);
        return this.wmGenericDao.create(availablesubs);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public AvailableSubs delete(Integer availablesubsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting availablesubs with id: {}" , availablesubsId);
        AvailableSubs deleted = this.wmGenericDao.findById(availablesubsId);
        if (deleted == null) {
            LOGGER.debug("No availablesubs found with id: {}" , availablesubsId);
            throw new EntityNotFoundException(String.valueOf(availablesubsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<AvailableSubs> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all availablesubss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<AvailableSubs> findAll(Pageable pageable) {
        LOGGER.debug("Finding all availablesubss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public AvailableSubs findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding availablesubs by id: {}" , id);
        AvailableSubs availablesubs=this.wmGenericDao.findById(id);
        if(availablesubs==null){
            LOGGER.debug("No availablesubs found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return availablesubs;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public AvailableSubs update(AvailableSubs updated) throws EntityNotFoundException {
        LOGGER.debug("Updating availablesubs with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


