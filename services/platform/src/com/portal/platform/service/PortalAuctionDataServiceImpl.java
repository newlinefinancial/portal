/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalAuctionData.
 * @see com.portal.platform.PortalAuctionData
 */
@Service("platform.PortalAuctionDataService")
public class PortalAuctionDataServiceImpl implements PortalAuctionDataService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionDataServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalAuctionDataDao")
    private WMGenericDao<PortalAuctionData, PortalAuctionDataId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalAuctionData, PortalAuctionDataId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalAuctionData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalAuctionData create(PortalAuctionData portalauctiondata) {
        LOGGER.debug("Creating a new portalauctiondata with information: {}" , portalauctiondata);
        return this.wmGenericDao.create(portalauctiondata);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionData delete(PortalAuctionDataId portalauctiondataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalauctiondata with id: {}" , portalauctiondataId);
        PortalAuctionData deleted = this.wmGenericDao.findById(portalauctiondataId);
        if (deleted == null) {
            LOGGER.debug("No portalauctiondata found with id: {}" , portalauctiondataId);
            throw new EntityNotFoundException(String.valueOf(portalauctiondataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalauctiondatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionData> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalauctiondatas");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalAuctionData findById(PortalAuctionDataId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalauctiondata by id: {}" , id);
        PortalAuctionData portalauctiondata=this.wmGenericDao.findById(id);
        if(portalauctiondata==null){
            LOGGER.debug("No portalauctiondata found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalauctiondata;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionData update(PortalAuctionData updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalauctiondata with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalAuctionDataId id = new PortalAuctionDataId();
        id.setPropertyId(updated.getPropertyId());
        id.setGradeId(updated.getGradeId());
        id.setPin(updated.getPin());
        id.setHeader(updated.getHeader());
        id.setPinNd(updated.getPinNd());
        id.setPiqAddress(updated.getPiqAddress());
        id.setAssessor(updated.getAssessor());
        id.setClerk(updated.getClerk());
        id.setGis(updated.getGis());
        id.setTreasurer(updated.getTreasurer());
        id.setRecorder(updated.getRecorder());
        id.setAssesmentTaxYear(updated.getAssesmentTaxYear());
        id.setEqualizedValuation(updated.getEqualizedValuation());
        id.setHomeExemption(updated.getHomeExemption());
        id.setSeniorExemption(updated.getSeniorExemption());
        id.setAssessedValuationBuilding(updated.getAssessedValuationBuilding());
        id.setAssessedValuationLand(updated.getAssessedValuationLand());
        id.setAssessedValuationTotal(updated.getAssessedValuationTotal());
        id.setMarketValue(updated.getMarketValue());
        id.setAssesseeName(updated.getAssesseeName());
        id.setAssesseeAddressLine1(updated.getAssesseeAddressLine1());
        id.setAssesseeAddressCity(updated.getAssesseeAddressCity());
        id.setAssesseeAddressState(updated.getAssesseeAddressState());
        id.setAssesseeAddressZip(updated.getAssesseeAddressZip());
        id.setTaxRate(updated.getTaxRate());
        id.setEqualizationFactor(updated.getEqualizationFactor());
        id.setTaxYear(updated.getTaxYear());
        id.setAuctionId(updated.getAuctionId());
        id.setPriorYearsDue(updated.getPriorYearsDue());
        id.setAuctionInst1Due(updated.getAuctionInst1Due());
        id.setAuctionInst2Due(updated.getAuctionInst2Due());
        id.setAuctionYearBilled(updated.getAuctionYearBilled());
        id.setAuctionYearDue(updated.getAuctionYearDue());
        id.setOtherDue(updated.getOtherDue());
        id.setSaleAmount(updated.getSaleAmount());
        id.setAuctionStatSummary(updated.getAuctionStatSummary());
        id.setLifetimeLtv(updated.getLifetimeLtv());
        id.setPredRedemptionPct(updated.getPredRedemptionPct());
        id.setPredBidRate(updated.getPredBidRate());
        id.setGrade(updated.getGrade());
        id.setAvgBidrate(updated.getAvgBidrate());
        id.setForfeitStat(updated.getForfeitStat());
        id.setRedemptionStat(updated.getRedemptionStat());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


