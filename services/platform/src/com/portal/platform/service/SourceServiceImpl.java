/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Source.
 * @see com.portal.platform.Source
 */
@Service("platform.SourceService")
public class SourceServiceImpl implements SourceService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SourceServiceImpl.class);

    @Autowired
    @Qualifier("platform.SourceDao")
    private WMGenericDao<Source, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Source, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Source> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Source create(Source source) {
        LOGGER.debug("Creating a new source with information: {}" , source);
        return this.wmGenericDao.create(source);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Source delete(String sourceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting source with id: {}" , sourceId);
        Source deleted = this.wmGenericDao.findById(sourceId);
        if (deleted == null) {
            LOGGER.debug("No source found with id: {}" , sourceId);
            throw new EntityNotFoundException(String.valueOf(sourceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Source> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all sources");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Source> findAll(Pageable pageable) {
        LOGGER.debug("Finding all sources");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Source findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding source by id: {}" , id);
        Source source=this.wmGenericDao.findById(id);
        if(source==null){
            LOGGER.debug("No source found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return source;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Source update(Source updated) throws EntityNotFoundException {
        LOGGER.debug("Updating source with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getCode();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


