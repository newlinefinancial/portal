/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class BuyerGroup.
 * @see com.portal.platform.BuyerGroup
 */
@Service("platform.BuyerGroupService")
public class BuyerGroupServiceImpl implements BuyerGroupService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BuyerGroupServiceImpl.class);

    @Autowired
    @Qualifier("platform.BuyerGroupDao")
    private WMGenericDao<BuyerGroup, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BuyerGroup, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<BuyerGroup> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public BuyerGroup create(BuyerGroup buyergroup) {
        LOGGER.debug("Creating a new buyergroup with information: {}" , buyergroup);
        return this.wmGenericDao.create(buyergroup);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BuyerGroup delete(Integer buyergroupId) throws EntityNotFoundException {
        LOGGER.debug("Deleting buyergroup with id: {}" , buyergroupId);
        BuyerGroup deleted = this.wmGenericDao.findById(buyergroupId);
        if (deleted == null) {
            LOGGER.debug("No buyergroup found with id: {}" , buyergroupId);
            throw new EntityNotFoundException(String.valueOf(buyergroupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BuyerGroup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all buyergroups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<BuyerGroup> findAll(Pageable pageable) {
        LOGGER.debug("Finding all buyergroups");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public BuyerGroup findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding buyergroup by id: {}" , id);
        BuyerGroup buyergroup=this.wmGenericDao.findById(id);
        if(buyergroup==null){
            LOGGER.debug("No buyergroup found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return buyergroup;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public BuyerGroup update(BuyerGroup updated) throws EntityNotFoundException {
        LOGGER.debug("Updating buyergroup with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


