/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalCertificateFilter.
 * @see com.portal.platform.PortalCertificateFilter
 */
@Service("platform.PortalCertificateFilterService")
public class PortalCertificateFilterServiceImpl implements PortalCertificateFilterService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateFilterServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalCertificateFilterDao")
    private WMGenericDao<PortalCertificateFilter, PortalCertificateFilterId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalCertificateFilter, PortalCertificateFilterId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalCertificateFilter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalCertificateFilter create(PortalCertificateFilter portalcertificatefilter) {
        LOGGER.debug("Creating a new portalcertificatefilter with information: {}" , portalcertificatefilter);
        return this.wmGenericDao.create(portalcertificatefilter);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateFilter delete(PortalCertificateFilterId portalcertificatefilterId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalcertificatefilter with id: {}" , portalcertificatefilterId);
        PortalCertificateFilter deleted = this.wmGenericDao.findById(portalcertificatefilterId);
        if (deleted == null) {
            LOGGER.debug("No portalcertificatefilter found with id: {}" , portalcertificatefilterId);
            throw new EntityNotFoundException(String.valueOf(portalcertificatefilterId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateFilter> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalcertificatefilters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalCertificateFilter> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalcertificatefilters");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalCertificateFilter findById(PortalCertificateFilterId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalcertificatefilter by id: {}" , id);
        PortalCertificateFilter portalcertificatefilter=this.wmGenericDao.findById(id);
        if(portalcertificatefilter==null){
            LOGGER.debug("No portalcertificatefilter found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalcertificatefilter;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalCertificateFilter update(PortalCertificateFilter updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalcertificatefilter with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalCertificateFilterId id = new PortalCertificateFilterId();
        id.setId(updated.getId());
        id.setPropertyId(updated.getPropertyId());
        id.setCountyName(updated.getCountyName());
        id.setTownshipName(updated.getTownshipName());
        id.setCode(updated.getCode());
        id.setPropertyType(updated.getPropertyType());
        id.setCertificateNumber(updated.getCertificateNumber());
        id.setTaxYear(updated.getTaxYear());
        id.setStatus(updated.getStatus());
        id.setPin(updated.getPin());
        id.setVolume(updated.getVolume());
        id.setExpirationDate(updated.getExpirationDate());
        id.setMatterNumber(updated.getMatterNumber());
        id.setTags(updated.getTags());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


