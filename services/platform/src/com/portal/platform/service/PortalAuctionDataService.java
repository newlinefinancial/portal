/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalAuctionData.
 * @see com.portal.platform.PortalAuctionData
 */

public interface PortalAuctionDataService {
   /**
	 * Creates a new portalauctiondata.
	 * 
	 * @param created
	 *            The information of the created portalauctiondata.
	 * @return The created portalauctiondata.
	 */
	public PortalAuctionData create(PortalAuctionData created);

	/**
	 * Deletes a portalauctiondata.
	 * 
	 * @param portalauctiondataId
	 *            The id of the deleted portalauctiondata.
	 * @return The deleted portalauctiondata.
	 * @throws EntityNotFoundException
	 *             if no portalauctiondata is found with the given id.
	 */
	public PortalAuctionData delete(PortalAuctionDataId portalauctiondataId) throws EntityNotFoundException;

	/**
	 * Finds all portalauctiondatas.
	 * 
	 * @return A list of portalauctiondatas.
	 */
	public Page<PortalAuctionData> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalAuctionData> findAll(Pageable pageable);
	
	/**
	 * Finds portalauctiondata by id.
	 * 
	 * @param id
	 *            The id of the wanted portalauctiondata.
	 * @return The found portalauctiondata. If no portalauctiondata is found, this method returns
	 *         null.
	 */
	public PortalAuctionData findById(PortalAuctionDataId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portalauctiondata.
	 * 
	 * @param updated
	 *            The information of the updated portalauctiondata.
	 * @return The updated portalauctiondata.
	 * @throws EntityNotFoundException
	 *             if no portalauctiondata is found with given id.
	 */
	public PortalAuctionData update(PortalAuctionData updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portalauctiondatas in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portalauctiondata.
	 */

	public long countAll();


    public Page<PortalAuctionData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

