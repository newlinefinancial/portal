/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class BuyerGroup.
 * @see com.portal.platform.BuyerGroup
 */

public interface BuyerGroupService {
   /**
	 * Creates a new buyergroup.
	 * 
	 * @param created
	 *            The information of the created buyergroup.
	 * @return The created buyergroup.
	 */
	public BuyerGroup create(BuyerGroup created);

	/**
	 * Deletes a buyergroup.
	 * 
	 * @param buyergroupId
	 *            The id of the deleted buyergroup.
	 * @return The deleted buyergroup.
	 * @throws EntityNotFoundException
	 *             if no buyergroup is found with the given id.
	 */
	public BuyerGroup delete(Integer buyergroupId) throws EntityNotFoundException;

	/**
	 * Finds all buyergroups.
	 * 
	 * @return A list of buyergroups.
	 */
	public Page<BuyerGroup> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<BuyerGroup> findAll(Pageable pageable);
	
	/**
	 * Finds buyergroup by id.
	 * 
	 * @param id
	 *            The id of the wanted buyergroup.
	 * @return The found buyergroup. If no buyergroup is found, this method returns
	 *         null.
	 */
	public BuyerGroup findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a buyergroup.
	 * 
	 * @param updated
	 *            The information of the updated buyergroup.
	 * @return The updated buyergroup.
	 * @throws EntityNotFoundException
	 *             if no buyergroup is found with given id.
	 */
	public BuyerGroup update(BuyerGroup updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the buyergroups in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the buyergroup.
	 */

	public long countAll();


    public Page<BuyerGroup> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

