/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalAuctionFilter.
 * @see com.portal.platform.PortalAuctionFilter
 */
@Service("platform.PortalAuctionFilterService")
public class PortalAuctionFilterServiceImpl implements PortalAuctionFilterService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionFilterServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalAuctionFilterDao")
    private WMGenericDao<PortalAuctionFilter, PortalAuctionFilterId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalAuctionFilter, PortalAuctionFilterId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalAuctionFilter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalAuctionFilter create(PortalAuctionFilter portalauctionfilter) {
        LOGGER.debug("Creating a new portalauctionfilter with information: {}" , portalauctionfilter);
        return this.wmGenericDao.create(portalauctionfilter);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionFilter delete(PortalAuctionFilterId portalauctionfilterId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalauctionfilter with id: {}" , portalauctionfilterId);
        PortalAuctionFilter deleted = this.wmGenericDao.findById(portalauctionfilterId);
        if (deleted == null) {
            LOGGER.debug("No portalauctionfilter found with id: {}" , portalauctionfilterId);
            throw new EntityNotFoundException(String.valueOf(portalauctionfilterId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionFilter> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalauctionfilters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalAuctionFilter> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalauctionfilters");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalAuctionFilter findById(PortalAuctionFilterId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalauctionfilter by id: {}" , id);
        PortalAuctionFilter portalauctionfilter=this.wmGenericDao.findById(id);
        if(portalauctionfilter==null){
            LOGGER.debug("No portalauctionfilter found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalauctionfilter;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalAuctionFilter update(PortalAuctionFilter updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalauctionfilter with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalAuctionFilterId id = new PortalAuctionFilterId();
        id.setAuctionId(updated.getAuctionId());
        id.setPropertyId(updated.getPropertyId());
        id.setTaxYear(updated.getTaxYear());
        id.setPriorYearsDue(updated.getPriorYearsDue());
        id.setSaleAmount(updated.getSaleAmount());
        id.setRemoved(updated.getRemoved());
        id.setCode(updated.getCode());
        id.setPropertyType(updated.getPropertyType());
        id.setAreaRating(updated.getAreaRating());
        id.setCountyName(updated.getCountyName());
        id.setPin(updated.getPin());
        id.setVolume(updated.getVolume());
        id.setTownshipName(updated.getTownshipName());
        id.setAuctionDay(updated.getAuctionDay());
        id.setStatus(updated.getStatus());
        id.setBuyer(updated.getBuyer());
        id.setBuyerType(updated.getBuyerType());
        id.setTags(updated.getTags());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


