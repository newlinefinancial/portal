/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class Township.
 * @see com.portal.platform.Township
 */
@Service("platform.TownshipService")
public class TownshipServiceImpl implements TownshipService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TownshipServiceImpl.class);

    @Autowired
    @Qualifier("platform.TownshipDao")
    private WMGenericDao<Township, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Township, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<Township> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public Township create(Township township) {
        LOGGER.debug("Creating a new township with information: {}" , township);
        return this.wmGenericDao.create(township);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Township delete(Integer townshipId) throws EntityNotFoundException {
        LOGGER.debug("Deleting township with id: {}" , townshipId);
        Township deleted = this.wmGenericDao.findById(townshipId);
        if (deleted == null) {
            LOGGER.debug("No township found with id: {}" , townshipId);
            throw new EntityNotFoundException(String.valueOf(townshipId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Township> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all townships");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<Township> findAll(Pageable pageable) {
        LOGGER.debug("Finding all townships");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Township findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding township by id: {}" , id);
        Township township=this.wmGenericDao.findById(id);
        if(township==null){
            LOGGER.debug("No township found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return township;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public Township update(Township updated) throws EntityNotFoundException {
        LOGGER.debug("Updating township with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


