/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class PortalMatterFilter.
 * @see com.portal.platform.PortalMatterFilter
 */
@Service("platform.PortalMatterFilterService")
public class PortalMatterFilterServiceImpl implements PortalMatterFilterService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PortalMatterFilterServiceImpl.class);

    @Autowired
    @Qualifier("platform.PortalMatterFilterDao")
    private WMGenericDao<PortalMatterFilter, PortalMatterFilterId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PortalMatterFilter, PortalMatterFilterId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<PortalMatterFilter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public PortalMatterFilter create(PortalMatterFilter portalmatterfilter) {
        LOGGER.debug("Creating a new portalmatterfilter with information: {}" , portalmatterfilter);
        return this.wmGenericDao.create(portalmatterfilter);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalMatterFilter delete(PortalMatterFilterId portalmatterfilterId) throws EntityNotFoundException {
        LOGGER.debug("Deleting portalmatterfilter with id: {}" , portalmatterfilterId);
        PortalMatterFilter deleted = this.wmGenericDao.findById(portalmatterfilterId);
        if (deleted == null) {
            LOGGER.debug("No portalmatterfilter found with id: {}" , portalmatterfilterId);
            throw new EntityNotFoundException(String.valueOf(portalmatterfilterId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalMatterFilter> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all portalmatterfilters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<PortalMatterFilter> findAll(Pageable pageable) {
        LOGGER.debug("Finding all portalmatterfilters");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public PortalMatterFilter findById(PortalMatterFilterId id) throws EntityNotFoundException {
        LOGGER.debug("Finding portalmatterfilter by id: {}" , id);
        PortalMatterFilter portalmatterfilter=this.wmGenericDao.findById(id);
        if(portalmatterfilter==null){
            LOGGER.debug("No portalmatterfilter found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return portalmatterfilter;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public PortalMatterFilter update(PortalMatterFilter updated) throws EntityNotFoundException {
        LOGGER.debug("Updating portalmatterfilter with information: {}" , updated);
        this.wmGenericDao.update(updated);

        PortalMatterFilterId id = new PortalMatterFilterId();
        id.setPropertyId(updated.getPropertyId());
        id.setCountyName(updated.getCountyName());
        id.setCertificateNumber(updated.getCertificateNumber());
        id.setTaxYear(updated.getTaxYear());
        id.setStatus(updated.getStatus());
        id.setPin(updated.getPin());
        id.setVolume(updated.getVolume());
        id.setExpirationDate(updated.getExpirationDate());
        id.setMatterNumber(updated.getMatterNumber());
        id.setClosedDate(updated.getClosedDate());
        id.setFiledDate(updated.getFiledDate());
        id.setMatterId(updated.getMatterId());
        id.setCertificateId(updated.getCertificateId());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


