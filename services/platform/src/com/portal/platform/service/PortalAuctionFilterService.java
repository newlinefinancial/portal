/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class PortalAuctionFilter.
 * @see com.portal.platform.PortalAuctionFilter
 */

public interface PortalAuctionFilterService {
   /**
	 * Creates a new portalauctionfilter.
	 * 
	 * @param created
	 *            The information of the created portalauctionfilter.
	 * @return The created portalauctionfilter.
	 */
	public PortalAuctionFilter create(PortalAuctionFilter created);

	/**
	 * Deletes a portalauctionfilter.
	 * 
	 * @param portalauctionfilterId
	 *            The id of the deleted portalauctionfilter.
	 * @return The deleted portalauctionfilter.
	 * @throws EntityNotFoundException
	 *             if no portalauctionfilter is found with the given id.
	 */
	public PortalAuctionFilter delete(PortalAuctionFilterId portalauctionfilterId) throws EntityNotFoundException;

	/**
	 * Finds all portalauctionfilters.
	 * 
	 * @return A list of portalauctionfilters.
	 */
	public Page<PortalAuctionFilter> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PortalAuctionFilter> findAll(Pageable pageable);
	
	/**
	 * Finds portalauctionfilter by id.
	 * 
	 * @param id
	 *            The id of the wanted portalauctionfilter.
	 * @return The found portalauctionfilter. If no portalauctionfilter is found, this method returns
	 *         null.
	 */
	public PortalAuctionFilter findById(PortalAuctionFilterId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a portalauctionfilter.
	 * 
	 * @param updated
	 *            The information of the updated portalauctionfilter.
	 * @return The updated portalauctionfilter.
	 * @throws EntityNotFoundException
	 *             if no portalauctionfilter is found with given id.
	 */
	public PortalAuctionFilter update(PortalAuctionFilter updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the portalauctionfilters in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the portalauctionfilter.
	 */

	public long countAll();


    public Page<PortalAuctionFilter> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

