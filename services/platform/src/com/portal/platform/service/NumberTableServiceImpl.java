/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;


/**
 * ServiceImpl object for domain model class NumberTable.
 * @see com.portal.platform.NumberTable
 */
@Service("platform.NumberTableService")
public class NumberTableServiceImpl implements NumberTableService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NumberTableServiceImpl.class);

    @Autowired
    @Qualifier("platform.NumberTableDao")
    private WMGenericDao<NumberTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<NumberTable, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "platformTransactionManager")
     public Page<NumberTable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "platformTransactionManager")
    @Override
    public NumberTable create(NumberTable numbertable) {
        LOGGER.debug("Creating a new numbertable with information: {}" , numbertable);
        return this.wmGenericDao.create(numbertable);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public NumberTable delete(Integer numbertableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting numbertable with id: {}" , numbertableId);
        NumberTable deleted = this.wmGenericDao.findById(numbertableId);
        if (deleted == null) {
            LOGGER.debug("No numbertable found with id: {}" , numbertableId);
            throw new EntityNotFoundException(String.valueOf(numbertableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<NumberTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all numbertables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public Page<NumberTable> findAll(Pageable pageable) {
        LOGGER.debug("Finding all numbertables");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public NumberTable findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding numbertable by id: {}" , id);
        NumberTable numbertable=this.wmGenericDao.findById(id);
        if(numbertable==null){
            LOGGER.debug("No numbertable found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return numbertable;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "platformTransactionManager")
    @Override
    public NumberTable update(NumberTable updated) throws EntityNotFoundException {
        LOGGER.debug("Updating numbertable with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getNumber();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "platformTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


