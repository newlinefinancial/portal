/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.portal.platform.*;

/**
 * Service object for domain model class Note.
 * @see com.portal.platform.Note
 */

public interface NoteService {
   /**
	 * Creates a new note.
	 * 
	 * @param created
	 *            The information of the created note.
	 * @return The created note.
	 */
	public Note create(Note created);

	/**
	 * Deletes a note.
	 * 
	 * @param noteId
	 *            The id of the deleted note.
	 * @return The deleted note.
	 * @throws EntityNotFoundException
	 *             if no note is found with the given id.
	 */
	public Note delete(Integer noteId) throws EntityNotFoundException;

	/**
	 * Finds all notes.
	 * 
	 * @return A list of notes.
	 */
	public Page<Note> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Note> findAll(Pageable pageable);
	
	/**
	 * Finds note by id.
	 * 
	 * @param id
	 *            The id of the wanted note.
	 * @return The found note. If no note is found, this method returns
	 *         null.
	 */
	public Note findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a note.
	 * 
	 * @param updated
	 *            The information of the updated note.
	 * @return The updated note.
	 * @throws EntityNotFoundException
	 *             if no note is found with given id.
	 */
	public Note update(Note updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the notes in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the note.
	 */

	public long countAll();


    public Page<Note> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

