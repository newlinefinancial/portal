/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Property generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`property`", schema = "data", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`pin`", "`county_id`"})})
public class Property implements Serializable {

    private int id;
    private String pin;
    private Date updatedTimestamp;
    private boolean dead;
    private Integer volume;
    private String addressLine1;
    private String addressLine2;
    private String addressCity;
    private String addressZip;
    private Integer yearBuilt;
    private Integer yearImproved;
    private Integer sqftLiving;
    private Integer sqftTotal;
    private BigDecimal lotSize;
    private boolean addressVerified;
    private String addressSource1;
    private String addressSource2;
    private Float latitude;
    private Float longitude;
    private Integer lastImportId;
    private String pinNd;
    private String pinBuilding;
    private List<Inspection> inspections = new ArrayList<>();
    private List<Underwriting> underwritings = new ArrayList<>();
    private List<Note> notes = new ArrayList<>();
    private List<InspectionRoute> inspectionRoutes = new ArrayList<>();
    private List<PropertySale> propertySales = new ArrayList<>();
    private List<TaxHistory> taxHistories = new ArrayList<>();
    private County county;
    private Grade grade;
    private Property propertyByReplacedBy;
    private List<Property> propertiesForReplacedBy = new ArrayList<>();
    private PropertyExterior propertyExterior;
    private PropertyType propertyType;
    private Township township;
    private List<TitleTransaction> titleTransactions = new ArrayList<>();
    private List<Auction> auctions = new ArrayList<>();
    private List<Assessment> assessments = new ArrayList<>();
    private List<AvailableSubs> availableSubses = new ArrayList<>();
    private List<AuctionResult> auctionResults = new ArrayList<>();
    private List<Research> researches = new ArrayList<>();
    private List<Certificate> certificates = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Column(name = "`pin`", nullable = false, length = 255)
    public String getPin() {
        return this.pin;
    }

    public void setPin(String pin) {
        this.pin = pin;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`updated_timestamp`", nullable = false)
    public Date getUpdatedTimestamp() {
        return this.updatedTimestamp;
    }

    public void setUpdatedTimestamp(Date updatedTimestamp) {
        this.updatedTimestamp = updatedTimestamp;
    }

    @Column(name = "`dead`", nullable = false)
    public boolean isDead() {
        return this.dead;
    }

    public void setDead(boolean dead) {
        this.dead = dead;
    }

    @Column(name = "`volume`", nullable = true, scale = 0, precision = 10)
    public Integer getVolume() {
        return this.volume;
    }

    public void setVolume(Integer volume) {
        this.volume = volume;
    }

    @Column(name = "`address_line1`", nullable = true, length = 220)
    public String getAddressLine1() {
        return this.addressLine1;
    }

    public void setAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
    }

    @Column(name = "`address_line2`", nullable = true, length = 220)
    public String getAddressLine2() {
        return this.addressLine2;
    }

    public void setAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
    }

    @Column(name = "`address_city`", nullable = true, length = 220)
    public String getAddressCity() {
        return this.addressCity;
    }

    public void setAddressCity(String addressCity) {
        this.addressCity = addressCity;
    }

    @Column(name = "`address_zip`", nullable = true, length = 10)
    public String getAddressZip() {
        return this.addressZip;
    }

    public void setAddressZip(String addressZip) {
        this.addressZip = addressZip;
    }

    @Column(name = "`year_built`", nullable = true, scale = 0, precision = 10)
    public Integer getYearBuilt() {
        return this.yearBuilt;
    }

    public void setYearBuilt(Integer yearBuilt) {
        this.yearBuilt = yearBuilt;
    }

    @Column(name = "`year_improved`", nullable = true, scale = 0, precision = 10)
    public Integer getYearImproved() {
        return this.yearImproved;
    }

    public void setYearImproved(Integer yearImproved) {
        this.yearImproved = yearImproved;
    }

    @Column(name = "`sqft_living`", nullable = true, scale = 0, precision = 10)
    public Integer getSqftLiving() {
        return this.sqftLiving;
    }

    public void setSqftLiving(Integer sqftLiving) {
        this.sqftLiving = sqftLiving;
    }

    @Column(name = "`sqft_total`", nullable = true, scale = 0, precision = 10)
    public Integer getSqftTotal() {
        return this.sqftTotal;
    }

    public void setSqftTotal(Integer sqftTotal) {
        this.sqftTotal = sqftTotal;
    }

    @Column(name = "`lot_size`", nullable = true, scale = 6, precision = 28)
    public BigDecimal getLotSize() {
        return this.lotSize;
    }

    public void setLotSize(BigDecimal lotSize) {
        this.lotSize = lotSize;
    }

    @Column(name = "`address_verified`", nullable = false)
    public boolean isAddressVerified() {
        return this.addressVerified;
    }

    public void setAddressVerified(boolean addressVerified) {
        this.addressVerified = addressVerified;
    }

    @Column(name = "`address_source1`", nullable = true, length = 10)
    public String getAddressSource1() {
        return this.addressSource1;
    }

    public void setAddressSource1(String addressSource1) {
        this.addressSource1 = addressSource1;
    }

    @Column(name = "`address_source2`", nullable = true, length = 10)
    public String getAddressSource2() {
        return this.addressSource2;
    }

    public void setAddressSource2(String addressSource2) {
        this.addressSource2 = addressSource2;
    }

    @Column(name = "`latitude`", nullable = true, scale = 6, precision = 9)
    public Float getLatitude() {
        return this.latitude;
    }

    public void setLatitude(Float latitude) {
        this.latitude = latitude;
    }

    @Column(name = "`longitude`", nullable = true, scale = 6, precision = 9)
    public Float getLongitude() {
        return this.longitude;
    }

    public void setLongitude(Float longitude) {
        this.longitude = longitude;
    }

    @Column(name = "`last_import_id`", nullable = true, scale = 0, precision = 10)
    public Integer getLastImportId() {
        return this.lastImportId;
    }

    public void setLastImportId(Integer lastImportId) {
        this.lastImportId = lastImportId;
    }

    @Column(name = "`pin_nd`", nullable = true, length = 255)
    public String getPinNd() {
        return this.pinNd;
    }

    public void setPinNd(String pinNd) {
        this.pinNd = pinNd;
    }

    @Column(name = "`pin_building`", nullable = true, length = 255)
    public String getPinBuilding() {
        return this.pinBuilding;
    }

    public void setPinBuilding(String pinBuilding) {
        this.pinBuilding = pinBuilding;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<Inspection> getInspections() {
        return this.inspections;
    }

    public void setInspections(List<Inspection> inspections) {
        this.inspections = inspections;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<Underwriting> getUnderwritings() {
        return this.underwritings;
    }

    public void setUnderwritings(List<Underwriting> underwritings) {
        this.underwritings = underwritings;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<Note> getNotes() {
        return this.notes;
    }

    public void setNotes(List<Note> notes) {
        this.notes = notes;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<InspectionRoute> getInspectionRoutes() {
        return this.inspectionRoutes;
    }

    public void setInspectionRoutes(List<InspectionRoute> inspectionRoutes) {
        this.inspectionRoutes = inspectionRoutes;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<PropertySale> getPropertySales() {
        return this.propertySales;
    }

    public void setPropertySales(List<PropertySale> propertySales) {
        this.propertySales = propertySales;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<TaxHistory> getTaxHistories() {
        return this.taxHistories;
    }

    public void setTaxHistories(List<TaxHistory> taxHistories) {
        this.taxHistories = taxHistories;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`county_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public County getCounty() {
        return this.county;
    }

    public void setCounty(County county) {
        this.county = county;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`grade_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public Grade getGrade() {
        return this.grade;
    }

    public void setGrade(Grade grade) {
        this.grade = grade;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"propertyByReplacedBy", "propertiesForReplacedBy"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`replaced_by`", referencedColumnName = "`ID`", insertable = true, updatable = true)
    public Property getPropertyByReplacedBy() {
        return this.propertyByReplacedBy;
    }

    public void setPropertyByReplacedBy(Property propertyByReplacedBy) {
        this.propertyByReplacedBy = propertyByReplacedBy;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"propertyByReplacedBy", "propertiesForReplacedBy"})
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "propertyByReplacedBy")
    public List<Property> getPropertiesForReplacedBy() {
        return this.propertiesForReplacedBy;
    }

    public void setPropertiesForReplacedBy(List<Property> propertiesForReplacedBy) {
        this.propertiesForReplacedBy = propertiesForReplacedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`property_exterior_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public PropertyExterior getPropertyExterior() {
        return this.propertyExterior;
    }

    public void setPropertyExterior(PropertyExterior propertyExterior) {
        this.propertyExterior = propertyExterior;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`property_type_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public PropertyType getPropertyType() {
        return this.propertyType;
    }

    public void setPropertyType(PropertyType propertyType) {
        this.propertyType = propertyType;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`township_id`", referencedColumnName = "`ID`", insertable = true, updatable = true)
    public Township getTownship() {
        return this.township;
    }

    public void setTownship(Township township) {
        this.township = township;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<TitleTransaction> getTitleTransactions() {
        return this.titleTransactions;
    }

    public void setTitleTransactions(List<TitleTransaction> titleTransactions) {
        this.titleTransactions = titleTransactions;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<Auction> getAuctions() {
        return this.auctions;
    }

    public void setAuctions(List<Auction> auctions) {
        this.auctions = auctions;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<Assessment> getAssessments() {
        return this.assessments;
    }

    public void setAssessments(List<Assessment> assessments) {
        this.assessments = assessments;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<AvailableSubs> getAvailableSubses() {
        return this.availableSubses;
    }

    public void setAvailableSubses(List<AvailableSubs> availableSubses) {
        this.availableSubses = availableSubses;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<AuctionResult> getAuctionResults() {
        return this.auctionResults;
    }

    public void setAuctionResults(List<AuctionResult> auctionResults) {
        this.auctionResults = auctionResults;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<Research> getResearches() {
        return this.researches;
    }

    public void setResearches(List<Research> researches) {
        this.researches = researches;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "property")
    public List<Certificate> getCertificates() {
        return this.certificates;
    }

    public void setCertificates(List<Certificate> certificates) {
        this.certificates = certificates;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Property)) return false;
        final Property property = (Property) o;
        return Objects.equals(getId(), property.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

