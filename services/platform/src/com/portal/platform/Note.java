/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Note generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`note`", schema = "review", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`property_id`", "`certificate_id`", "`grade_id`", "`note_type_id`", "`done_timestamp`", "`comments`"})})
public class Note implements Serializable {

    private int id;
    private Date createdTimestamp;
    private Date dueDate;
    private Date doneTimestamp;
    private String comments;
    private String user;
    private Certificate certificate;
    private Grade grade;
    private Property property;
    private NoteType noteType;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`created_timestamp`", nullable = false)
    public Date getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public void setCreatedTimestamp(Date createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`due_date`", nullable = true)
    public Date getDueDate() {
        return this.dueDate;
    }

    public void setDueDate(Date dueDate) {
        this.dueDate = dueDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`done_timestamp`", nullable = true)
    public Date getDoneTimestamp() {
        return this.doneTimestamp;
    }

    public void setDoneTimestamp(Date doneTimestamp) {
        this.doneTimestamp = doneTimestamp;
    }

    @Column(name = "`comments`", nullable = true, length = 200)
    public String getComments() {
        return this.comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    @Column(name = "`user`", nullable = false, length = 10)
    public String getUser() {
        return this.user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`certificate_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public Certificate getCertificate() {
        return this.certificate;
    }

    public void setCertificate(Certificate certificate) {
        this.certificate = certificate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`grade_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public Grade getGrade() {
        return this.grade;
    }

    public void setGrade(Grade grade) {
        this.grade = grade;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`property_id`", referencedColumnName = "`ID`", insertable = true, updatable = true)
    public Property getProperty() {
        return this.property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`note_type_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public NoteType getNoteType() {
        return this.noteType;
    }

    public void setNoteType(NoteType noteType) {
        this.noteType = noteType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Note)) return false;
        final Note note = (Note) o;
        return Objects.equals(getId(), note.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

