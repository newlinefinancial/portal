/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * AvailableSubs generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`available_subs`", schema = "data", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`property_id`", "`tax_year`", "`installment`"})})
public class AvailableSubs implements Serializable {

    private int id;
    private Date researchDate;
    private int taxYear;
    private char installment;
    private Double inst1;
    private Double inst2;
    private double total;
    private Integer lastImportId;
    private Double paidAfterImport;
    private Date datePaid;
    private Certificate certificate;
    private Property property;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`research_date`", nullable = false)
    public Date getResearchDate() {
        return this.researchDate;
    }

    public void setResearchDate(Date researchDate) {
        this.researchDate = researchDate;
    }

    @Column(name = "`tax_year`", nullable = false, scale = 0, precision = 10)
    public int getTaxYear() {
        return this.taxYear;
    }

    public void setTaxYear(int taxYear) {
        this.taxYear = taxYear;
    }

    @Column(name = "`installment`", nullable = false, length = 1)
    public char getInstallment() {
        return this.installment;
    }

    public void setInstallment(char installment) {
        this.installment = installment;
    }

    @Column(name = "`inst1`", nullable = true, scale = 4, precision = 19)
    public Double getInst1() {
        return this.inst1;
    }

    public void setInst1(Double inst1) {
        this.inst1 = inst1;
    }

    @Column(name = "`inst2`", nullable = true, scale = 4, precision = 19)
    public Double getInst2() {
        return this.inst2;
    }

    public void setInst2(Double inst2) {
        this.inst2 = inst2;
    }

    @Column(name = "`total`", nullable = false, scale = 4, precision = 19)
    public double getTotal() {
        return this.total;
    }

    public void setTotal(double total) {
        this.total = total;
    }

    @Column(name = "`last_import_id`", nullable = true, scale = 0, precision = 10)
    public Integer getLastImportId() {
        return this.lastImportId;
    }

    public void setLastImportId(Integer lastImportId) {
        this.lastImportId = lastImportId;
    }

    @Column(name = "`paid_after_import`", nullable = true, scale = 4, precision = 19)
    public Double getPaidAfterImport() {
        return this.paidAfterImport;
    }

    public void setPaidAfterImport(Double paidAfterImport) {
        this.paidAfterImport = paidAfterImport;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`date_paid`", nullable = true)
    public Date getDatePaid() {
        return this.datePaid;
    }

    public void setDatePaid(Date datePaid) {
        this.datePaid = datePaid;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`certificate_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public Certificate getCertificate() {
        return this.certificate;
    }

    public void setCertificate(Certificate certificate) {
        this.certificate = certificate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`property_id`", referencedColumnName = "`ID`", insertable = true, updatable = true)
    public Property getProperty() {
        return this.property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AvailableSubs)) return false;
        final AvailableSubs availableSubs = (AvailableSubs) o;
        return Objects.equals(getId(), availableSubs.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

