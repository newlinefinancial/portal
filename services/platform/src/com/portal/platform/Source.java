/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Source generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`source`", schema = "data", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`code`", "`name`"})})
public class Source implements Serializable {

    private String code;
    private String name;
    private List<Party> partiesForSource2 = new ArrayList<>();
    private List<Party> partiesForSource1 = new ArrayList<>();

    @Id
    @Column(name = "`code`", nullable = false, length = 4)
    public String getCode() {
        return this.code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @Column(name = "`name`", nullable = false, length = 50)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "sourceBySource2")
    public List<Party> getPartiesForSource2() {
        return this.partiesForSource2;
    }

    public void setPartiesForSource2(List<Party> partiesForSource2) {
        this.partiesForSource2 = partiesForSource2;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "sourceBySource1")
    public List<Party> getPartiesForSource1() {
        return this.partiesForSource1;
    }

    public void setPartiesForSource1(List<Party> partiesForSource1) {
        this.partiesForSource1 = partiesForSource1;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Source)) return false;
        final Source source = (Source) o;
        return Objects.equals(getCode(), source.getCode());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCode());
    }
}

