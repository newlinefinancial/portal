/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.MatterPartyService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class MatterParty.
 * @see com.portal.platform.MatterParty
 */
@RestController(value = "Platform.MatterPartyController")
@RequestMapping("/platform/MatterParty")
@Api(description = "Exposes APIs to work with MatterParty resource.", value = "MatterPartyController")
public class MatterPartyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MatterPartyController.class);

    @Autowired
    @Qualifier("platform.MatterPartyService")
    private MatterPartyService matterPartyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of MatterParty instances matching the search criteria.")
    public Page<MatterParty> findMatterPartys(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MatterPartys list");
        return matterPartyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of MatterParty instances.")
    public Page<MatterParty> getMatterPartys(Pageable pageable) {
        LOGGER.debug("Rendering MatterPartys list");
        return matterPartyService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setMatterPartyService(MatterPartyService service) {
        this.matterPartyService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new MatterParty instance.")
    public MatterParty createMatterParty(@RequestBody MatterParty instance) {
        LOGGER.debug("Create MatterParty with information: {}", instance);
        instance = matterPartyService.create(instance);
        LOGGER.debug("Created MatterParty with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of MatterParty instances.")
    public Long countAllMatterPartys() {
        LOGGER.debug("counting MatterPartys");
        Long count = matterPartyService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the MatterParty instance associated with the given id.")
    public MatterParty getMatterParty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting MatterParty with id: {}", id);
        MatterParty instance = matterPartyService.findById(id);
        LOGGER.debug("MatterParty details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the MatterParty instance associated with the given id.")
    public MatterParty editMatterParty(@PathVariable(value = "id") Integer id, @RequestBody MatterParty instance) throws EntityNotFoundException {
        LOGGER.debug("Editing MatterParty with id: {}", instance.getId());
        instance.setId(id);
        instance = matterPartyService.update(instance);
        LOGGER.debug("MatterParty details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the MatterParty instance associated with the given id.")
    public boolean deleteMatterParty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting MatterParty with id: {}", id);
        MatterParty deleted = matterPartyService.delete(id);
        return deleted != null;
    }
}
