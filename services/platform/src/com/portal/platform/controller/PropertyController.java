/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Assessment;
import com.portal.platform.Auction;
import com.portal.platform.AuctionResult;
import com.portal.platform.AvailableSubs;
import com.portal.platform.Certificate;
import com.portal.platform.Inspection;
import com.portal.platform.InspectionRoute;
import com.portal.platform.Note;
import com.portal.platform.Property;
import com.portal.platform.PropertySale;
import com.portal.platform.Research;
import com.portal.platform.TaxHistory;
import com.portal.platform.TitleTransaction;
import com.portal.platform.Underwriting;
import com.portal.platform.service.AssessmentService;
import com.portal.platform.service.AuctionResultService;
import com.portal.platform.service.AuctionService;
import com.portal.platform.service.AvailableSubsService;
import com.portal.platform.service.CertificateService;
import com.portal.platform.service.InspectionRouteService;
import com.portal.platform.service.InspectionService;
import com.portal.platform.service.NoteService;
import com.portal.platform.service.PropertySaleService;
import com.portal.platform.service.PropertyService;
import com.portal.platform.service.ResearchService;
import com.portal.platform.service.TaxHistoryService;
import com.portal.platform.service.TitleTransactionService;
import com.portal.platform.service.UnderwritingService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Property.
 * @see Property
 */
@RestController("platform.PropertyController")
@RequestMapping("/platform/Property")
@Api(description = "Exposes APIs to work with Property resource.", value = "PropertyController")
public class PropertyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyController.class);

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @Autowired
    @Qualifier("platform.CertificateService")
    private CertificateService certificateService;

    @Autowired
    @Qualifier("platform.AssessmentService")
    private AssessmentService assessmentService;

    @Autowired
    @Qualifier("platform.AvailableSubsService")
    private AvailableSubsService availableSubsService;

    @Autowired
    @Qualifier("platform.AuctionResultService")
    private AuctionResultService auctionResultService;

    @Autowired
    @Qualifier("platform.InspectionService")
    private InspectionService inspectionService;

    @Autowired
    @Qualifier("platform.ResearchService")
    private ResearchService researchService;

    @Autowired
    @Qualifier("platform.TitleTransactionService")
    private TitleTransactionService titleTransactionService;

    @Autowired
    @Qualifier("platform.PropertySaleService")
    private PropertySaleService propertySaleService;

    @Autowired
    @Qualifier("platform.TaxHistoryService")
    private TaxHistoryService taxHistoryService;

    @Autowired
    @Qualifier("platform.UnderwritingService")
    private UnderwritingService underwritingService;

    @Autowired
    @Qualifier("platform.InspectionRouteService")
    private InspectionRouteService inspectionRouteService;

    @Autowired
    @Qualifier("platform.NoteService")
    private NoteService noteService;

    @Autowired
    @Qualifier("platform.AuctionService")
    private AuctionService auctionService;

    /**
     * @deprecated Use {@link #findProperties(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Property instances matching the search criteria.")
    public Page<Property> findProperties(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Properties list");
        return propertyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Property instances matching the search criteria.")
    public Page<Property> findProperties(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Properties list");
        return propertyService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportProperties(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return propertyService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/inspections", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inspections instance associated with the given id.")
    public Page<Inspection> findAssociatedInspections(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated inspections");
        return inspectionService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/underwritings", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the underwritings instance associated with the given id.")
    public Page<Underwriting> findAssociatedUnderwritings(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated underwritings");
        return underwritingService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/notes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    public Page<Note> findAssociatedNotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated notes");
        return noteService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/inspectionRoutes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionRoutes instance associated with the given id.")
    public Page<InspectionRoute> findAssociatedInspectionRoutes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated inspectionRoutes");
        return inspectionRouteService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/propertySales", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the propertySales instance associated with the given id.")
    public Page<PropertySale> findAssociatedPropertySales(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated propertySales");
        return propertySaleService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/taxHistories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the taxHistories instance associated with the given id.")
    public Page<TaxHistory> findAssociatedTaxHistories(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated taxHistories");
        return taxHistoryService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/propertiesForReplacedBy", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the propertiesForReplacedBy instance associated with the given id.")
    public Page<Property> findAssociatedPropertiesForReplacedBy(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated propertiesForReplacedBy");
        return propertyService.findAssociatedValues(id, "propertyByReplacedBy", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/titleTransactions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the titleTransactions instance associated with the given id.")
    public Page<TitleTransaction> findAssociatedTitleTransactions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated titleTransactions");
        return titleTransactionService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctions instance associated with the given id.")
    public Page<Auction> findAssociatedAuctions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctions");
        return auctionService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/assessments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the assessments instance associated with the given id.")
    public Page<Assessment> findAssociatedAssessments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assessments");
        return assessmentService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/availableSubses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the availableSubses instance associated with the given id.")
    public Page<AvailableSubs> findAssociatedAvailableSubses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated availableSubses");
        return availableSubsService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctionResults", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctionResults instance associated with the given id.")
    public Page<AuctionResult> findAssociatedAuctionResults(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctionResults");
        return auctionResultService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/researches", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the researches instance associated with the given id.")
    public Page<Research> findAssociatedResearches(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated researches");
        return researchService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificates", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificates instance associated with the given id.")
    public Page<Certificate> findAssociatedCertificates(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated certificates");
        return certificateService.findAssociatedValues(id, "property", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyService instance
	 */
    protected void setPropertyService(PropertyService service) {
        this.propertyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CertificateService instance
	 */
    protected void setCertificateService(CertificateService service) {
        this.certificateService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentService instance
	 */
    protected void setAssessmentService(AssessmentService service) {
        this.assessmentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AvailableSubsService instance
	 */
    protected void setAvailableSubsService(AvailableSubsService service) {
        this.availableSubsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuctionResultService instance
	 */
    protected void setAuctionResultService(AuctionResultService service) {
        this.auctionResultService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionService instance
	 */
    protected void setInspectionService(InspectionService service) {
        this.inspectionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ResearchService instance
	 */
    protected void setResearchService(ResearchService service) {
        this.researchService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TitleTransactionService instance
	 */
    protected void setTitleTransactionService(TitleTransactionService service) {
        this.titleTransactionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertySaleService instance
	 */
    protected void setPropertySaleService(PropertySaleService service) {
        this.propertySaleService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxHistoryService instance
	 */
    protected void setTaxHistoryService(TaxHistoryService service) {
        this.taxHistoryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UnderwritingService instance
	 */
    protected void setUnderwritingService(UnderwritingService service) {
        this.underwritingService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionRouteService instance
	 */
    protected void setInspectionRouteService(InspectionRouteService service) {
        this.inspectionRouteService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NoteService instance
	 */
    protected void setNoteService(NoteService service) {
        this.noteService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuctionService instance
	 */
    protected void setAuctionService(AuctionService service) {
        this.auctionService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Property instances.")
    public Long countProperties(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Properties");
        return propertyService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Property instance associated with the given id.")
    public Property getProperty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Property with id: {}", id);
        Property foundProperty = propertyService.getById(id);
        LOGGER.debug("Property details with id: {}", foundProperty);
        return foundProperty;
    }
}
