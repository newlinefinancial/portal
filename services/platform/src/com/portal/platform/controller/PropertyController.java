/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AssessmentService;
import com.portal.platform.service.AuctionResultService;
import com.portal.platform.service.AuctionService;
import com.portal.platform.service.AvailableSubsService;
import com.portal.platform.service.CertificateService;
import com.portal.platform.service.InspectionRouteService;
import com.portal.platform.service.InspectionService;
import com.portal.platform.service.NoteService;
import com.portal.platform.service.PropertySaleService;
import com.portal.platform.service.PropertyService;
import com.portal.platform.service.ResearchService;
import com.portal.platform.service.TaxHistoryService;
import com.portal.platform.service.TitleTransactionService;
import com.portal.platform.service.UnderwritingService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Property.
 * @see com.portal.platform.Property
 */
@RestController(value = "Platform.PropertyController")
@RequestMapping("/platform/Property")
@Api(description = "Exposes APIs to work with Property resource.", value = "PropertyController")
public class PropertyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyController.class);

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @Autowired
    @Qualifier("platform.AssessmentService")
    private AssessmentService assessmentService;

    @Autowired
    @Qualifier("platform.UnderwritingService")
    private UnderwritingService underwritingService;

    @Autowired
    @Qualifier("platform.InspectionRouteService")
    private InspectionRouteService inspectionRouteService;

    @Autowired
    @Qualifier("platform.AuctionService")
    private AuctionService auctionService;

    @Autowired
    @Qualifier("platform.NoteService")
    private NoteService noteService;

    @Autowired
    @Qualifier("platform.AvailableSubsService")
    private AvailableSubsService availableSubsService;

    @Autowired
    @Qualifier("platform.PropertySaleService")
    private PropertySaleService propertySaleService;

    @Autowired
    @Qualifier("platform.TaxHistoryService")
    private TaxHistoryService taxHistoryService;

    @Autowired
    @Qualifier("platform.TitleTransactionService")
    private TitleTransactionService titleTransactionService;

    @Autowired
    @Qualifier("platform.ResearchService")
    private ResearchService researchService;

    @Autowired
    @Qualifier("platform.CertificateService")
    private CertificateService certificateService;

    @Autowired
    @Qualifier("platform.InspectionService")
    private InspectionService inspectionService;

    @Autowired
    @Qualifier("platform.AuctionResultService")
    private AuctionResultService auctionResultService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Property instances matching the search criteria.")
    public Page<Property> findPropertys(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Propertys list");
        return propertyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Property instances.")
    public Page<Property> getPropertys(Pageable pageable) {
        LOGGER.debug("Rendering Propertys list");
        return propertyService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctionResults", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctionResults instance associated with the given id.")
    public Page<AuctionResult> findAssociatedauctionResults(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctionResults");
        return auctionResultService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/assessments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the assessments instance associated with the given id.")
    public Page<Assessment> findAssociatedassessments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assessments");
        return assessmentService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctions instance associated with the given id.")
    public Page<Auction> findAssociatedauctions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctions");
        return auctionService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/underwritings", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the underwritings instance associated with the given id.")
    public Page<Underwriting> findAssociatedunderwritings(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated underwritings");
        return underwritingService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/researches", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the researches instance associated with the given id.")
    public Page<Research> findAssociatedresearches(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated researches");
        return researchService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/titleTransactions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the titleTransactions instance associated with the given id.")
    public Page<TitleTransaction> findAssociatedtitleTransactions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated titleTransactions");
        return titleTransactionService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/propertySales", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the propertySales instance associated with the given id.")
    public Page<PropertySale> findAssociatedpropertySales(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated propertySales");
        return propertySaleService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/availableSubses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the availableSubses instance associated with the given id.")
    public Page<AvailableSubs> findAssociatedavailableSubses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated availableSubses");
        return availableSubsService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/inspectionRoutes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionRoutes instance associated with the given id.")
    public Page<InspectionRoute> findAssociatedinspectionRoutes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated inspectionRoutes");
        return inspectionRouteService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/taxHistories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the taxHistories instance associated with the given id.")
    public Page<TaxHistory> findAssociatedtaxHistories(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated taxHistories");
        return taxHistoryService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/inspections", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inspections instance associated with the given id.")
    public Page<Inspection> findAssociatedinspections(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated inspections");
        return inspectionService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/propertiesForReplacedBy", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the propertiesForReplacedBy instance associated with the given id.")
    public Page<Property> findAssociatedpropertiesForReplacedBy(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated propertiesForReplacedBy");
        return propertyService.findAssociatedValues(id, "propertyByReplacedBy", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/notes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    public Page<Note> findAssociatednotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated notes");
        return noteService.findAssociatedValues(id, "property", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificates", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificates instance associated with the given id.")
    public Page<Certificate> findAssociatedcertificates(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated certificates");
        return certificateService.findAssociatedValues(id, "property", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPropertyService(PropertyService service) {
        this.propertyService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Property instance.")
    public Property createProperty(@RequestBody Property instance) {
        LOGGER.debug("Create Property with information: {}", instance);
        instance = propertyService.create(instance);
        LOGGER.debug("Created Property with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Property instances.")
    public Long countAllPropertys() {
        LOGGER.debug("counting Propertys");
        Long count = propertyService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Property instance associated with the given id.")
    public Property getProperty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Property with id: {}", id);
        Property instance = propertyService.findById(id);
        LOGGER.debug("Property details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Property instance associated with the given id.")
    public Property editProperty(@PathVariable(value = "id") Integer id, @RequestBody Property instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Property with id: {}", instance.getId());
        instance.setId(id);
        instance = propertyService.update(instance);
        LOGGER.debug("Property details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Property instance associated with the given id.")
    public boolean deleteProperty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Property with id: {}", id);
        Property deleted = propertyService.delete(id);
        return deleted != null;
    }
}
