/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.portal.platform.NumberTable;
import com.portal.platform.service.NumberTableService;


/**
 * Controller object for domain model class NumberTable.
 * @see NumberTable
 */
@RestController("platform.NumberTableController")
@Api(value = "/platform/NumberTable", description = "Exposes APIs to work with NumberTable resource.")
@RequestMapping("/platform/NumberTable")
public class NumberTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NumberTableController.class);

    @Autowired
	@Qualifier("platform.NumberTableService")
	private NumberTableService numberTableService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new NumberTable instance.")
	public NumberTable createNumberTable(@RequestBody NumberTable numbertable) {
		LOGGER.debug("Create NumberTable with information: {}" , numbertable);

		numbertable = numberTableService.create(numbertable);
		LOGGER.debug("Created NumberTable with information: {}" , numbertable);

	    return numbertable;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the NumberTable instance associated with the given id.")
    public NumberTable getNumberTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting NumberTable with id: {}" , id);

        NumberTable foundNumberTable = numberTableService.getById(id);
        LOGGER.debug("NumberTable details with id: {}" , foundNumberTable);

        return foundNumberTable;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the NumberTable instance associated with the given id.")
    public NumberTable editNumberTable(@PathVariable("id") Integer id, @RequestBody NumberTable numbertable) throws EntityNotFoundException {
        LOGGER.debug("Editing NumberTable with id: {}" , numbertable.getNumber());

        numbertable.setNumber(id);
        numbertable = numberTableService.update(numbertable);
        LOGGER.debug("NumberTable details with id: {}" , numbertable);

        return numbertable;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the NumberTable instance associated with the given id.")
    public boolean deleteNumberTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting NumberTable with id: {}" , id);

        NumberTable deletedNumberTable = numberTableService.delete(id);

        return deletedNumberTable != null;
    }
    /**
     * @deprecated Use {@link #findNumberTables(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of NumberTable instances matching the search criteria.")
	public Page<NumberTable> findNumberTables( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering NumberTables list");
		return numberTableService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of NumberTable instances matching the search criteria.")
    public Page<NumberTable> findNumberTables(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NumberTables list");
    	return numberTableService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportNumberTables(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return numberTableService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of NumberTable instances.")
	public Long countNumberTables(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NumberTables");
		return numberTableService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NumberTableService instance
	 */
	protected void setNumberTableService(NumberTableService service) {
		this.numberTableService = service;
	}

}

