/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.NumberTableService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class NumberTable.
 * @see com.portal.platform.NumberTable
 */
@RestController(value = "Platform.NumberTableController")
@RequestMapping("/platform/NumberTable")
@Api(description = "Exposes APIs to work with NumberTable resource.", value = "NumberTableController")
public class NumberTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NumberTableController.class);

    @Autowired
    @Qualifier("platform.NumberTableService")
    private NumberTableService numberTableService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of NumberTable instances matching the search criteria.")
    public Page<NumberTable> findNumberTables(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NumberTables list");
        return numberTableService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of NumberTable instances.")
    public Page<NumberTable> getNumberTables(Pageable pageable) {
        LOGGER.debug("Rendering NumberTables list");
        return numberTableService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setNumberTableService(NumberTableService service) {
        this.numberTableService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new NumberTable instance.")
    public NumberTable createNumberTable(@RequestBody NumberTable instance) {
        LOGGER.debug("Create NumberTable with information: {}", instance);
        instance = numberTableService.create(instance);
        LOGGER.debug("Created NumberTable with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of NumberTable instances.")
    public Long countAllNumberTables() {
        LOGGER.debug("counting NumberTables");
        Long count = numberTableService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the NumberTable instance associated with the given id.")
    public NumberTable getNumberTable(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting NumberTable with id: {}", id);
        NumberTable instance = numberTableService.findById(id);
        LOGGER.debug("NumberTable details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the NumberTable instance associated with the given id.")
    public NumberTable editNumberTable(@PathVariable(value = "id") Integer id, @RequestBody NumberTable instance) throws EntityNotFoundException {
        LOGGER.debug("Editing NumberTable with id: {}", instance.getNumber());
        instance.setNumber(id);
        instance = numberTableService.update(instance);
        LOGGER.debug("NumberTable details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the NumberTable instance associated with the given id.")
    public boolean deleteNumberTable(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting NumberTable with id: {}", id);
        NumberTable deleted = numberTableService.delete(id);
        return deleted != null;
    }
}
