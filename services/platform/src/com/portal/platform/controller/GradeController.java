/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Grade;
import com.portal.platform.Note;
import com.portal.platform.Property;
import com.portal.platform.service.GradeService;
import com.portal.platform.service.NoteService;
import com.portal.platform.service.PropertyService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Grade.
 * @see Grade
 */
@RestController("platform.GradeController")
@RequestMapping("/platform/Grade")
@Api(description = "Exposes APIs to work with Grade resource.", value = "GradeController")
public class GradeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GradeController.class);

    @Autowired
    @Qualifier("platform.GradeService")
    private GradeService gradeService;

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @Autowired
    @Qualifier("platform.NoteService")
    private NoteService noteService;

    /**
     * @deprecated Use {@link #findGrades(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Grade instances matching the search criteria.")
    public Page<Grade> findGrades(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Grades list");
        return gradeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Grade instances matching the search criteria.")
    public Page<Grade> findGrades(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Grades list");
        return gradeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportGrades(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return gradeService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/notes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    public Page<Note> findAssociatedNotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated notes");
        return noteService.findAssociatedValues(id, "grade", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/properties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    public Page<Property> findAssociatedProperties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated properties");
        return propertyService.findAssociatedValues(id, "grade", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GradeService instance
	 */
    protected void setGradeService(GradeService service) {
        this.gradeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyService instance
	 */
    protected void setPropertyService(PropertyService service) {
        this.propertyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NoteService instance
	 */
    protected void setNoteService(NoteService service) {
        this.noteService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Grade instances.")
    public Long countGrades(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Grades");
        return gradeService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Grade instance associated with the given id.")
    public Grade getGrade(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Grade with id: {}", id);
        Grade foundGrade = gradeService.getById(id);
        LOGGER.debug("Grade details with id: {}", foundGrade);
        return foundGrade;
    }
}
