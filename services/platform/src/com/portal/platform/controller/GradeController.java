/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.GradeService;
import com.portal.platform.service.NoteService;
import com.portal.platform.service.PropertyService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Grade.
 * @see com.portal.platform.Grade
 */
@RestController(value = "Platform.GradeController")
@RequestMapping("/platform/Grade")
@Api(description = "Exposes APIs to work with Grade resource.", value = "GradeController")
public class GradeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GradeController.class);

    @Autowired
    @Qualifier("platform.GradeService")
    private GradeService gradeService;

    @Autowired
    @Qualifier("platform.NoteService")
    private NoteService noteService;

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Grade instances matching the search criteria.")
    public Page<Grade> findGrades(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Grades list");
        return gradeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Grade instances.")
    public Page<Grade> getGrades(Pageable pageable) {
        LOGGER.debug("Rendering Grades list");
        return gradeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/properties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    public Page<Property> findAssociatedproperties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated properties");
        return propertyService.findAssociatedValues(id, "grade", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/notes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    public Page<Note> findAssociatednotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated notes");
        return noteService.findAssociatedValues(id, "grade", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setGradeService(GradeService service) {
        this.gradeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Grade instance.")
    public Grade createGrade(@RequestBody Grade instance) {
        LOGGER.debug("Create Grade with information: {}", instance);
        instance = gradeService.create(instance);
        LOGGER.debug("Created Grade with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Grade instances.")
    public Long countAllGrades() {
        LOGGER.debug("counting Grades");
        Long count = gradeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Grade instance associated with the given id.")
    public Grade getGrade(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Grade with id: {}", id);
        Grade instance = gradeService.findById(id);
        LOGGER.debug("Grade details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Grade instance associated with the given id.")
    public Grade editGrade(@PathVariable(value = "id") Integer id, @RequestBody Grade instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Grade with id: {}", instance.getId());
        instance.setId(id);
        instance = gradeService.update(instance);
        LOGGER.debug("Grade details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Grade instance associated with the given id.")
    public boolean deleteGrade(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Grade with id: {}", id);
        Grade deleted = gradeService.delete(id);
        return deleted != null;
    }
}
