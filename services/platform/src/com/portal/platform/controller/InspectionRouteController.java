/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.InspectionRouteService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class InspectionRoute.
 * @see com.portal.platform.InspectionRoute
 */
@RestController(value = "Platform.InspectionRouteController")
@RequestMapping("/platform/InspectionRoute")
@Api(description = "Exposes APIs to work with InspectionRoute resource.", value = "InspectionRouteController")
public class InspectionRouteController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionRouteController.class);

    @Autowired
    @Qualifier("platform.InspectionRouteService")
    private InspectionRouteService inspectionRouteService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of InspectionRoute instances matching the search criteria.")
    public Page<InspectionRoute> findInspectionRoutes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InspectionRoutes list");
        return inspectionRouteService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of InspectionRoute instances.")
    public Page<InspectionRoute> getInspectionRoutes(Pageable pageable) {
        LOGGER.debug("Rendering InspectionRoutes list");
        return inspectionRouteService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setInspectionRouteService(InspectionRouteService service) {
        this.inspectionRouteService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new InspectionRoute instance.")
    public InspectionRoute createInspectionRoute(@RequestBody InspectionRoute instance) {
        LOGGER.debug("Create InspectionRoute with information: {}", instance);
        instance = inspectionRouteService.create(instance);
        LOGGER.debug("Created InspectionRoute with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of InspectionRoute instances.")
    public Long countAllInspectionRoutes() {
        LOGGER.debug("counting InspectionRoutes");
        Long count = inspectionRouteService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the InspectionRoute instance associated with the given id.")
    public InspectionRoute getInspectionRoute(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting InspectionRoute with id: {}", id);
        InspectionRoute instance = inspectionRouteService.findById(id);
        LOGGER.debug("InspectionRoute details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the InspectionRoute instance associated with the given id.")
    public InspectionRoute editInspectionRoute(@PathVariable(value = "id") Integer id, @RequestBody InspectionRoute instance) throws EntityNotFoundException {
        LOGGER.debug("Editing InspectionRoute with id: {}", instance.getId());
        instance.setId(id);
        instance = inspectionRouteService.update(instance);
        LOGGER.debug("InspectionRoute details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the InspectionRoute instance associated with the given id.")
    public boolean deleteInspectionRoute(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionRoute with id: {}", id);
        InspectionRoute deleted = inspectionRouteService.delete(id);
        return deleted != null;
    }
}
