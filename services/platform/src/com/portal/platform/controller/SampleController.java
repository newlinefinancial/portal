/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.portal.platform.Sample;
import com.portal.platform.service.SampleService;


/**
 * Controller object for domain model class Sample.
 * @see Sample
 */
@RestController("platform.SampleController")
@Api(value = "/platform/Sample", description = "Exposes APIs to work with Sample resource.")
@RequestMapping("/platform/Sample")
public class SampleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SampleController.class);

    @Autowired
	@Qualifier("platform.SampleService")
	private SampleService sampleService;



    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Sample instance associated with the given id.")
    public Sample getSample(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Sample with id: {}" , id);

        Sample foundSample = sampleService.getById(id);
        LOGGER.debug("Sample details with id: {}" , foundSample);

        return foundSample;
    }

    /**
     * @deprecated Use {@link #findSamples(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Sample instances matching the search criteria.")
	public Page<Sample> findSamples( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Samples list");
		return sampleService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Sample instances matching the search criteria.")
    public Page<Sample> findSamples(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Samples list");
    	return sampleService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportSamples(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sampleService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Sample instances.")
	public Long countSamples(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Samples");
		return sampleService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SampleService instance
	 */
	protected void setSampleService(SampleService service) {
		this.sampleService = service;
	}

}

