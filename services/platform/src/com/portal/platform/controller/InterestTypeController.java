/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.CertificateParty;
import com.portal.platform.InterestType;
import com.portal.platform.service.CertificatePartyService;
import com.portal.platform.service.InterestTypeService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class InterestType.
 * @see InterestType
 */
@RestController("platform.InterestTypeController")
@RequestMapping("/platform/InterestType")
@Api(description = "Exposes APIs to work with InterestType resource.", value = "InterestTypeController")
public class InterestTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InterestTypeController.class);

    @Autowired
    @Qualifier("platform.InterestTypeService")
    private InterestTypeService interestTypeService;

    @Autowired
    @Qualifier("platform.CertificatePartyService")
    private CertificatePartyService certificatePartyService;

    /**
     * @deprecated Use {@link #findInterestTypes(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of InterestType instances matching the search criteria.")
    public Page<InterestType> findInterestTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InterestTypes list");
        return interestTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of InterestType instances matching the search criteria.")
    public Page<InterestType> findInterestTypes(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InterestTypes list");
        return interestTypeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportInterestTypes(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return interestTypeService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificatePartiesForInterestType3", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificatePartiesForInterestType3 instance associated with the given id.")
    public Page<CertificateParty> findAssociatedCertificatePartiesForInterestType3(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated certificatePartiesForInterestType3");
        return certificatePartyService.findAssociatedValues(id, "interestTypeByInterestType3", "code", pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificatePartiesForInterestType2", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificatePartiesForInterestType2 instance associated with the given id.")
    public Page<CertificateParty> findAssociatedCertificatePartiesForInterestType2(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated certificatePartiesForInterestType2");
        return certificatePartyService.findAssociatedValues(id, "interestTypeByInterestType2", "code", pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificatePartiesForInterestType1", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificatePartiesForInterestType1 instance associated with the given id.")
    public Page<CertificateParty> findAssociatedCertificatePartiesForInterestType1(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated certificatePartiesForInterestType1");
        return certificatePartyService.findAssociatedValues(id, "interestTypeByInterestType1", "code", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InterestTypeService instance
	 */
    protected void setInterestTypeService(InterestTypeService service) {
        this.interestTypeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CertificatePartyService instance
	 */
    protected void setCertificatePartyService(CertificatePartyService service) {
        this.certificatePartyService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of InterestType instances.")
    public Long countInterestTypes(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting InterestTypes");
        return interestTypeService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the InterestType instance associated with the given id.")
    public InterestType getInterestType(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting InterestType with id: {}", id);
        InterestType foundInterestType = interestTypeService.getById(id);
        LOGGER.debug("InterestType details with id: {}", foundInterestType);
        return foundInterestType;
    }
}
