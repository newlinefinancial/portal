/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.InterestTypeService;
import com.portal.platform.service.MatterPartyService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class InterestType.
 * @see com.portal.platform.InterestType
 */
@RestController(value = "Platform.InterestTypeController")
@RequestMapping("/platform/InterestType")
@Api(description = "Exposes APIs to work with InterestType resource.", value = "InterestTypeController")
public class InterestTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InterestTypeController.class);

    @Autowired
    @Qualifier("platform.InterestTypeService")
    private InterestTypeService interestTypeService;

    @Autowired
    @Qualifier("platform.MatterPartyService")
    private MatterPartyService matterPartyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of InterestType instances matching the search criteria.")
    public Page<InterestType> findInterestTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InterestTypes list");
        return interestTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of InterestType instances.")
    public Page<InterestType> getInterestTypes(Pageable pageable) {
        LOGGER.debug("Rendering InterestTypes list");
        return interestTypeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/matterPartiesForInterestType1", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the matterPartiesForInterestType1 instance associated with the given id.")
    public Page<MatterParty> findAssociatedmatterPartiesForInterestType1(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated matterPartiesForInterestType1");
        return matterPartyService.findAssociatedValues(id, "interestTypeByInterestType3", "code", pageable);
    }

    @RequestMapping(value = "/{id:.+}/matterPartiesForInterestType3", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the matterPartiesForInterestType3 instance associated with the given id.")
    public Page<MatterParty> findAssociatedmatterPartiesForInterestType3(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated matterPartiesForInterestType3");
        return matterPartyService.findAssociatedValues(id, "interestTypeByInterestType3", "code", pageable);
    }

    @RequestMapping(value = "/{id:.+}/matterPartiesForInterestType2", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the matterPartiesForInterestType2 instance associated with the given id.")
    public Page<MatterParty> findAssociatedmatterPartiesForInterestType2(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated matterPartiesForInterestType2");
        return matterPartyService.findAssociatedValues(id, "interestTypeByInterestType3", "code", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setInterestTypeService(InterestTypeService service) {
        this.interestTypeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new InterestType instance.")
    public InterestType createInterestType(@RequestBody InterestType instance) {
        LOGGER.debug("Create InterestType with information: {}", instance);
        instance = interestTypeService.create(instance);
        LOGGER.debug("Created InterestType with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of InterestType instances.")
    public Long countAllInterestTypes() {
        LOGGER.debug("counting InterestTypes");
        Long count = interestTypeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the InterestType instance associated with the given id.")
    public InterestType getInterestType(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting InterestType with id: {}", id);
        InterestType instance = interestTypeService.findById(id);
        LOGGER.debug("InterestType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the InterestType instance associated with the given id.")
    public InterestType editInterestType(@PathVariable(value = "id") String id, @RequestBody InterestType instance) throws EntityNotFoundException {
        LOGGER.debug("Editing InterestType with id: {}", instance.getCode());
        instance.setCode(id);
        instance = interestTypeService.update(instance);
        LOGGER.debug("InterestType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the InterestType instance associated with the given id.")
    public boolean deleteInterestType(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InterestType with id: {}", id);
        InterestType deleted = interestTypeService.delete(id);
        return deleted != null;
    }
}
