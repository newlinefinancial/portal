/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.TitleTransactionService;
import com.portal.platform.service.TitleTypeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TitleType.
 * @see com.portal.platform.TitleType
 */
@RestController(value = "Platform.TitleTypeController")
@RequestMapping("/platform/TitleType")
@Api(description = "Exposes APIs to work with TitleType resource.", value = "TitleTypeController")
public class TitleTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TitleTypeController.class);

    @Autowired
    @Qualifier("platform.TitleTypeService")
    private TitleTypeService titleTypeService;

    @Autowired
    @Qualifier("platform.TitleTransactionService")
    private TitleTransactionService titleTransactionService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TitleType instances matching the search criteria.")
    public Page<TitleType> findTitleTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TitleTypes list");
        return titleTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TitleType instances.")
    public Page<TitleType> getTitleTypes(Pageable pageable) {
        LOGGER.debug("Rendering TitleTypes list");
        return titleTypeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/titleTransactions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the titleTransactions instance associated with the given id.")
    public Page<TitleTransaction> findAssociatedtitleTransactions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated titleTransactions");
        return titleTransactionService.findAssociatedValues(id, "titleTypeByTitleType", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTitleTypeService(TitleTypeService service) {
        this.titleTypeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TitleType instance.")
    public TitleType createTitleType(@RequestBody TitleType instance) {
        LOGGER.debug("Create TitleType with information: {}", instance);
        instance = titleTypeService.create(instance);
        LOGGER.debug("Created TitleType with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TitleType instances.")
    public Long countAllTitleTypes() {
        LOGGER.debug("counting TitleTypes");
        Long count = titleTypeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TitleType instance associated with the given id.")
    public TitleType getTitleType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TitleType with id: {}", id);
        TitleType instance = titleTypeService.findById(id);
        LOGGER.debug("TitleType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TitleType instance associated with the given id.")
    public TitleType editTitleType(@PathVariable(value = "id") Integer id, @RequestBody TitleType instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TitleType with id: {}", instance.getId());
        instance.setId(id);
        instance = titleTypeService.update(instance);
        LOGGER.debug("TitleType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TitleType instance associated with the given id.")
    public boolean deleteTitleType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TitleType with id: {}", id);
        TitleType deleted = titleTypeService.delete(id);
        return deleted != null;
    }
}
