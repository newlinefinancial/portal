/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalMatterDataService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalMatterData.
 * @see com.portal.platform.PortalMatterData
 */
@RestController(value = "Platform.PortalMatterDataController")
@RequestMapping("/platform/PortalMatterData")
@Api(description = "Exposes APIs to work with PortalMatterData resource.", value = "PortalMatterDataController")
public class PortalMatterDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalMatterDataController.class);

    @Autowired
    @Qualifier("platform.PortalMatterDataService")
    private PortalMatterDataService portalMatterDataService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalMatterData instances matching the search criteria.")
    public Page<PortalMatterData> findPortalMatterDatas(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalMatterDatas list");
        return portalMatterDataService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalMatterData instances.")
    public Page<PortalMatterData> getPortalMatterDatas(Pageable pageable) {
        LOGGER.debug("Rendering PortalMatterDatas list");
        return portalMatterDataService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalMatterDataService(PortalMatterDataService service) {
        this.portalMatterDataService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalMatterData instance.")
    public PortalMatterData createPortalMatterData(@RequestBody PortalMatterData instance) {
        LOGGER.debug("Create PortalMatterData with information: {}", instance);
        instance = portalMatterDataService.create(instance);
        LOGGER.debug("Created PortalMatterData with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalMatterData instance associated with the given composite-id.")
    public PortalMatterData getPortalMatterData(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "header", required = true) String header, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "matterId", required = true) Integer matterId, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "filedDate", required = true) Date filedDate, @RequestParam(value = "lastWorkDate", required = true) Date lastWorkDate, @RequestParam(value = "initialCourtDate", required = true) Date initialCourtDate, @RequestParam(value = "closedDate", required = true) Date closedDate, @RequestParam(value = "addressOverride", required = true) String addressOverride, @RequestParam(value = "pinOverride", required = true) String pinOverride, @RequestParam(value = "piqAddress", required = true) String piqAddress, @RequestParam(value = "piqCity", required = true) String piqCity, @RequestParam(value = "piqState", required = true) String piqState, @RequestParam(value = "piqZip", required = true) String piqZip, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "finalPin", required = true) String finalPin) throws EntityNotFoundException {
        PortalMatterDataId temp = new PortalMatterDataId();
        temp.setCertificateId(certificateId);
        temp.setPropertyId(propertyId);
        temp.setHeader(header);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setDateSold(dateSold);
        temp.setStatus(status);
        temp.setExpirationDate(expirationDate);
        temp.setCountyName(countyName);
        temp.setVolume(volume);
        temp.setTaxYearNotices(taxYearNotices);
        temp.setMatterId(matterId);
        temp.setMatterNumber(matterNumber);
        temp.setFiledDate(filedDate);
        temp.setLastWorkDate(lastWorkDate);
        temp.setInitialCourtDate(initialCourtDate);
        temp.setClosedDate(closedDate);
        temp.setAddressOverride(addressOverride);
        temp.setPinOverride(pinOverride);
        temp.setPiqAddress(piqAddress);
        temp.setPiqCity(piqCity);
        temp.setPiqState(piqState);
        temp.setPiqZip(piqZip);
        temp.setPin(pin);
        temp.setAddressSource1(addressSource1);
        temp.setAddressSource2(addressSource2);
        temp.setFinalPin(finalPin);
        LOGGER.debug("Getting PortalMatterData with id: {}", temp);
        PortalMatterData instance = portalMatterDataService.findById(temp);
        LOGGER.debug("PortalMatterData details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalMatterData instance associated with the given composite-id.")
    public PortalMatterData editPortalMatterData(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "header", required = true) String header, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "matterId", required = true) Integer matterId, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "filedDate", required = true) Date filedDate, @RequestParam(value = "lastWorkDate", required = true) Date lastWorkDate, @RequestParam(value = "initialCourtDate", required = true) Date initialCourtDate, @RequestParam(value = "closedDate", required = true) Date closedDate, @RequestParam(value = "addressOverride", required = true) String addressOverride, @RequestParam(value = "pinOverride", required = true) String pinOverride, @RequestParam(value = "piqAddress", required = true) String piqAddress, @RequestParam(value = "piqCity", required = true) String piqCity, @RequestParam(value = "piqState", required = true) String piqState, @RequestParam(value = "piqZip", required = true) String piqZip, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "finalPin", required = true) String finalPin, @RequestBody PortalMatterData instance) throws EntityNotFoundException {
        PortalMatterDataId temp = new PortalMatterDataId();
        temp.setCertificateId(certificateId);
        temp.setPropertyId(propertyId);
        temp.setHeader(header);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setDateSold(dateSold);
        temp.setStatus(status);
        temp.setExpirationDate(expirationDate);
        temp.setCountyName(countyName);
        temp.setVolume(volume);
        temp.setTaxYearNotices(taxYearNotices);
        temp.setMatterId(matterId);
        temp.setMatterNumber(matterNumber);
        temp.setFiledDate(filedDate);
        temp.setLastWorkDate(lastWorkDate);
        temp.setInitialCourtDate(initialCourtDate);
        temp.setClosedDate(closedDate);
        temp.setAddressOverride(addressOverride);
        temp.setPinOverride(pinOverride);
        temp.setPiqAddress(piqAddress);
        temp.setPiqCity(piqCity);
        temp.setPiqState(piqState);
        temp.setPiqZip(piqZip);
        temp.setPin(pin);
        temp.setAddressSource1(addressSource1);
        temp.setAddressSource2(addressSource2);
        temp.setFinalPin(finalPin);
        portalMatterDataService.delete(temp);
        instance = portalMatterDataService.create(instance);
        LOGGER.debug("PortalMatterData details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalMatterData instance associated with the given composite-id.")
    public boolean deletePortalMatterData(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "header", required = true) String header, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "matterId", required = true) Integer matterId, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "filedDate", required = true) Date filedDate, @RequestParam(value = "lastWorkDate", required = true) Date lastWorkDate, @RequestParam(value = "initialCourtDate", required = true) Date initialCourtDate, @RequestParam(value = "closedDate", required = true) Date closedDate, @RequestParam(value = "addressOverride", required = true) String addressOverride, @RequestParam(value = "pinOverride", required = true) String pinOverride, @RequestParam(value = "piqAddress", required = true) String piqAddress, @RequestParam(value = "piqCity", required = true) String piqCity, @RequestParam(value = "piqState", required = true) String piqState, @RequestParam(value = "piqZip", required = true) String piqZip, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "finalPin", required = true) String finalPin) throws EntityNotFoundException {
        PortalMatterDataId temp = new PortalMatterDataId();
        temp.setCertificateId(certificateId);
        temp.setPropertyId(propertyId);
        temp.setHeader(header);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setDateSold(dateSold);
        temp.setStatus(status);
        temp.setExpirationDate(expirationDate);
        temp.setCountyName(countyName);
        temp.setVolume(volume);
        temp.setTaxYearNotices(taxYearNotices);
        temp.setMatterId(matterId);
        temp.setMatterNumber(matterNumber);
        temp.setFiledDate(filedDate);
        temp.setLastWorkDate(lastWorkDate);
        temp.setInitialCourtDate(initialCourtDate);
        temp.setClosedDate(closedDate);
        temp.setAddressOverride(addressOverride);
        temp.setPinOverride(pinOverride);
        temp.setPiqAddress(piqAddress);
        temp.setPiqCity(piqCity);
        temp.setPiqState(piqState);
        temp.setPiqZip(piqZip);
        temp.setPin(pin);
        temp.setAddressSource1(addressSource1);
        temp.setAddressSource2(addressSource2);
        temp.setFinalPin(finalPin);
        LOGGER.debug("Deleting PortalMatterData with id: {}", temp);
        PortalMatterData deleted = portalMatterDataService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalMatterData instances.")
    public Long countAllPortalMatterDatas() {
        LOGGER.debug("counting PortalMatterDatas");
        Long count = portalMatterDataService.countAll();
        return count;
    }
}
