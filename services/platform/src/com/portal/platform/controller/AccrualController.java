/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AccrualService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Accrual.
 * @see com.portal.platform.Accrual
 */
@RestController(value = "Platform.AccrualController")
@RequestMapping("/platform/Accrual")
@Api(description = "Exposes APIs to work with Accrual resource.", value = "AccrualController")
public class AccrualController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccrualController.class);

    @Autowired
    @Qualifier("platform.AccrualService")
    private AccrualService accrualService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Accrual instances matching the search criteria.")
    public Page<Accrual> findAccruals(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Accruals list");
        return accrualService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Accrual instances.")
    public Page<Accrual> getAccruals(Pageable pageable) {
        LOGGER.debug("Rendering Accruals list");
        return accrualService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setAccrualService(AccrualService service) {
        this.accrualService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Accrual instance.")
    public Accrual createAccrual(@RequestBody Accrual instance) {
        LOGGER.debug("Create Accrual with information: {}", instance);
        instance = accrualService.create(instance);
        LOGGER.debug("Created Accrual with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Accrual instances.")
    public Long countAllAccruals() {
        LOGGER.debug("counting Accruals");
        Long count = accrualService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Accrual instance associated with the given id.")
    public Accrual getAccrual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Accrual with id: {}", id);
        Accrual instance = accrualService.findById(id);
        LOGGER.debug("Accrual details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Accrual instance associated with the given id.")
    public Accrual editAccrual(@PathVariable(value = "id") Integer id, @RequestBody Accrual instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Accrual with id: {}", instance.getId());
        instance.setId(id);
        instance = accrualService.update(instance);
        LOGGER.debug("Accrual details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Accrual instance associated with the given id.")
    public boolean deleteAccrual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Accrual with id: {}", id);
        Accrual deleted = accrualService.delete(id);
        return deleted != null;
    }
}
