/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AccrualService;
import com.portal.platform.service.PaymentService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Payment.
 * @see com.portal.platform.Payment
 */
@RestController(value = "Platform.PaymentController")
@RequestMapping("/platform/Payment")
@Api(description = "Exposes APIs to work with Payment resource.", value = "PaymentController")
public class PaymentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentController.class);

    @Autowired
    @Qualifier("platform.PaymentService")
    private PaymentService paymentService;

    @Autowired
    @Qualifier("platform.AccrualService")
    private AccrualService accrualService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Payment instances matching the search criteria.")
    public Page<Payment> findPayments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Payments list");
        return paymentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Payment instances.")
    public Page<Payment> getPayments(Pageable pageable) {
        LOGGER.debug("Rendering Payments list");
        return paymentService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/accruals", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the accruals instance associated with the given id.")
    public Page<Accrual> findAssociatedaccruals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated accruals");
        return accrualService.findAssociatedValues(id, "payment", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPaymentService(PaymentService service) {
        this.paymentService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Payment instance.")
    public Payment createPayment(@RequestBody Payment instance) {
        LOGGER.debug("Create Payment with information: {}", instance);
        instance = paymentService.create(instance);
        LOGGER.debug("Created Payment with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Payment instances.")
    public Long countAllPayments() {
        LOGGER.debug("counting Payments");
        Long count = paymentService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Payment instance associated with the given id.")
    public Payment getPayment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Payment with id: {}", id);
        Payment instance = paymentService.findById(id);
        LOGGER.debug("Payment details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Payment instance associated with the given id.")
    public Payment editPayment(@PathVariable(value = "id") Integer id, @RequestBody Payment instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Payment with id: {}", instance.getId());
        instance.setId(id);
        instance = paymentService.update(instance);
        LOGGER.debug("Payment details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Payment instance associated with the given id.")
    public boolean deletePayment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Payment with id: {}", id);
        Payment deleted = paymentService.delete(id);
        return deleted != null;
    }
}
