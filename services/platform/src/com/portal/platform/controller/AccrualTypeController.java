/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Accrual;
import com.portal.platform.AccrualType;
import com.portal.platform.service.AccrualService;
import com.portal.platform.service.AccrualTypeService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AccrualType.
 * @see AccrualType
 */
@RestController("platform.AccrualTypeController")
@RequestMapping("/platform/AccrualType")
@Api(description = "Exposes APIs to work with AccrualType resource.", value = "AccrualTypeController")
public class AccrualTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccrualTypeController.class);

    @Autowired
    @Qualifier("platform.AccrualTypeService")
    private AccrualTypeService accrualTypeService;

    @Autowired
    @Qualifier("platform.AccrualService")
    private AccrualService accrualService;

    /**
     * @deprecated Use {@link #findAccrualTypes(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AccrualType instances matching the search criteria.")
    public Page<AccrualType> findAccrualTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccrualTypes list");
        return accrualTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AccrualType instances matching the search criteria.")
    public Page<AccrualType> findAccrualTypes(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccrualTypes list");
        return accrualTypeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAccrualTypes(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return accrualTypeService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/accruals", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the accruals instance associated with the given id.")
    public Page<Accrual> findAssociatedAccruals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated accruals");
        return accrualService.findAssociatedValues(id, "accrualType", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccrualTypeService instance
	 */
    protected void setAccrualTypeService(AccrualTypeService service) {
        this.accrualTypeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccrualService instance
	 */
    protected void setAccrualService(AccrualService service) {
        this.accrualService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AccrualType instances.")
    public Long countAccrualTypes(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AccrualTypes");
        return accrualTypeService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AccrualType instance associated with the given id.")
    public AccrualType getAccrualType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AccrualType with id: {}", id);
        AccrualType foundAccrualType = accrualTypeService.getById(id);
        LOGGER.debug("AccrualType details with id: {}", foundAccrualType);
        return foundAccrualType;
    }
}
