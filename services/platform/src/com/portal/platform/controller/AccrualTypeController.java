/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AccrualService;
import com.portal.platform.service.AccrualTypeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AccrualType.
 * @see com.portal.platform.AccrualType
 */
@RestController(value = "Platform.AccrualTypeController")
@RequestMapping("/platform/AccrualType")
@Api(description = "Exposes APIs to work with AccrualType resource.", value = "AccrualTypeController")
public class AccrualTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccrualTypeController.class);

    @Autowired
    @Qualifier("platform.AccrualTypeService")
    private AccrualTypeService accrualTypeService;

    @Autowired
    @Qualifier("platform.AccrualService")
    private AccrualService accrualService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AccrualType instances matching the search criteria.")
    public Page<AccrualType> findAccrualTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccrualTypes list");
        return accrualTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AccrualType instances.")
    public Page<AccrualType> getAccrualTypes(Pageable pageable) {
        LOGGER.debug("Rendering AccrualTypes list");
        return accrualTypeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/accruals", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the accruals instance associated with the given id.")
    public Page<Accrual> findAssociatedaccruals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated accruals");
        return accrualService.findAssociatedValues(id, "accrualType", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setAccrualTypeService(AccrualTypeService service) {
        this.accrualTypeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AccrualType instance.")
    public AccrualType createAccrualType(@RequestBody AccrualType instance) {
        LOGGER.debug("Create AccrualType with information: {}", instance);
        instance = accrualTypeService.create(instance);
        LOGGER.debug("Created AccrualType with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AccrualType instances.")
    public Long countAllAccrualTypes() {
        LOGGER.debug("counting AccrualTypes");
        Long count = accrualTypeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AccrualType instance associated with the given id.")
    public AccrualType getAccrualType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AccrualType with id: {}", id);
        AccrualType instance = accrualTypeService.findById(id);
        LOGGER.debug("AccrualType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AccrualType instance associated with the given id.")
    public AccrualType editAccrualType(@PathVariable(value = "id") Integer id, @RequestBody AccrualType instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AccrualType with id: {}", instance.getId());
        instance.setId(id);
        instance = accrualTypeService.update(instance);
        LOGGER.debug("AccrualType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AccrualType instance associated with the given id.")
    public boolean deleteAccrualType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccrualType with id: {}", id);
        AccrualType deleted = accrualTypeService.delete(id);
        return deleted != null;
    }
}
