/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalInspection;
import com.portal.platform.PortalInspectionId;
import com.portal.platform.service.PortalInspectionService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalInspection.
 * @see PortalInspection
 */
@RestController("platform.PortalInspectionController")
@RequestMapping("/platform/PortalInspection")
@Api(description = "Exposes APIs to work with PortalInspection resource.", value = "PortalInspectionController")
public class PortalInspectionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalInspectionController.class);

    @Autowired
    @Qualifier("platform.PortalInspectionService")
    private PortalInspectionService portalInspectionService;

    /**
     * @deprecated Use {@link #findPortalInspections(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalInspection instances matching the search criteria.")
    public Page<PortalInspection> findPortalInspections(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalInspections list");
        return portalInspectionService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalInspection instances matching the search criteria.")
    public Page<PortalInspection> findPortalInspections(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalInspections list");
        return portalInspectionService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalInspections(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalInspectionService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalInspectionService instance
	 */
    protected void setPortalInspectionService(PortalInspectionService service) {
        this.portalInspectionService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalInspection instance associated with the given composite-id.")
    public PortalInspection getPortalInspection(@RequestParam(value = "propertyId", required = true) int propertyId, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "address1", required = true) String address1, @RequestParam(value = "addressCity1", required = true) String addressCity1, @RequestParam(value = "addressZip1", required = true) String addressZip1, @RequestParam(value = "latitude", required = true) Float latitude, @RequestParam(value = "longitude", required = true) Float longitude, @RequestParam(value = "assessor", required = true) String assessor, @RequestParam(value = "clerk", required = true) String clerk, @RequestParam(value = "gis", required = true) String gis, @RequestParam(value = "treasurer", required = true) String treasurer, @RequestParam(value = "recorder", required = true) String recorder, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "auctionId", required = true) int auctionId, @RequestParam(value = "underwritingStatus", required = true) String underwritingStatus) throws EntityNotFoundException {
        PortalInspectionId portalinspectionId = new PortalInspectionId();
        portalinspectionId.setPropertyId(propertyId);
        portalinspectionId.setPin(pin);
        portalinspectionId.setVolume(volume);
        portalinspectionId.setAddress1(address1);
        portalinspectionId.setAddressCity1(addressCity1);
        portalinspectionId.setAddressZip1(addressZip1);
        portalinspectionId.setLatitude(latitude);
        portalinspectionId.setLongitude(longitude);
        portalinspectionId.setAssessor(assessor);
        portalinspectionId.setClerk(clerk);
        portalinspectionId.setGis(gis);
        portalinspectionId.setTreasurer(treasurer);
        portalinspectionId.setRecorder(recorder);
        portalinspectionId.setCountyName(countyName);
        portalinspectionId.setTaxYear(taxYear);
        portalinspectionId.setAuctionId(auctionId);
        portalinspectionId.setUnderwritingStatus(underwritingStatus);
        LOGGER.debug("Getting PortalInspection with id: {}", portalinspectionId);
        PortalInspection portalinspection = portalInspectionService.getById(portalinspectionId);
        LOGGER.debug("PortalInspection details with id: {}", portalinspection);
        return portalinspection;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalInspection instances.")
    public Long countPortalInspections(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalInspections");
        return portalInspectionService.count(query);
    }
}
