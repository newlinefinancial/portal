/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalAddress;
import com.portal.platform.PortalAddressId;
import com.portal.platform.service.PortalAddressService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAddress.
 * @see PortalAddress
 */
@RestController("platform.PortalAddressController")
@RequestMapping("/platform/PortalAddress")
@Api(description = "Exposes APIs to work with PortalAddress resource.", value = "PortalAddressController")
public class PortalAddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAddressController.class);

    @Autowired
    @Qualifier("platform.PortalAddressService")
    private PortalAddressService portalAddressService;

    /**
     * @deprecated Use {@link #findPortalAddresses(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAddress instances matching the search criteria.")
    public Page<PortalAddress> findPortalAddresses(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAddresses list");
        return portalAddressService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAddress instances matching the search criteria.")
    public Page<PortalAddress> findPortalAddresses(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalAddresses list");
        return portalAddressService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalAddresses(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalAddressService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalAddressService instance
	 */
    protected void setPortalAddressService(PortalAddressService service) {
        this.portalAddressService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalAddress instance associated with the given composite-id.")
    public PortalAddress getPortalAddress(@RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "bank", required = true) String bank, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "volume", required = true) int volume, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "addressVerified", required = true) boolean addressVerified, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "zoning", required = true) String zoning, @RequestParam(value = "improvementLevel", required = true) String improvementLevel, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid) throws EntityNotFoundException {
        PortalAddressId portaladdressId = new PortalAddressId();
        portaladdressId.setCountyName(countyName);
        portaladdressId.setBank(bank);
        portaladdressId.setTaxYear(taxYear);
        portaladdressId.setVolume(volume);
        portaladdressId.setPin(pin);
        portaladdressId.setCertificateNumber(certificateNumber);
        portaladdressId.setDateSold(dateSold);
        portaladdressId.setExpirationDate(expirationDate);
        portaladdressId.setStatus(status);
        portaladdressId.setTaxYearNotices(taxYearNotices);
        portaladdressId.setAddressLine1(addressLine1);
        portaladdressId.setAddressLine2(addressLine2);
        portaladdressId.setAddressCity(addressCity);
        portaladdressId.setAddressZip(addressZip);
        portaladdressId.setAddressVerified(addressVerified);
        portaladdressId.setAddressSource1(addressSource1);
        portaladdressId.setAddressSource2(addressSource2);
        portaladdressId.setAssesseeName(assesseeName);
        portaladdressId.setAssesseeAddressLine1(assesseeAddressLine1);
        portaladdressId.setAssesseeAddressCity(assesseeAddressCity);
        portaladdressId.setAssesseeAddressState(assesseeAddressState);
        portaladdressId.setAssesseeAddressZip(assesseeAddressZip);
        portaladdressId.setCode(code);
        portaladdressId.setZoning(zoning);
        portaladdressId.setImprovementLevel(improvementLevel);
        portaladdressId.setCertificatePrincipal(certificatePrincipal);
        portaladdressId.setSubPrincipal(subPrincipal);
        portaladdressId.setFeePrincipal(feePrincipal);
        portaladdressId.setPrincipal(principal);
        portaladdressId.setCertificateRevenue(certificateRevenue);
        portaladdressId.setSubRevenue(subRevenue);
        portaladdressId.setFeeRevenue(feeRevenue);
        portaladdressId.setRevenue(revenue);
        portaladdressId.setRedemptionAmount(redemptionAmount);
        portaladdressId.setAmountPaid(amountPaid);
        LOGGER.debug("Getting PortalAddress with id: {}", portaladdressId);
        PortalAddress portaladdress = portalAddressService.getById(portaladdressId);
        LOGGER.debug("PortalAddress details with id: {}", portaladdress);
        return portaladdress;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalAddress instances.")
    public Long countPortalAddresses(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalAddresses");
        return portalAddressService.count(query);
    }
}
