package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Qualifier;
import com.portal.platform.service.PlatformQueryExecutorService;
import com.wavemaker.runtime.data.model.CustomQuery;
import com.wavemaker.runtime.data.exception.QueryParameterMismatchException;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController(value = "Platform.QueryExecutionController")
@RequestMapping("/platform/queryExecutor")
@Api(description = "Controller class for query execution", value = "QueryExecutionController")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private PlatformQueryExecutorService queryService;

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/inspection_drop_down", method = RequestMethod.GET)
    public Page<Object> executeInspection_drop_down(Pageable pageable) {
        LOGGER.debug("Executing named query inspection_drop_down");
        Page<Object> result = queryService.executeInspection_drop_down(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/qryPortalCertificateDataById", method = RequestMethod.GET)
    public Page<Object> executeQryPortalCertificateDataById(@RequestParam(value = "id", required = false) java.lang.Integer id, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query qryPortalCertificateDataById");
        Page<Object> result = queryService.executeQryPortalCertificateDataById(pageable, id);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/qryPortalInspectionFilterByID", method = RequestMethod.GET)
    public Page<Object> executeQryPortalInspectionFilterByID(@RequestParam(value = "property_id", required = false) java.lang.Integer property_id, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query qryPortalInspectionFilterByID");
        Page<Object> result = queryService.executeQryPortalInspectionFilterByID(pageable, property_id);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/qryPortalInspectionFilterByName", method = RequestMethod.GET)
    public Page<Object> executeQryPortalInspectionFilterByName(@RequestParam(value = "drop_down", required = false) java.lang.String drop_down, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query qryPortalInspectionFilterByName");
        Page<Object> result = queryService.executeQryPortalInspectionFilterByName(pageable, drop_down);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/qryPortalInspectFilterDataByDropDownId", method = RequestMethod.GET)
    public Page<Object> executeQryPortalInspectFilterDataByDropDownId(@RequestParam(value = "drop_down", required = false) java.lang.String drop_down, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query qryPortalInspectFilterDataByDropDownId");
        Page<Object> result = queryService.executeQryPortalInspectFilterDataByDropDownId(pageable, drop_down);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/qryPortalAuctionHistoryByPropertyID", method = RequestMethod.GET)
    public Page<Object> executeQryPortalAuctionHistoryByPropertyID(@RequestParam(value = "property_id", required = false) java.lang.Integer property_id, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query qryPortalAuctionHistoryByPropertyID");
        Page<Object> result = queryService.executeQryPortalAuctionHistoryByPropertyID(pageable, property_id);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/qryPortalAuctionNote", method = RequestMethod.GET)
    public Page<Object> executeQryPortalAuctionNote(@RequestParam(value = "property_id", required = false) java.lang.Integer property_id, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query qryPortalAuctionNote");
        Page<Object> result = queryService.executeQryPortalAuctionNote(pageable, property_id);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @RequestMapping(value = "/queries/wm_custom", method = RequestMethod.POST)
    @ApiOperation(value = "Process request to execute customer queries")
    public Page<Object> executeWMCustomQuery(@RequestBody CustomQuery query, Pageable pageable) {
        Page<Object> result = queryService.executeWMCustomQuerySelect(query, pageable);
        LOGGER.debug("got the result {}" + result);
        return result;
    }

    @RequestMapping(value = "/queries/wm_custom_update", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Process request to execute customer queries")
    public int executeWMCustomQuery(@RequestBody CustomQuery query) {
        int result = queryService.executeWMCustomQueryUpdate(query);
        LOGGER.debug("got the result {}" + result);
        return result;
    }
}
