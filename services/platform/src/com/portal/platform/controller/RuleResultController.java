/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.RuleResult;
import com.portal.platform.service.RuleResultService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class RuleResult.
 * @see RuleResult
 */
@RestController("platform.RuleResultController")
@RequestMapping("/platform/RuleResult")
@Api(description = "Exposes APIs to work with RuleResult resource.", value = "RuleResultController")
public class RuleResultController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RuleResultController.class);

    @Autowired
    @Qualifier("platform.RuleResultService")
    private RuleResultService ruleResultService;

    /**
     * @deprecated Use {@link #findRuleResults(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of RuleResult instances matching the search criteria.")
    public Page<RuleResult> findRuleResults(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RuleResults list");
        return ruleResultService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of RuleResult instances matching the search criteria.")
    public Page<RuleResult> findRuleResults(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RuleResults list");
        return ruleResultService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportRuleResults(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return ruleResultService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of RuleResult instances.")
    public Long countRuleResults(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting RuleResults");
        return ruleResultService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RuleResultService instance
	 */
    protected void setRuleResultService(RuleResultService service) {
        this.ruleResultService = service;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the RuleResult instance associated with the given id.")
    public RuleResult getRuleResult(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RuleResult with id: {}", id);
        RuleResult foundRuleResult = ruleResultService.getById(id);
        LOGGER.debug("RuleResult details with id: {}", foundRuleResult);
        return foundRuleResult;
    }
}
