/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalInspectFilterService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalInspectFilter.
 * @see com.portal.platform.PortalInspectFilter
 */
@RestController(value = "Platform.PortalInspectFilterController")
@RequestMapping("/platform/PortalInspectFilter")
@Api(description = "Exposes APIs to work with PortalInspectFilter resource.", value = "PortalInspectFilterController")
public class PortalInspectFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalInspectFilterController.class);

    @Autowired
    @Qualifier("platform.PortalInspectFilterService")
    private PortalInspectFilterService portalInspectFilterService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalInspectFilter instances matching the search criteria.")
    public Page<PortalInspectFilter> findPortalInspectFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalInspectFilters list");
        return portalInspectFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalInspectFilter instances.")
    public Page<PortalInspectFilter> getPortalInspectFilters(Pageable pageable) {
        LOGGER.debug("Rendering PortalInspectFilters list");
        return portalInspectFilterService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalInspectFilterService(PortalInspectFilterService service) {
        this.portalInspectFilterService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalInspectFilter instance.")
    public PortalInspectFilter createPortalInspectFilter(@RequestBody PortalInspectFilter instance) {
        LOGGER.debug("Create PortalInspectFilter with information: {}", instance);
        instance = portalInspectFilterService.create(instance);
        LOGGER.debug("Created PortalInspectFilter with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalInspectFilter instance associated with the given composite-id.")
    public PortalInspectFilter getPortalInspectFilter(@RequestParam(value = "dropDown", required = true) String dropDown, @RequestParam(value = "order", required = true) Integer order, @RequestParam(value = "inspected", required = true) Integer inspected, @RequestParam(value = "inspId", required = true) Integer inspId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "latlong", required = true) String latlong, @RequestParam(value = "address", required = true) String address) throws EntityNotFoundException {
        PortalInspectFilterId temp = new PortalInspectFilterId();
        temp.setDropDown(dropDown);
        temp.setOrder(order);
        temp.setInspected(inspected);
        temp.setInspId(inspId);
        temp.setPropertyId(propertyId);
        temp.setAuctionId(auctionId);
        temp.setPin(pin);
        temp.setLatlong(latlong);
        temp.setAddress(address);
        LOGGER.debug("Getting PortalInspectFilter with id: {}", temp);
        PortalInspectFilter instance = portalInspectFilterService.findById(temp);
        LOGGER.debug("PortalInspectFilter details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalInspectFilter instance associated with the given composite-id.")
    public PortalInspectFilter editPortalInspectFilter(@RequestParam(value = "dropDown", required = true) String dropDown, @RequestParam(value = "order", required = true) Integer order, @RequestParam(value = "inspected", required = true) Integer inspected, @RequestParam(value = "inspId", required = true) Integer inspId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "latlong", required = true) String latlong, @RequestParam(value = "address", required = true) String address, @RequestBody PortalInspectFilter instance) throws EntityNotFoundException {
        PortalInspectFilterId temp = new PortalInspectFilterId();
        temp.setDropDown(dropDown);
        temp.setOrder(order);
        temp.setInspected(inspected);
        temp.setInspId(inspId);
        temp.setPropertyId(propertyId);
        temp.setAuctionId(auctionId);
        temp.setPin(pin);
        temp.setLatlong(latlong);
        temp.setAddress(address);
        portalInspectFilterService.delete(temp);
        instance = portalInspectFilterService.create(instance);
        LOGGER.debug("PortalInspectFilter details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalInspectFilter instance associated with the given composite-id.")
    public boolean deletePortalInspectFilter(@RequestParam(value = "dropDown", required = true) String dropDown, @RequestParam(value = "order", required = true) Integer order, @RequestParam(value = "inspected", required = true) Integer inspected, @RequestParam(value = "inspId", required = true) Integer inspId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "latlong", required = true) String latlong, @RequestParam(value = "address", required = true) String address) throws EntityNotFoundException {
        PortalInspectFilterId temp = new PortalInspectFilterId();
        temp.setDropDown(dropDown);
        temp.setOrder(order);
        temp.setInspected(inspected);
        temp.setInspId(inspId);
        temp.setPropertyId(propertyId);
        temp.setAuctionId(auctionId);
        temp.setPin(pin);
        temp.setLatlong(latlong);
        temp.setAddress(address);
        LOGGER.debug("Deleting PortalInspectFilter with id: {}", temp);
        PortalInspectFilter deleted = portalInspectFilterService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalInspectFilter instances.")
    public Long countAllPortalInspectFilters() {
        LOGGER.debug("counting PortalInspectFilters");
        Long count = portalInspectFilterService.countAll();
        return count;
    }
}
