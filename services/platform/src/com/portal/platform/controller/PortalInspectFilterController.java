/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalInspectFilter;
import com.portal.platform.PortalInspectFilterId;
import com.portal.platform.service.PortalInspectFilterService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalInspectFilter.
 * @see PortalInspectFilter
 */
@RestController("platform.PortalInspectFilterController")
@RequestMapping("/platform/PortalInspectFilter")
@Api(description = "Exposes APIs to work with PortalInspectFilter resource.", value = "PortalInspectFilterController")
public class PortalInspectFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalInspectFilterController.class);

    @Autowired
    @Qualifier("platform.PortalInspectFilterService")
    private PortalInspectFilterService portalInspectFilterService;

    /**
     * @deprecated Use {@link #findPortalInspectFilters(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalInspectFilter instances matching the search criteria.")
    public Page<PortalInspectFilter> findPortalInspectFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalInspectFilters list");
        return portalInspectFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalInspectFilter instances matching the search criteria.")
    public Page<PortalInspectFilter> findPortalInspectFilters(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalInspectFilters list");
        return portalInspectFilterService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalInspectFilters(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalInspectFilterService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalInspectFilterService instance
	 */
    protected void setPortalInspectFilterService(PortalInspectFilterService service) {
        this.portalInspectFilterService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalInspectFilter instance associated with the given composite-id.")
    public PortalInspectFilter getPortalInspectFilter(@RequestParam(value = "dropDown", required = true) String dropDown, @RequestParam(value = "order", required = true) int order, @RequestParam(value = "inspected", required = true) int inspected, @RequestParam(value = "inspId", required = true) int inspId, @RequestParam(value = "propertyId", required = true) int propertyId, @RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "latlong", required = true) String latlong, @RequestParam(value = "address", required = true) String address) throws EntityNotFoundException {
        PortalInspectFilterId portalinspectfilterId = new PortalInspectFilterId();
        portalinspectfilterId.setDropDown(dropDown);
        portalinspectfilterId.setOrder(order);
        portalinspectfilterId.setInspected(inspected);
        portalinspectfilterId.setInspId(inspId);
        portalinspectfilterId.setPropertyId(propertyId);
        portalinspectfilterId.setAuctionId(auctionId);
        portalinspectfilterId.setPin(pin);
        portalinspectfilterId.setLatlong(latlong);
        portalinspectfilterId.setAddress(address);
        LOGGER.debug("Getting PortalInspectFilter with id: {}", portalinspectfilterId);
        PortalInspectFilter portalinspectfilter = portalInspectFilterService.getById(portalinspectfilterId);
        LOGGER.debug("PortalInspectFilter details with id: {}", portalinspectfilter);
        return portalinspectfilter;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalInspectFilter instances.")
    public Long countPortalInspectFilters(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalInspectFilters");
        return portalInspectFilterService.count(query);
    }
}
