/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalCertificateNote;
import com.portal.platform.PortalCertificateNoteId;
import com.portal.platform.service.PortalCertificateNoteService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateNote.
 * @see PortalCertificateNote
 */
@RestController("platform.PortalCertificateNoteController")
@RequestMapping("/platform/PortalCertificateNote")
@Api(description = "Exposes APIs to work with PortalCertificateNote resource.", value = "PortalCertificateNoteController")
public class PortalCertificateNoteController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateNoteController.class);

    @Autowired
    @Qualifier("platform.PortalCertificateNoteService")
    private PortalCertificateNoteService portalCertificateNoteService;

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the PortalCertificateNote instance associated with the given composite-id.")
    public PortalCertificateNote getPortalCertificateNote(@RequestParam("noteId") int noteId, @RequestParam("certificateId") int certificateId, @RequestParam("user") String user, @RequestParam("created") Date created, @RequestParam("due") Date due, @RequestParam("done") Date done, @RequestParam("noteDescription") String noteDescription, @RequestParam("noteTypeId") int noteTypeId) throws EntityNotFoundException {
        PortalCertificateNoteId portalcertificatenoteId = new PortalCertificateNoteId();
        portalcertificatenoteId.setNoteId(noteId);
        portalcertificatenoteId.setCertificateId(certificateId);
        portalcertificatenoteId.setUser(user);
        portalcertificatenoteId.setCreated(created);
        portalcertificatenoteId.setDue(due);
        portalcertificatenoteId.setDone(done);
        portalcertificatenoteId.setNoteDescription(noteDescription);
        portalcertificatenoteId.setNoteTypeId(noteTypeId);
        LOGGER.debug("Getting PortalCertificateNote with id: {}", portalcertificatenoteId);
        PortalCertificateNote portalcertificatenote = portalCertificateNoteService.getById(portalcertificatenoteId);
        LOGGER.debug("PortalCertificateNote details with id: {}", portalcertificatenote);
        return portalcertificatenote;
    }

    /**
     * @deprecated Use {@link #findPortalCertificateNotes(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateNote instances matching the search criteria.")
    public Page<PortalCertificateNote> findPortalCertificateNotes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateNotes list");
        return portalCertificateNoteService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateNote instances matching the search criteria.")
    public Page<PortalCertificateNote> findPortalCertificateNotes(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateNotes list");
        return portalCertificateNoteService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalCertificateNotes(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalCertificateNoteService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of PortalCertificateNote instances.")
    public Long countPortalCertificateNotes(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalCertificateNotes");
        return portalCertificateNoteService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalCertificateNoteService instance
	 */
    protected void setPortalCertificateNoteService(PortalCertificateNoteService service) {
        this.portalCertificateNoteService = service;
    }
}
