/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalCertificateNoteService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateNote.
 * @see com.portal.platform.PortalCertificateNote
 */
@RestController(value = "Platform.PortalCertificateNoteController")
@RequestMapping("/platform/PortalCertificateNote")
@Api(description = "Exposes APIs to work with PortalCertificateNote resource.", value = "PortalCertificateNoteController")
public class PortalCertificateNoteController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateNoteController.class);

    @Autowired
    @Qualifier("platform.PortalCertificateNoteService")
    private PortalCertificateNoteService portalCertificateNoteService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateNote instances matching the search criteria.")
    public Page<PortalCertificateNote> findPortalCertificateNotes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateNotes list");
        return portalCertificateNoteService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateNote instances.")
    public Page<PortalCertificateNote> getPortalCertificateNotes(Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateNotes list");
        return portalCertificateNoteService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalCertificateNoteService(PortalCertificateNoteService service) {
        this.portalCertificateNoteService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalCertificateNote instance.")
    public PortalCertificateNote createPortalCertificateNote(@RequestBody PortalCertificateNote instance) {
        LOGGER.debug("Create PortalCertificateNote with information: {}", instance);
        instance = portalCertificateNoteService.create(instance);
        LOGGER.debug("Created PortalCertificateNote with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalCertificateNote instance associated with the given composite-id.")
    public PortalCertificateNote getPortalCertificateNote(@RequestParam(value = "noteId", required = true) Integer noteId, @RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "user", required = true) String user, @RequestParam(value = "created", required = true) Date created, @RequestParam(value = "due", required = true) Date due, @RequestParam(value = "done", required = true) Date done, @RequestParam(value = "noteDescription", required = true) String noteDescription, @RequestParam(value = "noteTypeId", required = true) Integer noteTypeId) throws EntityNotFoundException {
        PortalCertificateNoteId temp = new PortalCertificateNoteId();
        temp.setNoteId(noteId);
        temp.setCertificateId(certificateId);
        temp.setUser(user);
        temp.setCreated(created);
        temp.setDue(due);
        temp.setDone(done);
        temp.setNoteDescription(noteDescription);
        temp.setNoteTypeId(noteTypeId);
        LOGGER.debug("Getting PortalCertificateNote with id: {}", temp);
        PortalCertificateNote instance = portalCertificateNoteService.findById(temp);
        LOGGER.debug("PortalCertificateNote details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalCertificateNote instance associated with the given composite-id.")
    public PortalCertificateNote editPortalCertificateNote(@RequestParam(value = "noteId", required = true) Integer noteId, @RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "user", required = true) String user, @RequestParam(value = "created", required = true) Date created, @RequestParam(value = "due", required = true) Date due, @RequestParam(value = "done", required = true) Date done, @RequestParam(value = "noteDescription", required = true) String noteDescription, @RequestParam(value = "noteTypeId", required = true) Integer noteTypeId, @RequestBody PortalCertificateNote instance) throws EntityNotFoundException {
        PortalCertificateNoteId temp = new PortalCertificateNoteId();
        temp.setNoteId(noteId);
        temp.setCertificateId(certificateId);
        temp.setUser(user);
        temp.setCreated(created);
        temp.setDue(due);
        temp.setDone(done);
        temp.setNoteDescription(noteDescription);
        temp.setNoteTypeId(noteTypeId);
        portalCertificateNoteService.delete(temp);
        instance = portalCertificateNoteService.create(instance);
        LOGGER.debug("PortalCertificateNote details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalCertificateNote instance associated with the given composite-id.")
    public boolean deletePortalCertificateNote(@RequestParam(value = "noteId", required = true) Integer noteId, @RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "user", required = true) String user, @RequestParam(value = "created", required = true) Date created, @RequestParam(value = "due", required = true) Date due, @RequestParam(value = "done", required = true) Date done, @RequestParam(value = "noteDescription", required = true) String noteDescription, @RequestParam(value = "noteTypeId", required = true) Integer noteTypeId) throws EntityNotFoundException {
        PortalCertificateNoteId temp = new PortalCertificateNoteId();
        temp.setNoteId(noteId);
        temp.setCertificateId(certificateId);
        temp.setUser(user);
        temp.setCreated(created);
        temp.setDue(due);
        temp.setDone(done);
        temp.setNoteDescription(noteDescription);
        temp.setNoteTypeId(noteTypeId);
        LOGGER.debug("Deleting PortalCertificateNote with id: {}", temp);
        PortalCertificateNote deleted = portalCertificateNoteService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalCertificateNote instances.")
    public Long countAllPortalCertificateNotes() {
        LOGGER.debug("counting PortalCertificateNotes");
        Long count = portalCertificateNoteService.countAll();
        return count;
    }
}
