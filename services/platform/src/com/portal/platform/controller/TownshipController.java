/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.GradeService;
import com.portal.platform.service.PropertyService;
import com.portal.platform.service.TownshipService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Township.
 * @see com.portal.platform.Township
 */
@RestController(value = "Platform.TownshipController")
@RequestMapping("/platform/Township")
@Api(description = "Exposes APIs to work with Township resource.", value = "TownshipController")
public class TownshipController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TownshipController.class);

    @Autowired
    @Qualifier("platform.TownshipService")
    private TownshipService townshipService;

    @Autowired
    @Qualifier("platform.GradeService")
    private GradeService gradeService;

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Township instances matching the search criteria.")
    public Page<Township> findTownships(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Townships list");
        return townshipService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Township instances.")
    public Page<Township> getTownships(Pageable pageable) {
        LOGGER.debug("Rendering Townships list");
        return townshipService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/properties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    public Page<Property> findAssociatedproperties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated properties");
        return propertyService.findAssociatedValues(id, "township", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/grades", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the grades instance associated with the given id.")
    public Page<Grade> findAssociatedgrades(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated grades");
        return gradeService.findAssociatedValues(id, "township", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTownshipService(TownshipService service) {
        this.townshipService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Township instance.")
    public Township createTownship(@RequestBody Township instance) {
        LOGGER.debug("Create Township with information: {}", instance);
        instance = townshipService.create(instance);
        LOGGER.debug("Created Township with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Township instances.")
    public Long countAllTownships() {
        LOGGER.debug("counting Townships");
        Long count = townshipService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Township instance associated with the given id.")
    public Township getTownship(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Township with id: {}", id);
        Township instance = townshipService.findById(id);
        LOGGER.debug("Township details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Township instance associated with the given id.")
    public Township editTownship(@PathVariable(value = "id") Integer id, @RequestBody Township instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Township with id: {}", instance.getId());
        instance.setId(id);
        instance = townshipService.update(instance);
        LOGGER.debug("Township details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Township instance associated with the given id.")
    public boolean deleteTownship(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Township with id: {}", id);
        Township deleted = townshipService.delete(id);
        return deleted != null;
    }
}
