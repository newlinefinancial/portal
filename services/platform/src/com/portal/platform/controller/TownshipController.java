/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Grade;
import com.portal.platform.Property;
import com.portal.platform.Township;
import com.portal.platform.service.GradeService;
import com.portal.platform.service.PropertyService;
import com.portal.platform.service.TownshipService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Township.
 * @see Township
 */
@RestController("platform.TownshipController")
@RequestMapping("/platform/Township")
@Api(description = "Exposes APIs to work with Township resource.", value = "TownshipController")
public class TownshipController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TownshipController.class);

    @Autowired
    @Qualifier("platform.TownshipService")
    private TownshipService townshipService;

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @Autowired
    @Qualifier("platform.GradeService")
    private GradeService gradeService;

    /**
     * @deprecated Use {@link #findTownships(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Township instances matching the search criteria.")
    public Page<Township> findTownships(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Townships list");
        return townshipService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Township instances matching the search criteria.")
    public Page<Township> findTownships(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Townships list");
        return townshipService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTownships(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return townshipService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/properties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    public Page<Property> findAssociatedProperties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated properties");
        return propertyService.findAssociatedValues(id, "township", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/grades", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the grades instance associated with the given id.")
    public Page<Grade> findAssociatedGrades(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated grades");
        return gradeService.findAssociatedValues(id, "township", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TownshipService instance
	 */
    protected void setTownshipService(TownshipService service) {
        this.townshipService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyService instance
	 */
    protected void setPropertyService(PropertyService service) {
        this.propertyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GradeService instance
	 */
    protected void setGradeService(GradeService service) {
        this.gradeService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Township instances.")
    public Long countTownships(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Townships");
        return townshipService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Township instance associated with the given id.")
    public Township getTownship(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Township with id: {}", id);
        Township foundTownship = townshipService.getById(id);
        LOGGER.debug("Township details with id: {}", foundTownship);
        return foundTownship;
    }
}
