/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AccountingService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Accounting.
 * @see com.portal.platform.Accounting
 */
@RestController(value = "Platform.AccountingController")
@RequestMapping("/platform/Accounting")
@Api(description = "Exposes APIs to work with Accounting resource.", value = "AccountingController")
public class AccountingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountingController.class);

    @Autowired
    @Qualifier("platform.AccountingService")
    private AccountingService accountingService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Accounting instances matching the search criteria.")
    public Page<Accounting> findAccountings(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Accountings list");
        return accountingService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Accounting instances.")
    public Page<Accounting> getAccountings(Pageable pageable) {
        LOGGER.debug("Rendering Accountings list");
        return accountingService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setAccountingService(AccountingService service) {
        this.accountingService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Accounting instance.")
    public Accounting createAccounting(@RequestBody Accounting instance) {
        LOGGER.debug("Create Accounting with information: {}", instance);
        instance = accountingService.create(instance);
        LOGGER.debug("Created Accounting with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Accounting instance associated with the given composite-id.")
    public Accounting getAccounting(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "accountingDate", required = true) Date accountingDate, @RequestParam(value = "effectiveDate", required = true) Date effectiveDate, @RequestParam(value = "transaction", required = true) String transaction, @RequestParam(value = "category", required = true) String category, @RequestParam(value = "type", required = true) String type, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "cash", required = true) Double cash) throws EntityNotFoundException {
        AccountingId temp = new AccountingId();
        temp.setCertificateId(certificateId);
        temp.setAccountingDate(accountingDate);
        temp.setEffectiveDate(effectiveDate);
        temp.setTransaction(transaction);
        temp.setCategory(category);
        temp.setType(type);
        temp.setPrincipal(principal);
        temp.setRevenue(revenue);
        temp.setCash(cash);
        LOGGER.debug("Getting Accounting with id: {}", temp);
        Accounting instance = accountingService.findById(temp);
        LOGGER.debug("Accounting details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Accounting instance associated with the given composite-id.")
    public Accounting editAccounting(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "accountingDate", required = true) Date accountingDate, @RequestParam(value = "effectiveDate", required = true) Date effectiveDate, @RequestParam(value = "transaction", required = true) String transaction, @RequestParam(value = "category", required = true) String category, @RequestParam(value = "type", required = true) String type, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "cash", required = true) Double cash, @RequestBody Accounting instance) throws EntityNotFoundException {
        AccountingId temp = new AccountingId();
        temp.setCertificateId(certificateId);
        temp.setAccountingDate(accountingDate);
        temp.setEffectiveDate(effectiveDate);
        temp.setTransaction(transaction);
        temp.setCategory(category);
        temp.setType(type);
        temp.setPrincipal(principal);
        temp.setRevenue(revenue);
        temp.setCash(cash);
        accountingService.delete(temp);
        instance = accountingService.create(instance);
        LOGGER.debug("Accounting details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Accounting instance associated with the given composite-id.")
    public boolean deleteAccounting(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "accountingDate", required = true) Date accountingDate, @RequestParam(value = "effectiveDate", required = true) Date effectiveDate, @RequestParam(value = "transaction", required = true) String transaction, @RequestParam(value = "category", required = true) String category, @RequestParam(value = "type", required = true) String type, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "cash", required = true) Double cash) throws EntityNotFoundException {
        AccountingId temp = new AccountingId();
        temp.setCertificateId(certificateId);
        temp.setAccountingDate(accountingDate);
        temp.setEffectiveDate(effectiveDate);
        temp.setTransaction(transaction);
        temp.setCategory(category);
        temp.setType(type);
        temp.setPrincipal(principal);
        temp.setRevenue(revenue);
        temp.setCash(cash);
        LOGGER.debug("Deleting Accounting with id: {}", temp);
        Accounting deleted = accountingService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Accounting instances.")
    public Long countAllAccountings() {
        LOGGER.debug("counting Accountings");
        Long count = accountingService.countAll();
        return count;
    }
}
