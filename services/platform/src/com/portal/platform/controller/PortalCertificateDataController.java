/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalCertificateData;
import com.portal.platform.PortalCertificateDataId;
import com.portal.platform.service.PortalCertificateDataService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateData.
 * @see PortalCertificateData
 */
@RestController("platform.PortalCertificateDataController")
@RequestMapping("/platform/PortalCertificateData")
@Api(description = "Exposes APIs to work with PortalCertificateData resource.", value = "PortalCertificateDataController")
public class PortalCertificateDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateDataController.class);

    @Autowired
    @Qualifier("platform.PortalCertificateDataService")
    private PortalCertificateDataService portalCertificateDataService;

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the PortalCertificateData instance associated with the given composite-id.")
    public PortalCertificateData getPortalCertificateData(@RequestParam("certificateId") int certificateId, @RequestParam("propertyId") int propertyId, @RequestParam("pin") String pin, @RequestParam("volume") Integer volume, @RequestParam("header") String header, @RequestParam("code") String code, @RequestParam("propertyType") String propertyType, @RequestParam("certificateNumber") String certificateNumber, @RequestParam("bidRate") BigDecimal bidRate, @RequestParam("taxYear") int taxYear, @RequestParam("dateSold") Date dateSold, @RequestParam("status") String status, @RequestParam("statusChangeDate") Date statusChangeDate, @RequestParam("storageStatus") String storageStatus, @RequestParam("bank") String bank, @RequestParam("expirationDate") Date expirationDate, @RequestParam("countyName") String countyName, @RequestParam("certificatePrincipal") Double certificatePrincipal, @RequestParam("subPrincipal") Double subPrincipal, @RequestParam("feePrincipal") Double feePrincipal, @RequestParam("certificateRevenue") Double certificateRevenue, @RequestParam("subRevenue") Double subRevenue, @RequestParam("feeRevenue") Double feeRevenue, @RequestParam("principal") Double principal, @RequestParam("revenue") Double revenue, @RequestParam("balanceDue") Double balanceDue, @RequestParam("paymentInTransit") Double paymentInTransit, @RequestParam("dueAfterSettlement") Double dueAfterSettlement, @RequestParam("matterNumber") String matterNumber, @RequestParam("initialCourtDate") Date initialCourtDate, @RequestParam("filedDate") Date filedDate, @RequestParam("closedDate") Date closedDate) throws EntityNotFoundException {
        PortalCertificateDataId portalcertificatedataId = new PortalCertificateDataId();
        portalcertificatedataId.setCertificateId(certificateId);
        portalcertificatedataId.setPropertyId(propertyId);
        portalcertificatedataId.setPin(pin);
        portalcertificatedataId.setVolume(volume);
        portalcertificatedataId.setHeader(header);
        portalcertificatedataId.setCode(code);
        portalcertificatedataId.setPropertyType(propertyType);
        portalcertificatedataId.setCertificateNumber(certificateNumber);
        portalcertificatedataId.setBidRate(bidRate);
        portalcertificatedataId.setTaxYear(taxYear);
        portalcertificatedataId.setDateSold(dateSold);
        portalcertificatedataId.setStatus(status);
        portalcertificatedataId.setStatusChangeDate(statusChangeDate);
        portalcertificatedataId.setStorageStatus(storageStatus);
        portalcertificatedataId.setBank(bank);
        portalcertificatedataId.setExpirationDate(expirationDate);
        portalcertificatedataId.setCountyName(countyName);
        portalcertificatedataId.setCertificatePrincipal(certificatePrincipal);
        portalcertificatedataId.setSubPrincipal(subPrincipal);
        portalcertificatedataId.setFeePrincipal(feePrincipal);
        portalcertificatedataId.setCertificateRevenue(certificateRevenue);
        portalcertificatedataId.setSubRevenue(subRevenue);
        portalcertificatedataId.setFeeRevenue(feeRevenue);
        portalcertificatedataId.setPrincipal(principal);
        portalcertificatedataId.setRevenue(revenue);
        portalcertificatedataId.setBalanceDue(balanceDue);
        portalcertificatedataId.setPaymentInTransit(paymentInTransit);
        portalcertificatedataId.setDueAfterSettlement(dueAfterSettlement);
        portalcertificatedataId.setMatterNumber(matterNumber);
        portalcertificatedataId.setInitialCourtDate(initialCourtDate);
        portalcertificatedataId.setFiledDate(filedDate);
        portalcertificatedataId.setClosedDate(closedDate);
        LOGGER.debug("Getting PortalCertificateData with id: {}", portalcertificatedataId);
        PortalCertificateData portalcertificatedata = portalCertificateDataService.getById(portalcertificatedataId);
        LOGGER.debug("PortalCertificateData details with id: {}", portalcertificatedata);
        return portalcertificatedata;
    }

    /**
     * @deprecated Use {@link #findPortalCertificateDatas(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateData instances matching the search criteria.")
    public Page<PortalCertificateData> findPortalCertificateDatas(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateDatas list");
        return portalCertificateDataService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateData instances matching the search criteria.")
    public Page<PortalCertificateData> findPortalCertificateDatas(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateDatas list");
        return portalCertificateDataService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalCertificateDatas(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalCertificateDataService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of PortalCertificateData instances.")
    public Long countPortalCertificateDatas(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalCertificateDatas");
        return portalCertificateDataService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalCertificateDataService instance
	 */
    protected void setPortalCertificateDataService(PortalCertificateDataService service) {
        this.portalCertificateDataService = service;
    }
}
