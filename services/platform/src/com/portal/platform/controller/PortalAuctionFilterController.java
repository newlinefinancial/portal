/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalAuctionFilterService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAuctionFilter.
 * @see com.portal.platform.PortalAuctionFilter
 */
@RestController(value = "Platform.PortalAuctionFilterController")
@RequestMapping("/platform/PortalAuctionFilter")
@Api(description = "Exposes APIs to work with PortalAuctionFilter resource.", value = "PortalAuctionFilterController")
public class PortalAuctionFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionFilterController.class);

    @Autowired
    @Qualifier("platform.PortalAuctionFilterService")
    private PortalAuctionFilterService portalAuctionFilterService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAuctionFilter instances matching the search criteria.")
    public Page<PortalAuctionFilter> findPortalAuctionFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAuctionFilters list");
        return portalAuctionFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAuctionFilter instances.")
    public Page<PortalAuctionFilter> getPortalAuctionFilters(Pageable pageable) {
        LOGGER.debug("Rendering PortalAuctionFilters list");
        return portalAuctionFilterService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalAuctionFilterService(PortalAuctionFilterService service) {
        this.portalAuctionFilterService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalAuctionFilter instance.")
    public PortalAuctionFilter createPortalAuctionFilter(@RequestBody PortalAuctionFilter instance) {
        LOGGER.debug("Create PortalAuctionFilter with information: {}", instance);
        instance = portalAuctionFilterService.create(instance);
        LOGGER.debug("Created PortalAuctionFilter with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalAuctionFilter instance associated with the given composite-id.")
    public PortalAuctionFilter getPortalAuctionFilter(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "saleAmount", required = true) Double saleAmount, @RequestParam(value = "removed", required = true) Boolean removed, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "areaRating", required = true) Character areaRating, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "buyer", required = true) String buyer, @RequestParam(value = "buyerType", required = true) Character buyerType, @RequestParam(value = "tags", required = true) String tags) throws EntityNotFoundException {
        PortalAuctionFilterId temp = new PortalAuctionFilterId();
        temp.setAuctionId(auctionId);
        temp.setPropertyId(propertyId);
        temp.setTaxYear(taxYear);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setSaleAmount(saleAmount);
        temp.setRemoved(removed);
        temp.setCode(code);
        temp.setPropertyType(propertyType);
        temp.setAreaRating(areaRating);
        temp.setCountyName(countyName);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setTownshipName(townshipName);
        temp.setAuctionDay(auctionDay);
        temp.setStatus(status);
        temp.setBuyer(buyer);
        temp.setBuyerType(buyerType);
        temp.setTags(tags);
        LOGGER.debug("Getting PortalAuctionFilter with id: {}", temp);
        PortalAuctionFilter instance = portalAuctionFilterService.findById(temp);
        LOGGER.debug("PortalAuctionFilter details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalAuctionFilter instance associated with the given composite-id.")
    public PortalAuctionFilter editPortalAuctionFilter(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "saleAmount", required = true) Double saleAmount, @RequestParam(value = "removed", required = true) Boolean removed, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "areaRating", required = true) Character areaRating, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "buyer", required = true) String buyer, @RequestParam(value = "buyerType", required = true) Character buyerType, @RequestParam(value = "tags", required = true) String tags, @RequestBody PortalAuctionFilter instance) throws EntityNotFoundException {
        PortalAuctionFilterId temp = new PortalAuctionFilterId();
        temp.setAuctionId(auctionId);
        temp.setPropertyId(propertyId);
        temp.setTaxYear(taxYear);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setSaleAmount(saleAmount);
        temp.setRemoved(removed);
        temp.setCode(code);
        temp.setPropertyType(propertyType);
        temp.setAreaRating(areaRating);
        temp.setCountyName(countyName);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setTownshipName(townshipName);
        temp.setAuctionDay(auctionDay);
        temp.setStatus(status);
        temp.setBuyer(buyer);
        temp.setBuyerType(buyerType);
        temp.setTags(tags);
        portalAuctionFilterService.delete(temp);
        instance = portalAuctionFilterService.create(instance);
        LOGGER.debug("PortalAuctionFilter details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalAuctionFilter instance associated with the given composite-id.")
    public boolean deletePortalAuctionFilter(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "saleAmount", required = true) Double saleAmount, @RequestParam(value = "removed", required = true) Boolean removed, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "areaRating", required = true) Character areaRating, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "buyer", required = true) String buyer, @RequestParam(value = "buyerType", required = true) Character buyerType, @RequestParam(value = "tags", required = true) String tags) throws EntityNotFoundException {
        PortalAuctionFilterId temp = new PortalAuctionFilterId();
        temp.setAuctionId(auctionId);
        temp.setPropertyId(propertyId);
        temp.setTaxYear(taxYear);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setSaleAmount(saleAmount);
        temp.setRemoved(removed);
        temp.setCode(code);
        temp.setPropertyType(propertyType);
        temp.setAreaRating(areaRating);
        temp.setCountyName(countyName);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setTownshipName(townshipName);
        temp.setAuctionDay(auctionDay);
        temp.setStatus(status);
        temp.setBuyer(buyer);
        temp.setBuyerType(buyerType);
        temp.setTags(tags);
        LOGGER.debug("Deleting PortalAuctionFilter with id: {}", temp);
        PortalAuctionFilter deleted = portalAuctionFilterService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalAuctionFilter instances.")
    public Long countAllPortalAuctionFilters() {
        LOGGER.debug("counting PortalAuctionFilters");
        Long count = portalAuctionFilterService.countAll();
        return count;
    }
}
