/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalAuctionFilter;
import com.portal.platform.PortalAuctionFilterId;
import com.portal.platform.service.PortalAuctionFilterService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAuctionFilter.
 * @see PortalAuctionFilter
 */
@RestController("platform.PortalAuctionFilterController")
@RequestMapping("/platform/PortalAuctionFilter")
@Api(description = "Exposes APIs to work with PortalAuctionFilter resource.", value = "PortalAuctionFilterController")
public class PortalAuctionFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionFilterController.class);

    @Autowired
    @Qualifier("platform.PortalAuctionFilterService")
    private PortalAuctionFilterService portalAuctionFilterService;

    /**
     * @deprecated Use {@link #findPortalAuctionFilters(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAuctionFilter instances matching the search criteria.")
    public Page<PortalAuctionFilter> findPortalAuctionFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAuctionFilters list");
        return portalAuctionFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAuctionFilter instances matching the search criteria.")
    public Page<PortalAuctionFilter> findPortalAuctionFilters(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalAuctionFilters list");
        return portalAuctionFilterService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalAuctionFilters(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalAuctionFilterService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalAuctionFilterService instance
	 */
    protected void setPortalAuctionFilterService(PortalAuctionFilterService service) {
        this.portalAuctionFilterService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalAuctionFilter instance associated with the given composite-id.")
    public PortalAuctionFilter getPortalAuctionFilter(@RequestParam(value = "auctionId", required = true) int auctionId, @RequestParam(value = "propertyId", required = true) int propertyId, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "saleAmount", required = true) double saleAmount, @RequestParam(value = "removed", required = true) boolean removed, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "areaRating", required = true) char areaRating, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "bidRate", required = true) Integer bidRate, @RequestParam(value = "buyer", required = true) String buyer, @RequestParam(value = "buyerType", required = true) char buyerType, @RequestParam(value = "tags", required = true) String tags) throws EntityNotFoundException {
        PortalAuctionFilterId portalauctionfilterId = new PortalAuctionFilterId();
        portalauctionfilterId.setAuctionId(auctionId);
        portalauctionfilterId.setPropertyId(propertyId);
        portalauctionfilterId.setTaxYear(taxYear);
        portalauctionfilterId.setPriorYearsDue(priorYearsDue);
        portalauctionfilterId.setSaleAmount(saleAmount);
        portalauctionfilterId.setRemoved(removed);
        portalauctionfilterId.setCode(code);
        portalauctionfilterId.setPropertyType(propertyType);
        portalauctionfilterId.setAreaRating(areaRating);
        portalauctionfilterId.setCountyName(countyName);
        portalauctionfilterId.setPin(pin);
        portalauctionfilterId.setVolume(volume);
        portalauctionfilterId.setTownshipName(townshipName);
        portalauctionfilterId.setAuctionDay(auctionDay);
        portalauctionfilterId.setStatus(status);
        portalauctionfilterId.setBidRate(bidRate);
        portalauctionfilterId.setBuyer(buyer);
        portalauctionfilterId.setBuyerType(buyerType);
        portalauctionfilterId.setTags(tags);
        LOGGER.debug("Getting PortalAuctionFilter with id: {}", portalauctionfilterId);
        PortalAuctionFilter portalauctionfilter = portalAuctionFilterService.getById(portalauctionfilterId);
        LOGGER.debug("PortalAuctionFilter details with id: {}", portalauctionfilter);
        return portalauctionfilter;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalAuctionFilter instances.")
    public Long countPortalAuctionFilters(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalAuctionFilters");
        return portalAuctionFilterService.count(query);
    }
}
