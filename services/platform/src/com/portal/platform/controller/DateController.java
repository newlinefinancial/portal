/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Date;
import com.portal.platform.service.DateService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Date.
 * @see Date
 */
@RestController("platform.DateController")
@RequestMapping("/platform/Date")
@Api(description = "Exposes APIs to work with Date resource.", value = "DateController")
public class DateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateController.class);

    @Autowired
    @Qualifier("platform.DateService")
    private DateService dateService;

    /**
     * @deprecated Use {@link #findDates(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Date instances matching the search criteria.")
    public Page<Date> findDates(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Dates list");
        return dateService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Date instances matching the search criteria.")
    public Page<Date> findDates(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Dates list");
        return dateService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportDates(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return dateService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DateService instance
	 */
    protected void setDateService(DateService service) {
        this.dateService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Date instance.")
    public Date createDate(@RequestBody Date dateInstance) {
        LOGGER.debug("Create Date with information: {}", dateInstance);
        dateInstance = dateService.create(dateInstance);
        LOGGER.debug("Created Date with information: {}", dateInstance);
        return dateInstance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Date instances.")
    public Long countDates(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Dates");
        return dateService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Date instance associated with the given id.")
    public Date getDate(@PathVariable(value = "id") java.util.Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting Date with id: {}", id);
        Date foundDate = dateService.getById(id);
        LOGGER.debug("Date details with id: {}", foundDate);
        return foundDate;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Date instance associated with the given id.")
    public Date editDate(@PathVariable(value = "id") java.util.Date id, @RequestBody Date dateInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing Date with id: {}", dateInstance.getDate());
        dateInstance.setDate(id);
        dateInstance = dateService.update(dateInstance);
        LOGGER.debug("Date details with id: {}", dateInstance);
        return dateInstance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Date instance associated with the given id.")
    public boolean deleteDate(@PathVariable(value = "id") java.util.Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Date with id: {}", id);
        Date deletedDate = dateService.delete(id);
        return deletedDate != null;
    }
}
