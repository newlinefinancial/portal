/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.DateService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Date.
 * @see com.portal.platform.Date
 */
@RestController(value = "Platform.DateController")
@RequestMapping("/platform/Date")
@Api(description = "Exposes APIs to work with Date resource.", value = "DateController")
public class DateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateController.class);

    @Autowired
    @Qualifier("platform.DateService")
    private DateService dateService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Date instances matching the search criteria.")
    public Page<Date> findDates(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Dates list");
        return dateService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Date instances.")
    public Page<Date> getDates(Pageable pageable) {
        LOGGER.debug("Rendering Dates list");
        return dateService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDateService(DateService service) {
        this.dateService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Date instance.")
    public Date createDate(@RequestBody Date instance) {
        LOGGER.debug("Create Date with information: {}", instance);
        instance = dateService.create(instance);
        LOGGER.debug("Created Date with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Date instances.")
    public Long countAllDates() {
        LOGGER.debug("counting Dates");
        Long count = dateService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Date instance associated with the given id.")
    public Date getDate(@PathVariable(value = "id") java.util.Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting Date with id: {}", id);
        Date instance = dateService.findById(id);
        LOGGER.debug("Date details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Date instance associated with the given id.")
    public Date editDate(@PathVariable(value = "id") java.util.Date id, @RequestBody Date instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Date with id: {}", instance.getDate());
        instance.setDate(id);
        instance = dateService.update(instance);
        LOGGER.debug("Date details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Date instance associated with the given id.")
    public boolean deleteDate(@PathVariable(value = "id") java.util.Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Date with id: {}", id);
        Date deleted = dateService.delete(id);
        return deleted != null;
    }
}
