/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PropertyService;
import com.portal.platform.service.PropertyTypeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PropertyType.
 * @see com.portal.platform.PropertyType
 */
@RestController(value = "Platform.PropertyTypeController")
@RequestMapping("/platform/PropertyType")
@Api(description = "Exposes APIs to work with PropertyType resource.", value = "PropertyTypeController")
public class PropertyTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyTypeController.class);

    @Autowired
    @Qualifier("platform.PropertyTypeService")
    private PropertyTypeService propertyTypeService;

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PropertyType instances matching the search criteria.")
    public Page<PropertyType> findPropertyTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PropertyTypes list");
        return propertyTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PropertyType instances.")
    public Page<PropertyType> getPropertyTypes(Pageable pageable) {
        LOGGER.debug("Rendering PropertyTypes list");
        return propertyTypeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/properties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    public Page<Property> findAssociatedproperties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated properties");
        return propertyService.findAssociatedValues(id, "propertyType", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPropertyTypeService(PropertyTypeService service) {
        this.propertyTypeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PropertyType instance.")
    public PropertyType createPropertyType(@RequestBody PropertyType instance) {
        LOGGER.debug("Create PropertyType with information: {}", instance);
        instance = propertyTypeService.create(instance);
        LOGGER.debug("Created PropertyType with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PropertyType instances.")
    public Long countAllPropertyTypes() {
        LOGGER.debug("counting PropertyTypes");
        Long count = propertyTypeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PropertyType instance associated with the given id.")
    public PropertyType getPropertyType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PropertyType with id: {}", id);
        PropertyType instance = propertyTypeService.findById(id);
        LOGGER.debug("PropertyType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PropertyType instance associated with the given id.")
    public PropertyType editPropertyType(@PathVariable(value = "id") Integer id, @RequestBody PropertyType instance) throws EntityNotFoundException {
        LOGGER.debug("Editing PropertyType with id: {}", instance.getId());
        instance.setId(id);
        instance = propertyTypeService.update(instance);
        LOGGER.debug("PropertyType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PropertyType instance associated with the given id.")
    public boolean deletePropertyType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PropertyType with id: {}", id);
        PropertyType deleted = propertyTypeService.delete(id);
        return deleted != null;
    }
}
