/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.ModelDataService;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ModelData.
 * @see com.portal.platform.ModelData
 */
@RestController(value = "Platform.ModelDataController")
@RequestMapping("/platform/ModelData")
@Api(description = "Exposes APIs to work with ModelData resource.", value = "ModelDataController")
public class ModelDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModelDataController.class);

    @Autowired
    @Qualifier("platform.ModelDataService")
    private ModelDataService modelDataService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ModelData instances matching the search criteria.")
    public Page<ModelData> findModelDatas(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ModelDatas list");
        return modelDataService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ModelData instances.")
    public Page<ModelData> getModelDatas(Pageable pageable) {
        LOGGER.debug("Rendering ModelDatas list");
        return modelDataService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setModelDataService(ModelDataService service) {
        this.modelDataService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ModelData instance.")
    public ModelData createModelData(@RequestBody ModelData instance) {
        LOGGER.debug("Create ModelData with information: {}", instance);
        instance = modelDataService.create(instance);
        LOGGER.debug("Created ModelData with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ModelData instance associated with the given composite-id.")
    public ModelData getModelData(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "monthsDelinquent", required = true) Integer monthsDelinquent, @RequestParam(value = "priorYearsDue", required = true) Integer priorYearsDue, @RequestParam(value = "otherDue", required = true) Integer otherDue, @RequestParam(value = "auctionYearDue", required = true) Integer auctionYearDue, @RequestParam(value = "totalAmtDue", required = true) Integer totalAmtDue, @RequestParam(value = "annualTaxAmt", required = true) Integer annualTaxAmt, @RequestParam(value = "iniSubStatus", required = true) String iniSubStatus, @RequestParam(value = "iniSubPct", required = true) BigDecimal iniSubPct, @RequestParam(value = "ltv", required = true) BigDecimal ltv, @RequestParam(value = "lastRedemptionDate", required = true) Date lastRedemptionDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "dispositionDate", required = true) Date dispositionDate, @RequestParam(value = "dispositionResearchDate", required = true) Date dispositionResearchDate, @RequestParam(value = "label", required = true) String label, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "propertyPin", required = true) String propertyPin, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "dead", required = true) Boolean dead, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "state", required = true) String state, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "latitude", required = true) Float latitude, @RequestParam(value = "longitude", required = true) Float longitude, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "propertyExteriorId", required = true) Integer propertyExteriorId, @RequestParam(value = "propertyExterior", required = true) String propertyExterior, @RequestParam(value = "yearBuilt", required = true) Integer yearBuilt, @RequestParam(value = "yearImproved", required = true) Integer yearImproved, @RequestParam(value = "lotSize", required = true) Integer lotSize, @RequestParam(value = "sqftLiving", required = true) Integer sqftLiving, @RequestParam(value = "sqftTotal", required = true) Integer sqftTotal, @RequestParam(value = "lookup", required = true) String lookup, @RequestParam(value = "grade", required = true) Integer grade, @RequestParam(value = "buildingCount", required = true) Integer buildingCount, @RequestParam(value = "areaCountPublished", required = true) Integer areaCountPublished, @RequestParam(value = "areaCountForfeited", required = true) Integer areaCountForfeited, @RequestParam(value = "areaCountAuctioned", required = true) Integer areaCountAuctioned, @RequestParam(value = "areaCountRedeemed", required = true) Integer areaCountRedeemed, @RequestParam(value = "assTaxYear", required = true) Integer assTaxYear, @RequestParam(value = "marketValue", required = true) Integer marketValue, @RequestParam(value = "homeExemption", required = true) Integer homeExemption, @RequestParam(value = "seniorExemption", required = true) Integer seniorExemption, @RequestParam(value = "doubleExemption", required = true) Integer doubleExemption, @RequestParam(value = "equalizedValuation", required = true) Integer equalizedValuation, @RequestParam(value = "seniorFreeze", required = true) Boolean seniorFreeze, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "propertyClassId", required = true) Integer propertyClassId, @RequestParam(value = "zoningImprovement", required = true) String zoningImprovement, @RequestParam(value = "description", required = true) String description, @RequestParam(value = "filter", required = true) Character filter, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors, @RequestParam(value = "demoFlg", required = true) BigDecimal demoFlg, @RequestParam(value = "gov", required = true) Integer gov, @RequestParam(value = "govLien", required = true) Integer govLien, @RequestParam(value = "numMortgages", required = true) Integer numMortgages, @RequestParam(value = "valMortgages", required = true) BigInteger valMortgages, @RequestParam(value = "maxValMortgages", required = true) BigInteger maxValMortgages, @RequestParam(value = "minValMortgages", required = true) BigInteger minValMortgages, @RequestParam(value = "newestMortgage", required = true) Integer newestMortgage, @RequestParam(value = "oldestMortgage", required = true) Integer oldestMortgage, @RequestParam(value = "numDeed", required = true) Integer numDeed, @RequestParam(value = "valDeed", required = true) BigInteger valDeed, @RequestParam(value = "maxValDeed", required = true) BigInteger maxValDeed, @RequestParam(value = "minValDeed", required = true) BigInteger minValDeed, @RequestParam(value = "newestDeed", required = true) Integer newestDeed, @RequestParam(value = "oldestDeed", required = true) Integer oldestDeed, @RequestParam(value = "numLien", required = true) Integer numLien, @RequestParam(value = "valLien", required = true) BigInteger valLien, @RequestParam(value = "maxValLien", required = true) BigInteger maxValLien, @RequestParam(value = "minValLien", required = true) BigInteger minValLien, @RequestParam(value = "newestLien", required = true) Integer newestLien, @RequestParam(value = "oldestLien", required = true) Integer oldestLien, @RequestParam(value = "numLis", required = true) Integer numLis, @RequestParam(value = "valLis", required = true) BigInteger valLis, @RequestParam(value = "maxValLis", required = true) BigInteger maxValLis, @RequestParam(value = "minValLis", required = true) BigInteger minValLis, @RequestParam(value = "newestLis", required = true) Integer newestLis, @RequestParam(value = "oldestLis", required = true) Integer oldestLis, @RequestParam(value = "numAssignment", required = true) Integer numAssignment, @RequestParam(value = "valAssignment", required = true) BigInteger valAssignment, @RequestParam(value = "maxValAssignment", required = true) BigInteger maxValAssignment, @RequestParam(value = "minValAssignment", required = true) BigInteger minValAssignment, @RequestParam(value = "newestAssignment", required = true) Integer newestAssignment, @RequestParam(value = "oldestAssignment", required = true) Integer oldestAssignment, @RequestParam(value = "numQuit", required = true) Integer numQuit, @RequestParam(value = "valQuit", required = true) BigInteger valQuit, @RequestParam(value = "maxValQuit", required = true) BigInteger maxValQuit, @RequestParam(value = "minValQuit", required = true) BigInteger minValQuit, @RequestParam(value = "newestQuit", required = true) Integer newestQuit, @RequestParam(value = "oldestQuit", required = true) Integer oldestQuit, @RequestParam(value = "numForeclosure", required = true) Integer numForeclosure, @RequestParam(value = "valForeclosure", required = true) BigInteger valForeclosure, @RequestParam(value = "maxValForeclosure", required = true) BigInteger maxValForeclosure, @RequestParam(value = "minValForeclosure", required = true) BigInteger minValForeclosure, @RequestParam(value = "newestForeclosure", required = true) Integer newestForeclosure, @RequestParam(value = "oldestForeclosure", required = true) Integer oldestForeclosure, @RequestParam(value = "numRents", required = true) Integer numRents, @RequestParam(value = "valRents", required = true) BigInteger valRents, @RequestParam(value = "maxValRents", required = true) BigInteger maxValRents, @RequestParam(value = "minValRents", required = true) BigInteger minValRents, @RequestParam(value = "newestRents", required = true) Integer newestRents, @RequestParam(value = "oldestRents", required = true) Integer oldestRents, @RequestParam(value = "numBuilding", required = true) Integer numBuilding, @RequestParam(value = "valBuilding", required = true) BigInteger valBuilding, @RequestParam(value = "maxValBuilding", required = true) BigInteger maxValBuilding, @RequestParam(value = "minValBuilding", required = true) BigInteger minValBuilding, @RequestParam(value = "newestBuilding", required = true) Integer newestBuilding, @RequestParam(value = "oldestBuilding", required = true) Integer oldestBuilding) throws EntityNotFoundException {
        ModelDataId temp = new ModelDataId();
        temp.setAuctionId(auctionId);
        temp.setTaxYear(taxYear);
        temp.setMonthsDelinquent(monthsDelinquent);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setOtherDue(otherDue);
        temp.setAuctionYearDue(auctionYearDue);
        temp.setTotalAmtDue(totalAmtDue);
        temp.setAnnualTaxAmt(annualTaxAmt);
        temp.setIniSubStatus(iniSubStatus);
        temp.setIniSubPct(iniSubPct);
        temp.setLtv(ltv);
        temp.setLastRedemptionDate(lastRedemptionDate);
        temp.setStatus(status);
        temp.setDispositionDate(dispositionDate);
        temp.setDispositionResearchDate(dispositionResearchDate);
        temp.setLabel(label);
        temp.setPropertyId(propertyId);
        temp.setPropertyPin(propertyPin);
        temp.setCountyName(countyName);
        temp.setTownshipName(townshipName);
        temp.setDead(dead);
        temp.setAddressLine1(addressLine1);
        temp.setAddressLine2(addressLine2);
        temp.setAddressCity(addressCity);
        temp.setState(state);
        temp.setAddressZip(addressZip);
        temp.setLatitude(latitude);
        temp.setLongitude(longitude);
        temp.setPropertyType(propertyType);
        temp.setPropertyExteriorId(propertyExteriorId);
        temp.setPropertyExterior(propertyExterior);
        temp.setYearBuilt(yearBuilt);
        temp.setYearImproved(yearImproved);
        temp.setLotSize(lotSize);
        temp.setSqftLiving(sqftLiving);
        temp.setSqftTotal(sqftTotal);
        temp.setLookup(lookup);
        temp.setGrade(grade);
        temp.setBuildingCount(buildingCount);
        temp.setAreaCountPublished(areaCountPublished);
        temp.setAreaCountForfeited(areaCountForfeited);
        temp.setAreaCountAuctioned(areaCountAuctioned);
        temp.setAreaCountRedeemed(areaCountRedeemed);
        temp.setAssTaxYear(assTaxYear);
        temp.setMarketValue(marketValue);
        temp.setHomeExemption(homeExemption);
        temp.setSeniorExemption(seniorExemption);
        temp.setDoubleExemption(doubleExemption);
        temp.setEqualizedValuation(equalizedValuation);
        temp.setSeniorFreeze(seniorFreeze);
        temp.setAssesseeName(assesseeName);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setPropertyClassId(propertyClassId);
        temp.setZoningImprovement(zoningImprovement);
        temp.setDescription(description);
        temp.setFilter(filter);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        temp.setDemoFlg(demoFlg);
        temp.setGov(gov);
        temp.setGovLien(govLien);
        temp.setNumMortgages(numMortgages);
        temp.setValMortgages(valMortgages);
        temp.setMaxValMortgages(maxValMortgages);
        temp.setMinValMortgages(minValMortgages);
        temp.setNewestMortgage(newestMortgage);
        temp.setOldestMortgage(oldestMortgage);
        temp.setNumDeed(numDeed);
        temp.setValDeed(valDeed);
        temp.setMaxValDeed(maxValDeed);
        temp.setMinValDeed(minValDeed);
        temp.setNewestDeed(newestDeed);
        temp.setOldestDeed(oldestDeed);
        temp.setNumLien(numLien);
        temp.setValLien(valLien);
        temp.setMaxValLien(maxValLien);
        temp.setMinValLien(minValLien);
        temp.setNewestLien(newestLien);
        temp.setOldestLien(oldestLien);
        temp.setNumLis(numLis);
        temp.setValLis(valLis);
        temp.setMaxValLis(maxValLis);
        temp.setMinValLis(minValLis);
        temp.setNewestLis(newestLis);
        temp.setOldestLis(oldestLis);
        temp.setNumAssignment(numAssignment);
        temp.setValAssignment(valAssignment);
        temp.setMaxValAssignment(maxValAssignment);
        temp.setMinValAssignment(minValAssignment);
        temp.setNewestAssignment(newestAssignment);
        temp.setOldestAssignment(oldestAssignment);
        temp.setNumQuit(numQuit);
        temp.setValQuit(valQuit);
        temp.setMaxValQuit(maxValQuit);
        temp.setMinValQuit(minValQuit);
        temp.setNewestQuit(newestQuit);
        temp.setOldestQuit(oldestQuit);
        temp.setNumForeclosure(numForeclosure);
        temp.setValForeclosure(valForeclosure);
        temp.setMaxValForeclosure(maxValForeclosure);
        temp.setMinValForeclosure(minValForeclosure);
        temp.setNewestForeclosure(newestForeclosure);
        temp.setOldestForeclosure(oldestForeclosure);
        temp.setNumRents(numRents);
        temp.setValRents(valRents);
        temp.setMaxValRents(maxValRents);
        temp.setMinValRents(minValRents);
        temp.setNewestRents(newestRents);
        temp.setOldestRents(oldestRents);
        temp.setNumBuilding(numBuilding);
        temp.setValBuilding(valBuilding);
        temp.setMaxValBuilding(maxValBuilding);
        temp.setMinValBuilding(minValBuilding);
        temp.setNewestBuilding(newestBuilding);
        temp.setOldestBuilding(oldestBuilding);
        LOGGER.debug("Getting ModelData with id: {}", temp);
        ModelData instance = modelDataService.findById(temp);
        LOGGER.debug("ModelData details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ModelData instance associated with the given composite-id.")
    public ModelData editModelData(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "monthsDelinquent", required = true) Integer monthsDelinquent, @RequestParam(value = "priorYearsDue", required = true) Integer priorYearsDue, @RequestParam(value = "otherDue", required = true) Integer otherDue, @RequestParam(value = "auctionYearDue", required = true) Integer auctionYearDue, @RequestParam(value = "totalAmtDue", required = true) Integer totalAmtDue, @RequestParam(value = "annualTaxAmt", required = true) Integer annualTaxAmt, @RequestParam(value = "iniSubStatus", required = true) String iniSubStatus, @RequestParam(value = "iniSubPct", required = true) BigDecimal iniSubPct, @RequestParam(value = "ltv", required = true) BigDecimal ltv, @RequestParam(value = "lastRedemptionDate", required = true) Date lastRedemptionDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "dispositionDate", required = true) Date dispositionDate, @RequestParam(value = "dispositionResearchDate", required = true) Date dispositionResearchDate, @RequestParam(value = "label", required = true) String label, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "propertyPin", required = true) String propertyPin, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "dead", required = true) Boolean dead, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "state", required = true) String state, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "latitude", required = true) Float latitude, @RequestParam(value = "longitude", required = true) Float longitude, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "propertyExteriorId", required = true) Integer propertyExteriorId, @RequestParam(value = "propertyExterior", required = true) String propertyExterior, @RequestParam(value = "yearBuilt", required = true) Integer yearBuilt, @RequestParam(value = "yearImproved", required = true) Integer yearImproved, @RequestParam(value = "lotSize", required = true) Integer lotSize, @RequestParam(value = "sqftLiving", required = true) Integer sqftLiving, @RequestParam(value = "sqftTotal", required = true) Integer sqftTotal, @RequestParam(value = "lookup", required = true) String lookup, @RequestParam(value = "grade", required = true) Integer grade, @RequestParam(value = "buildingCount", required = true) Integer buildingCount, @RequestParam(value = "areaCountPublished", required = true) Integer areaCountPublished, @RequestParam(value = "areaCountForfeited", required = true) Integer areaCountForfeited, @RequestParam(value = "areaCountAuctioned", required = true) Integer areaCountAuctioned, @RequestParam(value = "areaCountRedeemed", required = true) Integer areaCountRedeemed, @RequestParam(value = "assTaxYear", required = true) Integer assTaxYear, @RequestParam(value = "marketValue", required = true) Integer marketValue, @RequestParam(value = "homeExemption", required = true) Integer homeExemption, @RequestParam(value = "seniorExemption", required = true) Integer seniorExemption, @RequestParam(value = "doubleExemption", required = true) Integer doubleExemption, @RequestParam(value = "equalizedValuation", required = true) Integer equalizedValuation, @RequestParam(value = "seniorFreeze", required = true) Boolean seniorFreeze, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "propertyClassId", required = true) Integer propertyClassId, @RequestParam(value = "zoningImprovement", required = true) String zoningImprovement, @RequestParam(value = "description", required = true) String description, @RequestParam(value = "filter", required = true) Character filter, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors, @RequestParam(value = "demoFlg", required = true) BigDecimal demoFlg, @RequestParam(value = "gov", required = true) Integer gov, @RequestParam(value = "govLien", required = true) Integer govLien, @RequestParam(value = "numMortgages", required = true) Integer numMortgages, @RequestParam(value = "valMortgages", required = true) BigInteger valMortgages, @RequestParam(value = "maxValMortgages", required = true) BigInteger maxValMortgages, @RequestParam(value = "minValMortgages", required = true) BigInteger minValMortgages, @RequestParam(value = "newestMortgage", required = true) Integer newestMortgage, @RequestParam(value = "oldestMortgage", required = true) Integer oldestMortgage, @RequestParam(value = "numDeed", required = true) Integer numDeed, @RequestParam(value = "valDeed", required = true) BigInteger valDeed, @RequestParam(value = "maxValDeed", required = true) BigInteger maxValDeed, @RequestParam(value = "minValDeed", required = true) BigInteger minValDeed, @RequestParam(value = "newestDeed", required = true) Integer newestDeed, @RequestParam(value = "oldestDeed", required = true) Integer oldestDeed, @RequestParam(value = "numLien", required = true) Integer numLien, @RequestParam(value = "valLien", required = true) BigInteger valLien, @RequestParam(value = "maxValLien", required = true) BigInteger maxValLien, @RequestParam(value = "minValLien", required = true) BigInteger minValLien, @RequestParam(value = "newestLien", required = true) Integer newestLien, @RequestParam(value = "oldestLien", required = true) Integer oldestLien, @RequestParam(value = "numLis", required = true) Integer numLis, @RequestParam(value = "valLis", required = true) BigInteger valLis, @RequestParam(value = "maxValLis", required = true) BigInteger maxValLis, @RequestParam(value = "minValLis", required = true) BigInteger minValLis, @RequestParam(value = "newestLis", required = true) Integer newestLis, @RequestParam(value = "oldestLis", required = true) Integer oldestLis, @RequestParam(value = "numAssignment", required = true) Integer numAssignment, @RequestParam(value = "valAssignment", required = true) BigInteger valAssignment, @RequestParam(value = "maxValAssignment", required = true) BigInteger maxValAssignment, @RequestParam(value = "minValAssignment", required = true) BigInteger minValAssignment, @RequestParam(value = "newestAssignment", required = true) Integer newestAssignment, @RequestParam(value = "oldestAssignment", required = true) Integer oldestAssignment, @RequestParam(value = "numQuit", required = true) Integer numQuit, @RequestParam(value = "valQuit", required = true) BigInteger valQuit, @RequestParam(value = "maxValQuit", required = true) BigInteger maxValQuit, @RequestParam(value = "minValQuit", required = true) BigInteger minValQuit, @RequestParam(value = "newestQuit", required = true) Integer newestQuit, @RequestParam(value = "oldestQuit", required = true) Integer oldestQuit, @RequestParam(value = "numForeclosure", required = true) Integer numForeclosure, @RequestParam(value = "valForeclosure", required = true) BigInteger valForeclosure, @RequestParam(value = "maxValForeclosure", required = true) BigInteger maxValForeclosure, @RequestParam(value = "minValForeclosure", required = true) BigInteger minValForeclosure, @RequestParam(value = "newestForeclosure", required = true) Integer newestForeclosure, @RequestParam(value = "oldestForeclosure", required = true) Integer oldestForeclosure, @RequestParam(value = "numRents", required = true) Integer numRents, @RequestParam(value = "valRents", required = true) BigInteger valRents, @RequestParam(value = "maxValRents", required = true) BigInteger maxValRents, @RequestParam(value = "minValRents", required = true) BigInteger minValRents, @RequestParam(value = "newestRents", required = true) Integer newestRents, @RequestParam(value = "oldestRents", required = true) Integer oldestRents, @RequestParam(value = "numBuilding", required = true) Integer numBuilding, @RequestParam(value = "valBuilding", required = true) BigInteger valBuilding, @RequestParam(value = "maxValBuilding", required = true) BigInteger maxValBuilding, @RequestParam(value = "minValBuilding", required = true) BigInteger minValBuilding, @RequestParam(value = "newestBuilding", required = true) Integer newestBuilding, @RequestParam(value = "oldestBuilding", required = true) Integer oldestBuilding, @RequestBody ModelData instance) throws EntityNotFoundException {
        ModelDataId temp = new ModelDataId();
        temp.setAuctionId(auctionId);
        temp.setTaxYear(taxYear);
        temp.setMonthsDelinquent(monthsDelinquent);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setOtherDue(otherDue);
        temp.setAuctionYearDue(auctionYearDue);
        temp.setTotalAmtDue(totalAmtDue);
        temp.setAnnualTaxAmt(annualTaxAmt);
        temp.setIniSubStatus(iniSubStatus);
        temp.setIniSubPct(iniSubPct);
        temp.setLtv(ltv);
        temp.setLastRedemptionDate(lastRedemptionDate);
        temp.setStatus(status);
        temp.setDispositionDate(dispositionDate);
        temp.setDispositionResearchDate(dispositionResearchDate);
        temp.setLabel(label);
        temp.setPropertyId(propertyId);
        temp.setPropertyPin(propertyPin);
        temp.setCountyName(countyName);
        temp.setTownshipName(townshipName);
        temp.setDead(dead);
        temp.setAddressLine1(addressLine1);
        temp.setAddressLine2(addressLine2);
        temp.setAddressCity(addressCity);
        temp.setState(state);
        temp.setAddressZip(addressZip);
        temp.setLatitude(latitude);
        temp.setLongitude(longitude);
        temp.setPropertyType(propertyType);
        temp.setPropertyExteriorId(propertyExteriorId);
        temp.setPropertyExterior(propertyExterior);
        temp.setYearBuilt(yearBuilt);
        temp.setYearImproved(yearImproved);
        temp.setLotSize(lotSize);
        temp.setSqftLiving(sqftLiving);
        temp.setSqftTotal(sqftTotal);
        temp.setLookup(lookup);
        temp.setGrade(grade);
        temp.setBuildingCount(buildingCount);
        temp.setAreaCountPublished(areaCountPublished);
        temp.setAreaCountForfeited(areaCountForfeited);
        temp.setAreaCountAuctioned(areaCountAuctioned);
        temp.setAreaCountRedeemed(areaCountRedeemed);
        temp.setAssTaxYear(assTaxYear);
        temp.setMarketValue(marketValue);
        temp.setHomeExemption(homeExemption);
        temp.setSeniorExemption(seniorExemption);
        temp.setDoubleExemption(doubleExemption);
        temp.setEqualizedValuation(equalizedValuation);
        temp.setSeniorFreeze(seniorFreeze);
        temp.setAssesseeName(assesseeName);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setPropertyClassId(propertyClassId);
        temp.setZoningImprovement(zoningImprovement);
        temp.setDescription(description);
        temp.setFilter(filter);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        temp.setDemoFlg(demoFlg);
        temp.setGov(gov);
        temp.setGovLien(govLien);
        temp.setNumMortgages(numMortgages);
        temp.setValMortgages(valMortgages);
        temp.setMaxValMortgages(maxValMortgages);
        temp.setMinValMortgages(minValMortgages);
        temp.setNewestMortgage(newestMortgage);
        temp.setOldestMortgage(oldestMortgage);
        temp.setNumDeed(numDeed);
        temp.setValDeed(valDeed);
        temp.setMaxValDeed(maxValDeed);
        temp.setMinValDeed(minValDeed);
        temp.setNewestDeed(newestDeed);
        temp.setOldestDeed(oldestDeed);
        temp.setNumLien(numLien);
        temp.setValLien(valLien);
        temp.setMaxValLien(maxValLien);
        temp.setMinValLien(minValLien);
        temp.setNewestLien(newestLien);
        temp.setOldestLien(oldestLien);
        temp.setNumLis(numLis);
        temp.setValLis(valLis);
        temp.setMaxValLis(maxValLis);
        temp.setMinValLis(minValLis);
        temp.setNewestLis(newestLis);
        temp.setOldestLis(oldestLis);
        temp.setNumAssignment(numAssignment);
        temp.setValAssignment(valAssignment);
        temp.setMaxValAssignment(maxValAssignment);
        temp.setMinValAssignment(minValAssignment);
        temp.setNewestAssignment(newestAssignment);
        temp.setOldestAssignment(oldestAssignment);
        temp.setNumQuit(numQuit);
        temp.setValQuit(valQuit);
        temp.setMaxValQuit(maxValQuit);
        temp.setMinValQuit(minValQuit);
        temp.setNewestQuit(newestQuit);
        temp.setOldestQuit(oldestQuit);
        temp.setNumForeclosure(numForeclosure);
        temp.setValForeclosure(valForeclosure);
        temp.setMaxValForeclosure(maxValForeclosure);
        temp.setMinValForeclosure(minValForeclosure);
        temp.setNewestForeclosure(newestForeclosure);
        temp.setOldestForeclosure(oldestForeclosure);
        temp.setNumRents(numRents);
        temp.setValRents(valRents);
        temp.setMaxValRents(maxValRents);
        temp.setMinValRents(minValRents);
        temp.setNewestRents(newestRents);
        temp.setOldestRents(oldestRents);
        temp.setNumBuilding(numBuilding);
        temp.setValBuilding(valBuilding);
        temp.setMaxValBuilding(maxValBuilding);
        temp.setMinValBuilding(minValBuilding);
        temp.setNewestBuilding(newestBuilding);
        temp.setOldestBuilding(oldestBuilding);
        modelDataService.delete(temp);
        instance = modelDataService.create(instance);
        LOGGER.debug("ModelData details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ModelData instance associated with the given composite-id.")
    public boolean deleteModelData(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "monthsDelinquent", required = true) Integer monthsDelinquent, @RequestParam(value = "priorYearsDue", required = true) Integer priorYearsDue, @RequestParam(value = "otherDue", required = true) Integer otherDue, @RequestParam(value = "auctionYearDue", required = true) Integer auctionYearDue, @RequestParam(value = "totalAmtDue", required = true) Integer totalAmtDue, @RequestParam(value = "annualTaxAmt", required = true) Integer annualTaxAmt, @RequestParam(value = "iniSubStatus", required = true) String iniSubStatus, @RequestParam(value = "iniSubPct", required = true) BigDecimal iniSubPct, @RequestParam(value = "ltv", required = true) BigDecimal ltv, @RequestParam(value = "lastRedemptionDate", required = true) Date lastRedemptionDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "dispositionDate", required = true) Date dispositionDate, @RequestParam(value = "dispositionResearchDate", required = true) Date dispositionResearchDate, @RequestParam(value = "label", required = true) String label, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "propertyPin", required = true) String propertyPin, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "dead", required = true) Boolean dead, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "state", required = true) String state, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "latitude", required = true) Float latitude, @RequestParam(value = "longitude", required = true) Float longitude, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "propertyExteriorId", required = true) Integer propertyExteriorId, @RequestParam(value = "propertyExterior", required = true) String propertyExterior, @RequestParam(value = "yearBuilt", required = true) Integer yearBuilt, @RequestParam(value = "yearImproved", required = true) Integer yearImproved, @RequestParam(value = "lotSize", required = true) Integer lotSize, @RequestParam(value = "sqftLiving", required = true) Integer sqftLiving, @RequestParam(value = "sqftTotal", required = true) Integer sqftTotal, @RequestParam(value = "lookup", required = true) String lookup, @RequestParam(value = "grade", required = true) Integer grade, @RequestParam(value = "buildingCount", required = true) Integer buildingCount, @RequestParam(value = "areaCountPublished", required = true) Integer areaCountPublished, @RequestParam(value = "areaCountForfeited", required = true) Integer areaCountForfeited, @RequestParam(value = "areaCountAuctioned", required = true) Integer areaCountAuctioned, @RequestParam(value = "areaCountRedeemed", required = true) Integer areaCountRedeemed, @RequestParam(value = "assTaxYear", required = true) Integer assTaxYear, @RequestParam(value = "marketValue", required = true) Integer marketValue, @RequestParam(value = "homeExemption", required = true) Integer homeExemption, @RequestParam(value = "seniorExemption", required = true) Integer seniorExemption, @RequestParam(value = "doubleExemption", required = true) Integer doubleExemption, @RequestParam(value = "equalizedValuation", required = true) Integer equalizedValuation, @RequestParam(value = "seniorFreeze", required = true) Boolean seniorFreeze, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "propertyClassId", required = true) Integer propertyClassId, @RequestParam(value = "zoningImprovement", required = true) String zoningImprovement, @RequestParam(value = "description", required = true) String description, @RequestParam(value = "filter", required = true) Character filter, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors, @RequestParam(value = "demoFlg", required = true) BigDecimal demoFlg, @RequestParam(value = "gov", required = true) Integer gov, @RequestParam(value = "govLien", required = true) Integer govLien, @RequestParam(value = "numMortgages", required = true) Integer numMortgages, @RequestParam(value = "valMortgages", required = true) BigInteger valMortgages, @RequestParam(value = "maxValMortgages", required = true) BigInteger maxValMortgages, @RequestParam(value = "minValMortgages", required = true) BigInteger minValMortgages, @RequestParam(value = "newestMortgage", required = true) Integer newestMortgage, @RequestParam(value = "oldestMortgage", required = true) Integer oldestMortgage, @RequestParam(value = "numDeed", required = true) Integer numDeed, @RequestParam(value = "valDeed", required = true) BigInteger valDeed, @RequestParam(value = "maxValDeed", required = true) BigInteger maxValDeed, @RequestParam(value = "minValDeed", required = true) BigInteger minValDeed, @RequestParam(value = "newestDeed", required = true) Integer newestDeed, @RequestParam(value = "oldestDeed", required = true) Integer oldestDeed, @RequestParam(value = "numLien", required = true) Integer numLien, @RequestParam(value = "valLien", required = true) BigInteger valLien, @RequestParam(value = "maxValLien", required = true) BigInteger maxValLien, @RequestParam(value = "minValLien", required = true) BigInteger minValLien, @RequestParam(value = "newestLien", required = true) Integer newestLien, @RequestParam(value = "oldestLien", required = true) Integer oldestLien, @RequestParam(value = "numLis", required = true) Integer numLis, @RequestParam(value = "valLis", required = true) BigInteger valLis, @RequestParam(value = "maxValLis", required = true) BigInteger maxValLis, @RequestParam(value = "minValLis", required = true) BigInteger minValLis, @RequestParam(value = "newestLis", required = true) Integer newestLis, @RequestParam(value = "oldestLis", required = true) Integer oldestLis, @RequestParam(value = "numAssignment", required = true) Integer numAssignment, @RequestParam(value = "valAssignment", required = true) BigInteger valAssignment, @RequestParam(value = "maxValAssignment", required = true) BigInteger maxValAssignment, @RequestParam(value = "minValAssignment", required = true) BigInteger minValAssignment, @RequestParam(value = "newestAssignment", required = true) Integer newestAssignment, @RequestParam(value = "oldestAssignment", required = true) Integer oldestAssignment, @RequestParam(value = "numQuit", required = true) Integer numQuit, @RequestParam(value = "valQuit", required = true) BigInteger valQuit, @RequestParam(value = "maxValQuit", required = true) BigInteger maxValQuit, @RequestParam(value = "minValQuit", required = true) BigInteger minValQuit, @RequestParam(value = "newestQuit", required = true) Integer newestQuit, @RequestParam(value = "oldestQuit", required = true) Integer oldestQuit, @RequestParam(value = "numForeclosure", required = true) Integer numForeclosure, @RequestParam(value = "valForeclosure", required = true) BigInteger valForeclosure, @RequestParam(value = "maxValForeclosure", required = true) BigInteger maxValForeclosure, @RequestParam(value = "minValForeclosure", required = true) BigInteger minValForeclosure, @RequestParam(value = "newestForeclosure", required = true) Integer newestForeclosure, @RequestParam(value = "oldestForeclosure", required = true) Integer oldestForeclosure, @RequestParam(value = "numRents", required = true) Integer numRents, @RequestParam(value = "valRents", required = true) BigInteger valRents, @RequestParam(value = "maxValRents", required = true) BigInteger maxValRents, @RequestParam(value = "minValRents", required = true) BigInteger minValRents, @RequestParam(value = "newestRents", required = true) Integer newestRents, @RequestParam(value = "oldestRents", required = true) Integer oldestRents, @RequestParam(value = "numBuilding", required = true) Integer numBuilding, @RequestParam(value = "valBuilding", required = true) BigInteger valBuilding, @RequestParam(value = "maxValBuilding", required = true) BigInteger maxValBuilding, @RequestParam(value = "minValBuilding", required = true) BigInteger minValBuilding, @RequestParam(value = "newestBuilding", required = true) Integer newestBuilding, @RequestParam(value = "oldestBuilding", required = true) Integer oldestBuilding) throws EntityNotFoundException {
        ModelDataId temp = new ModelDataId();
        temp.setAuctionId(auctionId);
        temp.setTaxYear(taxYear);
        temp.setMonthsDelinquent(monthsDelinquent);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setOtherDue(otherDue);
        temp.setAuctionYearDue(auctionYearDue);
        temp.setTotalAmtDue(totalAmtDue);
        temp.setAnnualTaxAmt(annualTaxAmt);
        temp.setIniSubStatus(iniSubStatus);
        temp.setIniSubPct(iniSubPct);
        temp.setLtv(ltv);
        temp.setLastRedemptionDate(lastRedemptionDate);
        temp.setStatus(status);
        temp.setDispositionDate(dispositionDate);
        temp.setDispositionResearchDate(dispositionResearchDate);
        temp.setLabel(label);
        temp.setPropertyId(propertyId);
        temp.setPropertyPin(propertyPin);
        temp.setCountyName(countyName);
        temp.setTownshipName(townshipName);
        temp.setDead(dead);
        temp.setAddressLine1(addressLine1);
        temp.setAddressLine2(addressLine2);
        temp.setAddressCity(addressCity);
        temp.setState(state);
        temp.setAddressZip(addressZip);
        temp.setLatitude(latitude);
        temp.setLongitude(longitude);
        temp.setPropertyType(propertyType);
        temp.setPropertyExteriorId(propertyExteriorId);
        temp.setPropertyExterior(propertyExterior);
        temp.setYearBuilt(yearBuilt);
        temp.setYearImproved(yearImproved);
        temp.setLotSize(lotSize);
        temp.setSqftLiving(sqftLiving);
        temp.setSqftTotal(sqftTotal);
        temp.setLookup(lookup);
        temp.setGrade(grade);
        temp.setBuildingCount(buildingCount);
        temp.setAreaCountPublished(areaCountPublished);
        temp.setAreaCountForfeited(areaCountForfeited);
        temp.setAreaCountAuctioned(areaCountAuctioned);
        temp.setAreaCountRedeemed(areaCountRedeemed);
        temp.setAssTaxYear(assTaxYear);
        temp.setMarketValue(marketValue);
        temp.setHomeExemption(homeExemption);
        temp.setSeniorExemption(seniorExemption);
        temp.setDoubleExemption(doubleExemption);
        temp.setEqualizedValuation(equalizedValuation);
        temp.setSeniorFreeze(seniorFreeze);
        temp.setAssesseeName(assesseeName);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setPropertyClassId(propertyClassId);
        temp.setZoningImprovement(zoningImprovement);
        temp.setDescription(description);
        temp.setFilter(filter);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        temp.setDemoFlg(demoFlg);
        temp.setGov(gov);
        temp.setGovLien(govLien);
        temp.setNumMortgages(numMortgages);
        temp.setValMortgages(valMortgages);
        temp.setMaxValMortgages(maxValMortgages);
        temp.setMinValMortgages(minValMortgages);
        temp.setNewestMortgage(newestMortgage);
        temp.setOldestMortgage(oldestMortgage);
        temp.setNumDeed(numDeed);
        temp.setValDeed(valDeed);
        temp.setMaxValDeed(maxValDeed);
        temp.setMinValDeed(minValDeed);
        temp.setNewestDeed(newestDeed);
        temp.setOldestDeed(oldestDeed);
        temp.setNumLien(numLien);
        temp.setValLien(valLien);
        temp.setMaxValLien(maxValLien);
        temp.setMinValLien(minValLien);
        temp.setNewestLien(newestLien);
        temp.setOldestLien(oldestLien);
        temp.setNumLis(numLis);
        temp.setValLis(valLis);
        temp.setMaxValLis(maxValLis);
        temp.setMinValLis(minValLis);
        temp.setNewestLis(newestLis);
        temp.setOldestLis(oldestLis);
        temp.setNumAssignment(numAssignment);
        temp.setValAssignment(valAssignment);
        temp.setMaxValAssignment(maxValAssignment);
        temp.setMinValAssignment(minValAssignment);
        temp.setNewestAssignment(newestAssignment);
        temp.setOldestAssignment(oldestAssignment);
        temp.setNumQuit(numQuit);
        temp.setValQuit(valQuit);
        temp.setMaxValQuit(maxValQuit);
        temp.setMinValQuit(minValQuit);
        temp.setNewestQuit(newestQuit);
        temp.setOldestQuit(oldestQuit);
        temp.setNumForeclosure(numForeclosure);
        temp.setValForeclosure(valForeclosure);
        temp.setMaxValForeclosure(maxValForeclosure);
        temp.setMinValForeclosure(minValForeclosure);
        temp.setNewestForeclosure(newestForeclosure);
        temp.setOldestForeclosure(oldestForeclosure);
        temp.setNumRents(numRents);
        temp.setValRents(valRents);
        temp.setMaxValRents(maxValRents);
        temp.setMinValRents(minValRents);
        temp.setNewestRents(newestRents);
        temp.setOldestRents(oldestRents);
        temp.setNumBuilding(numBuilding);
        temp.setValBuilding(valBuilding);
        temp.setMaxValBuilding(maxValBuilding);
        temp.setMinValBuilding(minValBuilding);
        temp.setNewestBuilding(newestBuilding);
        temp.setOldestBuilding(oldestBuilding);
        LOGGER.debug("Deleting ModelData with id: {}", temp);
        ModelData deleted = modelDataService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ModelData instances.")
    public Long countAllModelDatas() {
        LOGGER.debug("counting ModelDatas");
        Long count = modelDataService.countAll();
        return count;
    }
}
