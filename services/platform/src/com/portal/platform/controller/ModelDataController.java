/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.ModelData;
import com.portal.platform.ModelDataId;
import com.portal.platform.service.ModelDataService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ModelData.
 * @see ModelData
 */
@RestController("platform.ModelDataController")
@RequestMapping("/platform/ModelData")
@Api(description = "Exposes APIs to work with ModelData resource.", value = "ModelDataController")
public class ModelDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModelDataController.class);

    @Autowired
    @Qualifier("platform.ModelDataService")
    private ModelDataService modelDataService;

    /**
     * @deprecated Use {@link #findModelDatas(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ModelData instances matching the search criteria.")
    public Page<ModelData> findModelDatas(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ModelDatas list");
        return modelDataService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ModelData instances matching the search criteria.")
    public Page<ModelData> findModelDatas(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ModelDatas list");
        return modelDataService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportModelDatas(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return modelDataService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ModelDataService instance
	 */
    protected void setModelDataService(ModelDataService service) {
        this.modelDataService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ModelData instance associated with the given composite-id.")
    public ModelData getModelData(@RequestParam(value = "auctionId", required = true) int auctionId, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "monthsDelinquent", required = true) Integer monthsDelinquent, @RequestParam(value = "priorYearsDue", required = true) Integer priorYearsDue, @RequestParam(value = "otherDue", required = true) Integer otherDue, @RequestParam(value = "auctionYearDue", required = true) Integer auctionYearDue, @RequestParam(value = "saleAmount", required = true) Integer saleAmount, @RequestParam(value = "auctionYearBilled", required = true) Integer auctionYearBilled, @RequestParam(value = "iniSubStatus", required = true) String iniSubStatus, @RequestParam(value = "iniSubPct", required = true) BigDecimal iniSubPct, @RequestParam(value = "ltv", required = true) BigDecimal ltv, @RequestParam(value = "removed", required = true) boolean removed, @RequestParam(value = "underwritingStatus", required = true) String underwritingStatus, @RequestParam(value = "saleDate", required = true) Date saleDate, @RequestParam(value = "lastRedemptionDate", required = true) Date lastRedemptionDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "dispositionDate", required = true) Date dispositionDate, @RequestParam(value = "dispositionResearchDate", required = true) Date dispositionResearchDate, @RequestParam(value = "label12", required = true) String label12, @RequestParam(value = "label18", required = true) String label18, @RequestParam(value = "label24", required = true) String label24, @RequestParam(value = "label30", required = true) String label30, @RequestParam(value = "label36", required = true) String label36, @RequestParam(value = "labelHybrid", required = true) String labelHybrid, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "propertyPin", required = true) String propertyPin, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "dead", required = true) Boolean dead, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "state", required = true) String state, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "latitude", required = true) Float latitude, @RequestParam(value = "longitude", required = true) Float longitude, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "propertyExteriorId", required = true) Integer propertyExteriorId, @RequestParam(value = "propertyExterior", required = true) String propertyExterior, @RequestParam(value = "yearBuilt", required = true) Integer yearBuilt, @RequestParam(value = "yearImproved", required = true) Integer yearImproved, @RequestParam(value = "lotSize", required = true) Integer lotSize, @RequestParam(value = "sqftLiving", required = true) Integer sqftLiving, @RequestParam(value = "sqftTotal", required = true) Integer sqftTotal, @RequestParam(value = "buildingCount", required = true) Integer buildingCount, @RequestParam(value = "lookup", required = true) String lookup, @RequestParam(value = "grade", required = true) Integer grade, @RequestParam(value = "areaCountPublished", required = true) Integer areaCountPublished, @RequestParam(value = "areaCountForfeited", required = true) Integer areaCountForfeited, @RequestParam(value = "areaCountAuctioned", required = true) Integer areaCountAuctioned, @RequestParam(value = "areaCountRedeemed", required = true) Integer areaCountRedeemed, @RequestParam(value = "areaPctForfeited", required = true) Float areaPctForfeited, @RequestParam(value = "areaPctRedeemed", required = true) Float areaPctRedeemed, @RequestParam(value = "assTaxYear", required = true) Integer assTaxYear, @RequestParam(value = "marketValue", required = true) Integer marketValue, @RequestParam(value = "homeExemption", required = true) int homeExemption, @RequestParam(value = "seniorExemption", required = true) int seniorExemption, @RequestParam(value = "doubleExemption", required = true) int doubleExemption, @RequestParam(value = "equalizedValuation", required = true) Integer equalizedValuation, @RequestParam(value = "seniorFreeze", required = true) Boolean seniorFreeze, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "propertyClassId", required = true) Integer propertyClassId, @RequestParam(value = "zoningImprovement", required = true) String zoningImprovement, @RequestParam(value = "description", required = true) String description, @RequestParam(value = "filter", required = true) Character filter, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors) throws EntityNotFoundException {
        ModelDataId modeldataId = new ModelDataId();
        modeldataId.setAuctionId(auctionId);
        modeldataId.setTaxYear(taxYear);
        modeldataId.setMonthsDelinquent(monthsDelinquent);
        modeldataId.setPriorYearsDue(priorYearsDue);
        modeldataId.setOtherDue(otherDue);
        modeldataId.setAuctionYearDue(auctionYearDue);
        modeldataId.setSaleAmount(saleAmount);
        modeldataId.setAuctionYearBilled(auctionYearBilled);
        modeldataId.setIniSubStatus(iniSubStatus);
        modeldataId.setIniSubPct(iniSubPct);
        modeldataId.setLtv(ltv);
        modeldataId.setRemoved(removed);
        modeldataId.setUnderwritingStatus(underwritingStatus);
        modeldataId.setSaleDate(saleDate);
        modeldataId.setLastRedemptionDate(lastRedemptionDate);
        modeldataId.setStatus(status);
        modeldataId.setDispositionDate(dispositionDate);
        modeldataId.setDispositionResearchDate(dispositionResearchDate);
        modeldataId.setLabel12(label12);
        modeldataId.setLabel18(label18);
        modeldataId.setLabel24(label24);
        modeldataId.setLabel30(label30);
        modeldataId.setLabel36(label36);
        modeldataId.setLabelHybrid(labelHybrid);
        modeldataId.setPropertyId(propertyId);
        modeldataId.setPropertyPin(propertyPin);
        modeldataId.setCountyName(countyName);
        modeldataId.setTownshipName(townshipName);
        modeldataId.setDead(dead);
        modeldataId.setAddressLine1(addressLine1);
        modeldataId.setAddressLine2(addressLine2);
        modeldataId.setAddressCity(addressCity);
        modeldataId.setState(state);
        modeldataId.setAddressZip(addressZip);
        modeldataId.setLatitude(latitude);
        modeldataId.setLongitude(longitude);
        modeldataId.setPropertyType(propertyType);
        modeldataId.setPropertyExteriorId(propertyExteriorId);
        modeldataId.setPropertyExterior(propertyExterior);
        modeldataId.setYearBuilt(yearBuilt);
        modeldataId.setYearImproved(yearImproved);
        modeldataId.setLotSize(lotSize);
        modeldataId.setSqftLiving(sqftLiving);
        modeldataId.setSqftTotal(sqftTotal);
        modeldataId.setBuildingCount(buildingCount);
        modeldataId.setLookup(lookup);
        modeldataId.setGrade(grade);
        modeldataId.setAreaCountPublished(areaCountPublished);
        modeldataId.setAreaCountForfeited(areaCountForfeited);
        modeldataId.setAreaCountAuctioned(areaCountAuctioned);
        modeldataId.setAreaCountRedeemed(areaCountRedeemed);
        modeldataId.setAreaPctForfeited(areaPctForfeited);
        modeldataId.setAreaPctRedeemed(areaPctRedeemed);
        modeldataId.setAssTaxYear(assTaxYear);
        modeldataId.setMarketValue(marketValue);
        modeldataId.setHomeExemption(homeExemption);
        modeldataId.setSeniorExemption(seniorExemption);
        modeldataId.setDoubleExemption(doubleExemption);
        modeldataId.setEqualizedValuation(equalizedValuation);
        modeldataId.setSeniorFreeze(seniorFreeze);
        modeldataId.setAssesseeName(assesseeName);
        modeldataId.setAssesseeAddressLine1(assesseeAddressLine1);
        modeldataId.setAssesseeAddressCity(assesseeAddressCity);
        modeldataId.setAssesseeAddressState(assesseeAddressState);
        modeldataId.setAssesseeAddressZip(assesseeAddressZip);
        modeldataId.setPropertyClassId(propertyClassId);
        modeldataId.setZoningImprovement(zoningImprovement);
        modeldataId.setDescription(description);
        modeldataId.setFilter(filter);
        modeldataId.setCountPublished(countPublished);
        modeldataId.setCountAuctioned(countAuctioned);
        modeldataId.setCountForfeited(countForfeited);
        modeldataId.setCountOpensales(countOpensales);
        modeldataId.setCountOpenpriors(countOpenpriors);
        LOGGER.debug("Getting ModelData with id: {}", modeldataId);
        ModelData modeldata = modelDataService.getById(modeldataId);
        LOGGER.debug("ModelData details with id: {}", modeldata);
        return modeldata;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ModelData instances.")
    public Long countModelDatas(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ModelDatas");
        return modelDataService.count(query);
    }
}
