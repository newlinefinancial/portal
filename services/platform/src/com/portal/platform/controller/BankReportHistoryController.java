/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.portal.platform.BankReportHistory;
import com.portal.platform.service.BankReportHistoryService;


/**
 * Controller object for domain model class BankReportHistory.
 * @see BankReportHistory
 */
@RestController("platform.BankReportHistoryController")
@Api(value = "/platform/BankReportHistory", description = "Exposes APIs to work with BankReportHistory resource.")
@RequestMapping("/platform/BankReportHistory")
public class BankReportHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BankReportHistoryController.class);

    @Autowired
	@Qualifier("platform.BankReportHistoryService")
	private BankReportHistoryService bankReportHistoryService;



    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the BankReportHistory instance associated with the given id.")
    public BankReportHistory getBankReportHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BankReportHistory with id: {}" , id);

        BankReportHistory foundBankReportHistory = bankReportHistoryService.getById(id);
        LOGGER.debug("BankReportHistory details with id: {}" , foundBankReportHistory);

        return foundBankReportHistory;
    }

    /**
     * @deprecated Use {@link #findBankReportHistories(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of BankReportHistory instances matching the search criteria.")
	public Page<BankReportHistory> findBankReportHistories( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering BankReportHistories list");
		return bankReportHistoryService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BankReportHistory instances matching the search criteria.")
    public Page<BankReportHistory> findBankReportHistories(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BankReportHistories list");
    	return bankReportHistoryService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBankReportHistories(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return bankReportHistoryService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of BankReportHistory instances.")
	public Long countBankReportHistories(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BankReportHistories");
		return bankReportHistoryService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BankReportHistoryService instance
	 */
	protected void setBankReportHistoryService(BankReportHistoryService service) {
		this.bankReportHistoryService = service;
	}

}

