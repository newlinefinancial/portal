/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalCertificateFilter;
import com.portal.platform.PortalCertificateFilterId;
import com.portal.platform.service.PortalCertificateFilterService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateFilter.
 * @see PortalCertificateFilter
 */
@RestController("platform.PortalCertificateFilterController")
@RequestMapping("/platform/PortalCertificateFilter")
@Api(description = "Exposes APIs to work with PortalCertificateFilter resource.", value = "PortalCertificateFilterController")
public class PortalCertificateFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateFilterController.class);

    @Autowired
    @Qualifier("platform.PortalCertificateFilterService")
    private PortalCertificateFilterService portalCertificateFilterService;

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the PortalCertificateFilter instance associated with the given composite-id.")
    public PortalCertificateFilter getPortalCertificateFilter(@RequestParam("id") int id, @RequestParam("propertyId") int propertyId, @RequestParam("countyName") String countyName, @RequestParam("townshipName") String townshipName, @RequestParam("code") String code, @RequestParam("propertyType") String propertyType, @RequestParam("certificateNumber") String certificateNumber, @RequestParam("taxYear") int taxYear, @RequestParam("status") String status, @RequestParam("pin") String pin, @RequestParam("volume") int volume, @RequestParam("expirationDate") Date expirationDate, @RequestParam("tags") String tags) throws EntityNotFoundException {
        PortalCertificateFilterId portalcertificatefilterId = new PortalCertificateFilterId();
        portalcertificatefilterId.setId(id);
        portalcertificatefilterId.setPropertyId(propertyId);
        portalcertificatefilterId.setCountyName(countyName);
        portalcertificatefilterId.setTownshipName(townshipName);
        portalcertificatefilterId.setCode(code);
        portalcertificatefilterId.setPropertyType(propertyType);
        portalcertificatefilterId.setCertificateNumber(certificateNumber);
        portalcertificatefilterId.setTaxYear(taxYear);
        portalcertificatefilterId.setStatus(status);
        portalcertificatefilterId.setPin(pin);
        portalcertificatefilterId.setVolume(volume);
        portalcertificatefilterId.setExpirationDate(expirationDate);
        portalcertificatefilterId.setTags(tags);
        LOGGER.debug("Getting PortalCertificateFilter with id: {}", portalcertificatefilterId);
        PortalCertificateFilter portalcertificatefilter = portalCertificateFilterService.getById(portalcertificatefilterId);
        LOGGER.debug("PortalCertificateFilter details with id: {}", portalcertificatefilter);
        return portalcertificatefilter;
    }

    /**
     * @deprecated Use {@link #findPortalCertificateFilters(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateFilter instances matching the search criteria.")
    public Page<PortalCertificateFilter> findPortalCertificateFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateFilters list");
        return portalCertificateFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateFilter instances matching the search criteria.")
    public Page<PortalCertificateFilter> findPortalCertificateFilters(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateFilters list");
        return portalCertificateFilterService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalCertificateFilters(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalCertificateFilterService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of PortalCertificateFilter instances.")
    public Long countPortalCertificateFilters(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalCertificateFilters");
        return portalCertificateFilterService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalCertificateFilterService instance
	 */
    protected void setPortalCertificateFilterService(PortalCertificateFilterService service) {
        this.portalCertificateFilterService = service;
    }
}
