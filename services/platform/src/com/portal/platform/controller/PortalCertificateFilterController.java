/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalCertificateFilterService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateFilter.
 * @see com.portal.platform.PortalCertificateFilter
 */
@RestController(value = "Platform.PortalCertificateFilterController")
@RequestMapping("/platform/PortalCertificateFilter")
@Api(description = "Exposes APIs to work with PortalCertificateFilter resource.", value = "PortalCertificateFilterController")
public class PortalCertificateFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateFilterController.class);

    @Autowired
    @Qualifier("platform.PortalCertificateFilterService")
    private PortalCertificateFilterService portalCertificateFilterService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateFilter instances matching the search criteria.")
    public Page<PortalCertificateFilter> findPortalCertificateFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateFilters list");
        return portalCertificateFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateFilter instances.")
    public Page<PortalCertificateFilter> getPortalCertificateFilters(Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateFilters list");
        return portalCertificateFilterService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalCertificateFilterService(PortalCertificateFilterService service) {
        this.portalCertificateFilterService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalCertificateFilter instance.")
    public PortalCertificateFilter createPortalCertificateFilter(@RequestBody PortalCertificateFilter instance) {
        LOGGER.debug("Create PortalCertificateFilter with information: {}", instance);
        instance = portalCertificateFilterService.create(instance);
        LOGGER.debug("Created PortalCertificateFilter with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalCertificateFilter instance associated with the given composite-id.")
    public PortalCertificateFilter getPortalCertificateFilter(@RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "tags", required = true) String tags) throws EntityNotFoundException {
        PortalCertificateFilterId temp = new PortalCertificateFilterId();
        temp.setId(id);
        temp.setPropertyId(propertyId);
        temp.setCountyName(countyName);
        temp.setTownshipName(townshipName);
        temp.setCode(code);
        temp.setPropertyType(propertyType);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setStatus(status);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setExpirationDate(expirationDate);
        temp.setMatterNumber(matterNumber);
        temp.setTags(tags);
        LOGGER.debug("Getting PortalCertificateFilter with id: {}", temp);
        PortalCertificateFilter instance = portalCertificateFilterService.findById(temp);
        LOGGER.debug("PortalCertificateFilter details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalCertificateFilter instance associated with the given composite-id.")
    public PortalCertificateFilter editPortalCertificateFilter(@RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "tags", required = true) String tags, @RequestBody PortalCertificateFilter instance) throws EntityNotFoundException {
        PortalCertificateFilterId temp = new PortalCertificateFilterId();
        temp.setId(id);
        temp.setPropertyId(propertyId);
        temp.setCountyName(countyName);
        temp.setTownshipName(townshipName);
        temp.setCode(code);
        temp.setPropertyType(propertyType);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setStatus(status);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setExpirationDate(expirationDate);
        temp.setMatterNumber(matterNumber);
        temp.setTags(tags);
        portalCertificateFilterService.delete(temp);
        instance = portalCertificateFilterService.create(instance);
        LOGGER.debug("PortalCertificateFilter details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalCertificateFilter instance associated with the given composite-id.")
    public boolean deletePortalCertificateFilter(@RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "tags", required = true) String tags) throws EntityNotFoundException {
        PortalCertificateFilterId temp = new PortalCertificateFilterId();
        temp.setId(id);
        temp.setPropertyId(propertyId);
        temp.setCountyName(countyName);
        temp.setTownshipName(townshipName);
        temp.setCode(code);
        temp.setPropertyType(propertyType);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setStatus(status);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setExpirationDate(expirationDate);
        temp.setMatterNumber(matterNumber);
        temp.setTags(tags);
        LOGGER.debug("Deleting PortalCertificateFilter with id: {}", temp);
        PortalCertificateFilter deleted = portalCertificateFilterService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalCertificateFilter instances.")
    public Long countAllPortalCertificateFilters() {
        LOGGER.debug("counting PortalCertificateFilters");
        Long count = portalCertificateFilterService.countAll();
        return count;
    }
}
