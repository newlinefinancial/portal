/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.CertificateParty;
import com.portal.platform.service.CertificatePartyService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CertificateParty.
 * @see CertificateParty
 */
@RestController("platform.CertificatePartyController")
@RequestMapping("/platform/CertificateParty")
@Api(description = "Exposes APIs to work with CertificateParty resource.", value = "CertificatePartyController")
public class CertificatePartyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CertificatePartyController.class);

    @Autowired
    @Qualifier("platform.CertificatePartyService")
    private CertificatePartyService certificatePartyService;

    /**
     * @deprecated Use {@link #findCertificateParties(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CertificateParty instances matching the search criteria.")
    public Page<CertificateParty> findCertificateParties(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CertificateParties list");
        return certificatePartyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CertificateParty instances matching the search criteria.")
    public Page<CertificateParty> findCertificateParties(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CertificateParties list");
        return certificatePartyService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCertificateParties(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return certificatePartyService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CertificatePartyService instance
	 */
    protected void setCertificatePartyService(CertificatePartyService service) {
        this.certificatePartyService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CertificateParty instances.")
    public Long countCertificateParties(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting CertificateParties");
        return certificatePartyService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CertificateParty instance associated with the given id.")
    public CertificateParty getCertificateParty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CertificateParty with id: {}", id);
        CertificateParty foundCertificateParty = certificatePartyService.getById(id);
        LOGGER.debug("CertificateParty details with id: {}", foundCertificateParty);
        return foundCertificateParty;
    }
}
