/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.BalanceService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Balance.
 * @see com.portal.platform.Balance
 */
@RestController(value = "Platform.BalanceController")
@RequestMapping("/platform/Balance")
@Api(description = "Exposes APIs to work with Balance resource.", value = "BalanceController")
public class BalanceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BalanceController.class);

    @Autowired
    @Qualifier("platform.BalanceService")
    private BalanceService balanceService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Balance instances matching the search criteria.")
    public Page<Balance> findBalances(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Balances list");
        return balanceService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Balance instances.")
    public Page<Balance> getBalances(Pageable pageable) {
        LOGGER.debug("Rendering Balances list");
        return balanceService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBalanceService(BalanceService service) {
        this.balanceService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Balance instance.")
    public Balance createBalance(@RequestBody Balance instance) {
        LOGGER.debug("Create Balance with information: {}", instance);
        instance = balanceService.create(instance);
        LOGGER.debug("Created Balance with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Balance instance associated with the given composite-id.")
    public Balance getBalance(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "prior", required = true) Double prior, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid, @RequestParam(value = "balanceDue", required = true) Double balanceDue, @RequestParam(value = "paymentInTransit", required = true) Double paymentInTransit, @RequestParam(value = "dueAfterSettlement", required = true) Double dueAfterSettlement, @RequestParam(value = "facilityPayoff", required = true) Double facilityPayoff) throws EntityNotFoundException {
        BalanceId temp = new BalanceId();
        temp.setCertificateId(certificateId);
        temp.setPrior(prior);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setFeePrincipal(feePrincipal);
        temp.setPrincipal(principal);
        temp.setCertificateRevenue(certificateRevenue);
        temp.setSubRevenue(subRevenue);
        temp.setFeeRevenue(feeRevenue);
        temp.setRevenue(revenue);
        temp.setRedemptionAmount(redemptionAmount);
        temp.setAmountPaid(amountPaid);
        temp.setBalanceDue(balanceDue);
        temp.setPaymentInTransit(paymentInTransit);
        temp.setDueAfterSettlement(dueAfterSettlement);
        temp.setFacilityPayoff(facilityPayoff);
        LOGGER.debug("Getting Balance with id: {}", temp);
        Balance instance = balanceService.findById(temp);
        LOGGER.debug("Balance details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Balance instance associated with the given composite-id.")
    public Balance editBalance(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "prior", required = true) Double prior, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid, @RequestParam(value = "balanceDue", required = true) Double balanceDue, @RequestParam(value = "paymentInTransit", required = true) Double paymentInTransit, @RequestParam(value = "dueAfterSettlement", required = true) Double dueAfterSettlement, @RequestParam(value = "facilityPayoff", required = true) Double facilityPayoff, @RequestBody Balance instance) throws EntityNotFoundException {
        BalanceId temp = new BalanceId();
        temp.setCertificateId(certificateId);
        temp.setPrior(prior);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setFeePrincipal(feePrincipal);
        temp.setPrincipal(principal);
        temp.setCertificateRevenue(certificateRevenue);
        temp.setSubRevenue(subRevenue);
        temp.setFeeRevenue(feeRevenue);
        temp.setRevenue(revenue);
        temp.setRedemptionAmount(redemptionAmount);
        temp.setAmountPaid(amountPaid);
        temp.setBalanceDue(balanceDue);
        temp.setPaymentInTransit(paymentInTransit);
        temp.setDueAfterSettlement(dueAfterSettlement);
        temp.setFacilityPayoff(facilityPayoff);
        balanceService.delete(temp);
        instance = balanceService.create(instance);
        LOGGER.debug("Balance details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Balance instance associated with the given composite-id.")
    public boolean deleteBalance(@RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "prior", required = true) Double prior, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid, @RequestParam(value = "balanceDue", required = true) Double balanceDue, @RequestParam(value = "paymentInTransit", required = true) Double paymentInTransit, @RequestParam(value = "dueAfterSettlement", required = true) Double dueAfterSettlement, @RequestParam(value = "facilityPayoff", required = true) Double facilityPayoff) throws EntityNotFoundException {
        BalanceId temp = new BalanceId();
        temp.setCertificateId(certificateId);
        temp.setPrior(prior);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setFeePrincipal(feePrincipal);
        temp.setPrincipal(principal);
        temp.setCertificateRevenue(certificateRevenue);
        temp.setSubRevenue(subRevenue);
        temp.setFeeRevenue(feeRevenue);
        temp.setRevenue(revenue);
        temp.setRedemptionAmount(redemptionAmount);
        temp.setAmountPaid(amountPaid);
        temp.setBalanceDue(balanceDue);
        temp.setPaymentInTransit(paymentInTransit);
        temp.setDueAfterSettlement(dueAfterSettlement);
        temp.setFacilityPayoff(facilityPayoff);
        LOGGER.debug("Deleting Balance with id: {}", temp);
        Balance deleted = balanceService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Balance instances.")
    public Long countAllBalances() {
        LOGGER.debug("counting Balances");
        Long count = balanceService.countAll();
        return count;
    }
}
