/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.portal.platform.BidFile;
import com.portal.platform.BidFileId;
import com.portal.platform.service.BidFileService;


/**
 * Controller object for domain model class BidFile.
 * @see BidFile
 */
@RestController("platform.BidFileController")
@Api(value = "/platform/BidFile", description = "Exposes APIs to work with BidFile resource.")
@RequestMapping("/platform/BidFile")
public class BidFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BidFileController.class);

    @Autowired
	@Qualifier("platform.BidFileService")
	private BidFileService bidFileService;


    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the BidFile instance associated with the given composite-id.")
    public BidFile getBidFile(@RequestParam("auctionId") int auctionId,@RequestParam("taxYear") int taxYear,@RequestParam("auctionDay") Integer auctionDay,@RequestParam("advNumber") Integer advNumber,@RequestParam("pinNumber") String pinNumber,@RequestParam("bid") Integer bid) throws EntityNotFoundException {

        BidFileId bidfileId = new BidFileId();
        bidfileId.setAuctionId(auctionId);
        bidfileId.setTaxYear(taxYear);
        bidfileId.setAuctionDay(auctionDay);
        bidfileId.setAdvNumber(advNumber);
        bidfileId.setPinNumber(pinNumber);
        bidfileId.setBid(bid);

        LOGGER.debug("Getting BidFile with id: {}" , bidfileId);
        BidFile bidfile = bidFileService.getById(bidfileId);
        LOGGER.debug("BidFile details with id: {}" , bidfile);

        return bidfile;
    }


    /**
     * @deprecated Use {@link #findBidFiles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of BidFile instances matching the search criteria.")
	public Page<BidFile> findBidFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering BidFiles list");
		return bidFileService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BidFile instances matching the search criteria.")
    public Page<BidFile> findBidFiles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BidFiles list");
    	return bidFileService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBidFiles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return bidFileService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of BidFile instances.")
	public Long countBidFiles(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BidFiles");
		return bidFileService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BidFileService instance
	 */
	protected void setBidFileService(BidFileService service) {
		this.bidFileService = service;
	}

}

