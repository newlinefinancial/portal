/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.UnderwritingService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Underwriting.
 * @see com.portal.platform.Underwriting
 */
@RestController(value = "Platform.UnderwritingController")
@RequestMapping("/platform/Underwriting")
@Api(description = "Exposes APIs to work with Underwriting resource.", value = "UnderwritingController")
public class UnderwritingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UnderwritingController.class);

    @Autowired
    @Qualifier("platform.UnderwritingService")
    private UnderwritingService underwritingService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Underwriting instances matching the search criteria.")
    public Page<Underwriting> findUnderwritings(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Underwritings list");
        return underwritingService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Underwriting instances.")
    public Page<Underwriting> getUnderwritings(Pageable pageable) {
        LOGGER.debug("Rendering Underwritings list");
        return underwritingService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setUnderwritingService(UnderwritingService service) {
        this.underwritingService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Underwriting instance.")
    public Underwriting createUnderwriting(@RequestBody Underwriting instance) {
        LOGGER.debug("Create Underwriting with information: {}", instance);
        instance = underwritingService.create(instance);
        LOGGER.debug("Created Underwriting with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Underwriting instances.")
    public Long countAllUnderwritings() {
        LOGGER.debug("counting Underwritings");
        Long count = underwritingService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Underwriting instance associated with the given id.")
    public Underwriting getUnderwriting(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Underwriting with id: {}", id);
        Underwriting instance = underwritingService.findById(id);
        LOGGER.debug("Underwriting details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Underwriting instance associated with the given id.")
    public Underwriting editUnderwriting(@PathVariable(value = "id") Integer id, @RequestBody Underwriting instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Underwriting with id: {}", instance.getId());
        instance.setId(id);
        instance = underwritingService.update(instance);
        LOGGER.debug("Underwriting details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Underwriting instance associated with the given id.")
    public boolean deleteUnderwriting(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Underwriting with id: {}", id);
        Underwriting deleted = underwritingService.delete(id);
        return deleted != null;
    }
}
