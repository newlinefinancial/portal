/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AuctionResultService;
import com.portal.platform.service.BuyerService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Buyer.
 * @see com.portal.platform.Buyer
 */
@RestController(value = "Platform.BuyerController")
@RequestMapping("/platform/Buyer")
@Api(description = "Exposes APIs to work with Buyer resource.", value = "BuyerController")
public class BuyerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuyerController.class);

    @Autowired
    @Qualifier("platform.BuyerService")
    private BuyerService buyerService;

    @Autowired
    @Qualifier("platform.AuctionResultService")
    private AuctionResultService auctionResultService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Buyer instances matching the search criteria.")
    public Page<Buyer> findBuyers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Buyers list");
        return buyerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Buyer instances.")
    public Page<Buyer> getBuyers(Pageable pageable) {
        LOGGER.debug("Rendering Buyers list");
        return buyerService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctionResultsForBuyerId", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctionResultsForBuyerId instance associated with the given id.")
    public Page<AuctionResult> findAssociatedauctionResultsForBuyerId(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctionResultsForBuyerId");
        return auctionResultService.findAssociatedValues(id, "buyerBySubBuyerId", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctionResultsForSubBuyerId", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctionResultsForSubBuyerId instance associated with the given id.")
    public Page<AuctionResult> findAssociatedauctionResultsForSubBuyerId(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctionResultsForSubBuyerId");
        return auctionResultService.findAssociatedValues(id, "buyerBySubBuyerId", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBuyerService(BuyerService service) {
        this.buyerService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Buyer instance.")
    public Buyer createBuyer(@RequestBody Buyer instance) {
        LOGGER.debug("Create Buyer with information: {}", instance);
        instance = buyerService.create(instance);
        LOGGER.debug("Created Buyer with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Buyer instances.")
    public Long countAllBuyers() {
        LOGGER.debug("counting Buyers");
        Long count = buyerService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Buyer instance associated with the given id.")
    public Buyer getBuyer(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Buyer with id: {}", id);
        Buyer instance = buyerService.findById(id);
        LOGGER.debug("Buyer details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Buyer instance associated with the given id.")
    public Buyer editBuyer(@PathVariable(value = "id") Integer id, @RequestBody Buyer instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Buyer with id: {}", instance.getId());
        instance.setId(id);
        instance = buyerService.update(instance);
        LOGGER.debug("Buyer details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Buyer instance associated with the given id.")
    public boolean deleteBuyer(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Buyer with id: {}", id);
        Buyer deleted = buyerService.delete(id);
        return deleted != null;
    }
}
