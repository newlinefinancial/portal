/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.AuctionResult;
import com.portal.platform.Buyer;
import com.portal.platform.service.AuctionResultService;
import com.portal.platform.service.BuyerService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Buyer.
 * @see Buyer
 */
@RestController("platform.BuyerController")
@RequestMapping("/platform/Buyer")
@Api(description = "Exposes APIs to work with Buyer resource.", value = "BuyerController")
public class BuyerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuyerController.class);

    @Autowired
    @Qualifier("platform.BuyerService")
    private BuyerService buyerService;

    @Autowired
    @Qualifier("platform.AuctionResultService")
    private AuctionResultService auctionResultService;

    /**
     * @deprecated Use {@link #findBuyers(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Buyer instances matching the search criteria.")
    public Page<Buyer> findBuyers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Buyers list");
        return buyerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Buyer instances matching the search criteria.")
    public Page<Buyer> findBuyers(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Buyers list");
        return buyerService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBuyers(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return buyerService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of Buyer instances.")
    public Long countBuyers(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Buyers");
        return buyerService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/auctionResultsForSubBuyerId", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctionResultsForSubBuyerId instance associated with the given id.")
    public Page<AuctionResult> findAssociatedAuctionResultsForSubBuyerId(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctionResultsForSubBuyerId");
        return auctionResultService.findAssociatedValues(id, "buyerBySubBuyerId", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctionResultsForBuyerId", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctionResultsForBuyerId instance associated with the given id.")
    public Page<AuctionResult> findAssociatedAuctionResultsForBuyerId(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctionResultsForBuyerId");
        return auctionResultService.findAssociatedValues(id, "buyerByBuyerId", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BuyerService instance
	 */
    protected void setBuyerService(BuyerService service) {
        this.buyerService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuctionResultService instance
	 */
    protected void setAuctionResultService(AuctionResultService service) {
        this.auctionResultService = service;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Buyer instance associated with the given id.")
    public Buyer getBuyer(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Buyer with id: {}", id);
        Buyer foundBuyer = buyerService.getById(id);
        LOGGER.debug("Buyer details with id: {}", foundBuyer);
        return foundBuyer;
    }
}
