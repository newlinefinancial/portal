/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Assessment;
import com.portal.platform.PropertyClass;
import com.portal.platform.service.AssessmentService;
import com.portal.platform.service.PropertyClassService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PropertyClass.
 * @see PropertyClass
 */
@RestController("platform.PropertyClassController")
@RequestMapping("/platform/PropertyClass")
@Api(description = "Exposes APIs to work with PropertyClass resource.", value = "PropertyClassController")
public class PropertyClassController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyClassController.class);

    @Autowired
    @Qualifier("platform.PropertyClassService")
    private PropertyClassService propertyClassService;

    @Autowired
    @Qualifier("platform.AssessmentService")
    private AssessmentService assessmentService;

    /**
     * @deprecated Use {@link #findPropertyClasses(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PropertyClass instances matching the search criteria.")
    public Page<PropertyClass> findPropertyClasses(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PropertyClasses list");
        return propertyClassService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PropertyClass instances matching the search criteria.")
    public Page<PropertyClass> findPropertyClasses(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PropertyClasses list");
        return propertyClassService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPropertyClasses(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return propertyClassService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of PropertyClass instances.")
    public Long countPropertyClasses(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PropertyClasses");
        return propertyClassService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/assessments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the assessments instance associated with the given id.")
    public Page<Assessment> findAssociatedAssessments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assessments");
        return assessmentService.findAssociatedValues(id, "propertyClass", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyClassService instance
	 */
    protected void setPropertyClassService(PropertyClassService service) {
        this.propertyClassService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentService instance
	 */
    protected void setAssessmentService(AssessmentService service) {
        this.assessmentService = service;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PropertyClass instance associated with the given id.")
    public PropertyClass getPropertyClass(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PropertyClass with id: {}", id);
        PropertyClass foundPropertyClass = propertyClassService.getById(id);
        LOGGER.debug("PropertyClass details with id: {}", foundPropertyClass);
        return foundPropertyClass;
    }
}
