/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.NoteService;
import com.portal.platform.service.NoteTypeService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class NoteType.
 * @see com.portal.platform.NoteType
 */
@RestController(value = "Platform.NoteTypeController")
@RequestMapping("/platform/NoteType")
@Api(description = "Exposes APIs to work with NoteType resource.", value = "NoteTypeController")
public class NoteTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NoteTypeController.class);

    @Autowired
    @Qualifier("platform.NoteTypeService")
    private NoteTypeService noteTypeService;

    @Autowired
    @Qualifier("platform.NoteService")
    private NoteService noteService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of NoteType instances matching the search criteria.")
    public Page<NoteType> findNoteTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NoteTypes list");
        return noteTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of NoteType instances.")
    public Page<NoteType> getNoteTypes(Pageable pageable) {
        LOGGER.debug("Rendering NoteTypes list");
        return noteTypeService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/notes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    public Page<Note> findAssociatednotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated notes");
        return noteService.findAssociatedValues(id, "noteType", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setNoteTypeService(NoteTypeService service) {
        this.noteTypeService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new NoteType instance.")
    public NoteType createNoteType(@RequestBody NoteType instance) {
        LOGGER.debug("Create NoteType with information: {}", instance);
        instance = noteTypeService.create(instance);
        LOGGER.debug("Created NoteType with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of NoteType instances.")
    public Long countAllNoteTypes() {
        LOGGER.debug("counting NoteTypes");
        Long count = noteTypeService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the NoteType instance associated with the given id.")
    public NoteType getNoteType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting NoteType with id: {}", id);
        NoteType instance = noteTypeService.findById(id);
        LOGGER.debug("NoteType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the NoteType instance associated with the given id.")
    public NoteType editNoteType(@PathVariable(value = "id") Integer id, @RequestBody NoteType instance) throws EntityNotFoundException {
        LOGGER.debug("Editing NoteType with id: {}", instance.getId());
        instance.setId(id);
        instance = noteTypeService.update(instance);
        LOGGER.debug("NoteType details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the NoteType instance associated with the given id.")
    public boolean deleteNoteType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting NoteType with id: {}", id);
        NoteType deleted = noteTypeService.delete(id);
        return deleted != null;
    }
}
