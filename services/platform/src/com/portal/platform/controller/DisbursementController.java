/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Accrual;
import com.portal.platform.Disbursement;
import com.portal.platform.Payment;
import com.portal.platform.service.AccrualService;
import com.portal.platform.service.DisbursementService;
import com.portal.platform.service.PaymentService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Disbursement.
 * @see Disbursement
 */
@RestController("platform.DisbursementController")
@RequestMapping("/platform/Disbursement")
@Api(description = "Exposes APIs to work with Disbursement resource.", value = "DisbursementController")
public class DisbursementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisbursementController.class);

    @Autowired
    @Qualifier("platform.DisbursementService")
    private DisbursementService disbursementService;

    @Autowired
    @Qualifier("platform.AccrualService")
    private AccrualService accrualService;

    @Autowired
    @Qualifier("platform.PaymentService")
    private PaymentService paymentService;

    /**
     * @deprecated Use {@link #findDisbursements(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Disbursement instances matching the search criteria.")
    public Page<Disbursement> findDisbursements(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Disbursements list");
        return disbursementService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Disbursement instances matching the search criteria.")
    public Page<Disbursement> findDisbursements(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Disbursements list");
        return disbursementService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportDisbursements(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return disbursementService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/payments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the payments instance associated with the given id.")
    public Page<Payment> findAssociatedPayments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payments");
        return paymentService.findAssociatedValues(id, "disbursement", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/accruals", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the accruals instance associated with the given id.")
    public Page<Accrual> findAssociatedAccruals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated accruals");
        return accrualService.findAssociatedValues(id, "disbursement", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DisbursementService instance
	 */
    protected void setDisbursementService(DisbursementService service) {
        this.disbursementService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccrualService instance
	 */
    protected void setAccrualService(AccrualService service) {
        this.accrualService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentService instance
	 */
    protected void setPaymentService(PaymentService service) {
        this.paymentService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Disbursement instances.")
    public Long countDisbursements(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Disbursements");
        return disbursementService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Disbursement instance associated with the given id.")
    public Disbursement getDisbursement(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Disbursement with id: {}", id);
        Disbursement foundDisbursement = disbursementService.getById(id);
        LOGGER.debug("Disbursement details with id: {}", foundDisbursement);
        return foundDisbursement;
    }
}
