/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalTagsService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalTags.
 * @see com.portal.platform.PortalTags
 */
@RestController(value = "Platform.PortalTagsController")
@RequestMapping("/platform/PortalTags")
@Api(description = "Exposes APIs to work with PortalTags resource.", value = "PortalTagsController")
public class PortalTagsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalTagsController.class);

    @Autowired
    @Qualifier("platform.PortalTagsService")
    private PortalTagsService portalTagsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalTags instances matching the search criteria.")
    public Page<PortalTags> findPortalTagss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalTagss list");
        return portalTagsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalTags instances.")
    public Page<PortalTags> getPortalTagss(Pageable pageable) {
        LOGGER.debug("Rendering PortalTagss list");
        return portalTagsService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalTagsService(PortalTagsService service) {
        this.portalTagsService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalTags instance.")
    public PortalTags createPortalTags(@RequestBody PortalTags instance) {
        LOGGER.debug("Create PortalTags with information: {}", instance);
        instance = portalTagsService.create(instance);
        LOGGER.debug("Created PortalTags with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalTags instance associated with the given composite-id.")
    public PortalTags getPortalTags(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "review", required = true) Integer review, @RequestParam(value = "inspect", required = true) Integer inspect, @RequestParam(value = "checkCounty", required = true) Integer checkCounty, @RequestParam(value = "checkTitle", required = true) Integer checkTitle, @RequestParam(value = "good", required = true) Integer good, @RequestParam(value = "meh", required = true) Integer meh, @RequestParam(value = "poor", required = true) Integer poor, @RequestParam(value = "vacant", required = true) Integer vacant, @RequestParam(value = "boarded", required = true) Integer boarded, @RequestParam(value = "gone", required = true) Integer gone, @RequestParam(value = "ng", required = true) Integer ng, @RequestParam(value = "forSale", required = true) Integer forSale, @RequestParam(value = "divided", required = true) Integer divided, @RequestParam(value = "tax_valueIssue", required = true) Integer tax_valueIssue, @RequestParam(value = "buildingCourt", required = true) Integer buildingCourt, @RequestParam(value = "demoLien", required = true) Integer demoLien, @RequestParam(value = "demoOrder", required = true) Integer demoOrder, @RequestParam(value = "extension", required = true) Integer extension, @RequestParam(value = "takeNotice", required = true) Integer takeNotice, @RequestParam(value = "redemptionLetter", required = true) Integer redemptionLetter, @RequestParam(value = "sieHearing", required = true) Integer sieHearing) throws EntityNotFoundException {
        PortalTagsId temp = new PortalTagsId();
        temp.setPropertyId(propertyId);
        temp.setReview(review);
        temp.setInspect(inspect);
        temp.setCheckCounty(checkCounty);
        temp.setCheckTitle(checkTitle);
        temp.setGood(good);
        temp.setMeh(meh);
        temp.setPoor(poor);
        temp.setVacant(vacant);
        temp.setBoarded(boarded);
        temp.setGone(gone);
        temp.setNg(ng);
        temp.setForSale(forSale);
        temp.setDivided(divided);
        temp.setTax_valueIssue(tax_valueIssue);
        temp.setBuildingCourt(buildingCourt);
        temp.setDemoLien(demoLien);
        temp.setDemoOrder(demoOrder);
        temp.setExtension(extension);
        temp.setTakeNotice(takeNotice);
        temp.setRedemptionLetter(redemptionLetter);
        temp.setSieHearing(sieHearing);
        LOGGER.debug("Getting PortalTags with id: {}", temp);
        PortalTags instance = portalTagsService.findById(temp);
        LOGGER.debug("PortalTags details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalTags instance associated with the given composite-id.")
    public PortalTags editPortalTags(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "review", required = true) Integer review, @RequestParam(value = "inspect", required = true) Integer inspect, @RequestParam(value = "checkCounty", required = true) Integer checkCounty, @RequestParam(value = "checkTitle", required = true) Integer checkTitle, @RequestParam(value = "good", required = true) Integer good, @RequestParam(value = "meh", required = true) Integer meh, @RequestParam(value = "poor", required = true) Integer poor, @RequestParam(value = "vacant", required = true) Integer vacant, @RequestParam(value = "boarded", required = true) Integer boarded, @RequestParam(value = "gone", required = true) Integer gone, @RequestParam(value = "ng", required = true) Integer ng, @RequestParam(value = "forSale", required = true) Integer forSale, @RequestParam(value = "divided", required = true) Integer divided, @RequestParam(value = "tax_valueIssue", required = true) Integer tax_valueIssue, @RequestParam(value = "buildingCourt", required = true) Integer buildingCourt, @RequestParam(value = "demoLien", required = true) Integer demoLien, @RequestParam(value = "demoOrder", required = true) Integer demoOrder, @RequestParam(value = "extension", required = true) Integer extension, @RequestParam(value = "takeNotice", required = true) Integer takeNotice, @RequestParam(value = "redemptionLetter", required = true) Integer redemptionLetter, @RequestParam(value = "sieHearing", required = true) Integer sieHearing, @RequestBody PortalTags instance) throws EntityNotFoundException {
        PortalTagsId temp = new PortalTagsId();
        temp.setPropertyId(propertyId);
        temp.setReview(review);
        temp.setInspect(inspect);
        temp.setCheckCounty(checkCounty);
        temp.setCheckTitle(checkTitle);
        temp.setGood(good);
        temp.setMeh(meh);
        temp.setPoor(poor);
        temp.setVacant(vacant);
        temp.setBoarded(boarded);
        temp.setGone(gone);
        temp.setNg(ng);
        temp.setForSale(forSale);
        temp.setDivided(divided);
        temp.setTax_valueIssue(tax_valueIssue);
        temp.setBuildingCourt(buildingCourt);
        temp.setDemoLien(demoLien);
        temp.setDemoOrder(demoOrder);
        temp.setExtension(extension);
        temp.setTakeNotice(takeNotice);
        temp.setRedemptionLetter(redemptionLetter);
        temp.setSieHearing(sieHearing);
        portalTagsService.delete(temp);
        instance = portalTagsService.create(instance);
        LOGGER.debug("PortalTags details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalTags instance associated with the given composite-id.")
    public boolean deletePortalTags(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "review", required = true) Integer review, @RequestParam(value = "inspect", required = true) Integer inspect, @RequestParam(value = "checkCounty", required = true) Integer checkCounty, @RequestParam(value = "checkTitle", required = true) Integer checkTitle, @RequestParam(value = "good", required = true) Integer good, @RequestParam(value = "meh", required = true) Integer meh, @RequestParam(value = "poor", required = true) Integer poor, @RequestParam(value = "vacant", required = true) Integer vacant, @RequestParam(value = "boarded", required = true) Integer boarded, @RequestParam(value = "gone", required = true) Integer gone, @RequestParam(value = "ng", required = true) Integer ng, @RequestParam(value = "forSale", required = true) Integer forSale, @RequestParam(value = "divided", required = true) Integer divided, @RequestParam(value = "tax_valueIssue", required = true) Integer tax_valueIssue, @RequestParam(value = "buildingCourt", required = true) Integer buildingCourt, @RequestParam(value = "demoLien", required = true) Integer demoLien, @RequestParam(value = "demoOrder", required = true) Integer demoOrder, @RequestParam(value = "extension", required = true) Integer extension, @RequestParam(value = "takeNotice", required = true) Integer takeNotice, @RequestParam(value = "redemptionLetter", required = true) Integer redemptionLetter, @RequestParam(value = "sieHearing", required = true) Integer sieHearing) throws EntityNotFoundException {
        PortalTagsId temp = new PortalTagsId();
        temp.setPropertyId(propertyId);
        temp.setReview(review);
        temp.setInspect(inspect);
        temp.setCheckCounty(checkCounty);
        temp.setCheckTitle(checkTitle);
        temp.setGood(good);
        temp.setMeh(meh);
        temp.setPoor(poor);
        temp.setVacant(vacant);
        temp.setBoarded(boarded);
        temp.setGone(gone);
        temp.setNg(ng);
        temp.setForSale(forSale);
        temp.setDivided(divided);
        temp.setTax_valueIssue(tax_valueIssue);
        temp.setBuildingCourt(buildingCourt);
        temp.setDemoLien(demoLien);
        temp.setDemoOrder(demoOrder);
        temp.setExtension(extension);
        temp.setTakeNotice(takeNotice);
        temp.setRedemptionLetter(redemptionLetter);
        temp.setSieHearing(sieHearing);
        LOGGER.debug("Deleting PortalTags with id: {}", temp);
        PortalTags deleted = portalTagsService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalTags instances.")
    public Long countAllPortalTagss() {
        LOGGER.debug("counting PortalTagss");
        Long count = portalTagsService.countAll();
        return count;
    }
}
