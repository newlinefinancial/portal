/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalLinksService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalLinks.
 * @see com.portal.platform.PortalLinks
 */
@RestController(value = "Platform.PortalLinksController")
@RequestMapping("/platform/PortalLinks")
@Api(description = "Exposes APIs to work with PortalLinks resource.", value = "PortalLinksController")
public class PortalLinksController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalLinksController.class);

    @Autowired
    @Qualifier("platform.PortalLinksService")
    private PortalLinksService portalLinksService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalLinks instances matching the search criteria.")
    public Page<PortalLinks> findPortalLinkss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalLinkss list");
        return portalLinksService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalLinks instances.")
    public Page<PortalLinks> getPortalLinkss(Pageable pageable) {
        LOGGER.debug("Rendering PortalLinkss list");
        return portalLinksService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalLinksService(PortalLinksService service) {
        this.portalLinksService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalLinks instance.")
    public PortalLinks createPortalLinks(@RequestBody PortalLinks instance) {
        LOGGER.debug("Create PortalLinks with information: {}", instance);
        instance = portalLinksService.create(instance);
        LOGGER.debug("Created PortalLinks with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalLinks instance associated with the given composite-id.")
    public PortalLinks getPortalLinks(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "gis", required = true) String gis, @RequestParam(value = "assessor", required = true) String assessor, @RequestParam(value = "treasurer", required = true) String treasurer, @RequestParam(value = "recorder", required = true) String recorder, @RequestParam(value = "clerk", required = true) String clerk, @RequestParam(value = "newlinePhoto", required = true) String newlinePhoto) throws EntityNotFoundException {
        PortalLinksId temp = new PortalLinksId();
        temp.setPropertyId(propertyId);
        temp.setGis(gis);
        temp.setAssessor(assessor);
        temp.setTreasurer(treasurer);
        temp.setRecorder(recorder);
        temp.setClerk(clerk);
        temp.setNewlinePhoto(newlinePhoto);
        LOGGER.debug("Getting PortalLinks with id: {}", temp);
        PortalLinks instance = portalLinksService.findById(temp);
        LOGGER.debug("PortalLinks details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalLinks instance associated with the given composite-id.")
    public PortalLinks editPortalLinks(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "gis", required = true) String gis, @RequestParam(value = "assessor", required = true) String assessor, @RequestParam(value = "treasurer", required = true) String treasurer, @RequestParam(value = "recorder", required = true) String recorder, @RequestParam(value = "clerk", required = true) String clerk, @RequestParam(value = "newlinePhoto", required = true) String newlinePhoto, @RequestBody PortalLinks instance) throws EntityNotFoundException {
        PortalLinksId temp = new PortalLinksId();
        temp.setPropertyId(propertyId);
        temp.setGis(gis);
        temp.setAssessor(assessor);
        temp.setTreasurer(treasurer);
        temp.setRecorder(recorder);
        temp.setClerk(clerk);
        temp.setNewlinePhoto(newlinePhoto);
        portalLinksService.delete(temp);
        instance = portalLinksService.create(instance);
        LOGGER.debug("PortalLinks details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalLinks instance associated with the given composite-id.")
    public boolean deletePortalLinks(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "gis", required = true) String gis, @RequestParam(value = "assessor", required = true) String assessor, @RequestParam(value = "treasurer", required = true) String treasurer, @RequestParam(value = "recorder", required = true) String recorder, @RequestParam(value = "clerk", required = true) String clerk, @RequestParam(value = "newlinePhoto", required = true) String newlinePhoto) throws EntityNotFoundException {
        PortalLinksId temp = new PortalLinksId();
        temp.setPropertyId(propertyId);
        temp.setGis(gis);
        temp.setAssessor(assessor);
        temp.setTreasurer(treasurer);
        temp.setRecorder(recorder);
        temp.setClerk(clerk);
        temp.setNewlinePhoto(newlinePhoto);
        LOGGER.debug("Deleting PortalLinks with id: {}", temp);
        PortalLinks deleted = portalLinksService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalLinks instances.")
    public Long countAllPortalLinkss() {
        LOGGER.debug("counting PortalLinkss");
        Long count = portalLinksService.countAll();
        return count;
    }
}
