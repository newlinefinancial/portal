/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Accrual;
import com.portal.platform.AvailableSubs;
import com.portal.platform.Certificate;
import com.portal.platform.CertificateParty;
import com.portal.platform.Disbursement;
import com.portal.platform.Matter;
import com.portal.platform.Note;
import com.portal.platform.Payment;
import com.portal.platform.service.AccrualService;
import com.portal.platform.service.AvailableSubsService;
import com.portal.platform.service.CertificatePartyService;
import com.portal.platform.service.CertificateService;
import com.portal.platform.service.DisbursementService;
import com.portal.platform.service.MatterService;
import com.portal.platform.service.NoteService;
import com.portal.platform.service.PaymentService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Certificate.
 * @see Certificate
 */
@RestController("platform.CertificateController")
@RequestMapping("/platform/Certificate")
@Api(description = "Exposes APIs to work with Certificate resource.", value = "CertificateController")
public class CertificateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CertificateController.class);

    @Autowired
    @Qualifier("platform.CertificateService")
    private CertificateService certificateService;

    @Autowired
    @Qualifier("platform.AccrualService")
    private AccrualService accrualService;

    @Autowired
    @Qualifier("platform.DisbursementService")
    private DisbursementService disbursementService;

    @Autowired
    @Qualifier("platform.CertificatePartyService")
    private CertificatePartyService certificatePartyService;

    @Autowired
    @Qualifier("platform.AvailableSubsService")
    private AvailableSubsService availableSubsService;

    @Autowired
    @Qualifier("platform.NoteService")
    private NoteService noteService;

    @Autowired
    @Qualifier("platform.MatterService")
    private MatterService matterService;

    @Autowired
    @Qualifier("platform.PaymentService")
    private PaymentService paymentService;

    /**
     * @deprecated Use {@link #findCertificates(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Certificate instances matching the search criteria.")
    public Page<Certificate> findCertificates(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Certificates list");
        return certificateService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Certificate instances matching the search criteria.")
    public Page<Certificate> findCertificates(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Certificates list");
        return certificateService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCertificates(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return certificateService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/disbursements", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the disbursements instance associated with the given id.")
    public Page<Disbursement> findAssociatedDisbursements(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated disbursements");
        return disbursementService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/notes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    public Page<Note> findAssociatedNotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated notes");
        return noteService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/matters", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the matters instance associated with the given id.")
    public Page<Matter> findAssociatedMatters(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated matters");
        return matterService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/payments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the payments instance associated with the given id.")
    public Page<Payment> findAssociatedPayments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payments");
        return paymentService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/accruals", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the accruals instance associated with the given id.")
    public Page<Accrual> findAssociatedAccruals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated accruals");
        return accrualService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/availableSubses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the availableSubses instance associated with the given id.")
    public Page<AvailableSubs> findAssociatedAvailableSubses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated availableSubses");
        return availableSubsService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificateParties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificateParties instance associated with the given id.")
    public Page<CertificateParty> findAssociatedCertificateParties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated certificateParties");
        return certificatePartyService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CertificateService instance
	 */
    protected void setCertificateService(CertificateService service) {
        this.certificateService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccrualService instance
	 */
    protected void setAccrualService(AccrualService service) {
        this.accrualService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DisbursementService instance
	 */
    protected void setDisbursementService(DisbursementService service) {
        this.disbursementService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CertificatePartyService instance
	 */
    protected void setCertificatePartyService(CertificatePartyService service) {
        this.certificatePartyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AvailableSubsService instance
	 */
    protected void setAvailableSubsService(AvailableSubsService service) {
        this.availableSubsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NoteService instance
	 */
    protected void setNoteService(NoteService service) {
        this.noteService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MatterService instance
	 */
    protected void setMatterService(MatterService service) {
        this.matterService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentService instance
	 */
    protected void setPaymentService(PaymentService service) {
        this.paymentService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Certificate instances.")
    public Long countCertificates(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Certificates");
        return certificateService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Certificate instance associated with the given id.")
    public Certificate getCertificate(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Certificate with id: {}", id);
        Certificate foundCertificate = certificateService.getById(id);
        LOGGER.debug("Certificate details with id: {}", foundCertificate);
        return foundCertificate;
    }
}
