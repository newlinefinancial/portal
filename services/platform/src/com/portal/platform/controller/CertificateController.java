/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AccrualService;
import com.portal.platform.service.AvailableSubsService;
import com.portal.platform.service.CertificateService;
import com.portal.platform.service.DisbursementService;
import com.portal.platform.service.MatterService;
import com.portal.platform.service.NoteService;
import com.portal.platform.service.PaymentService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Certificate.
 * @see com.portal.platform.Certificate
 */
@RestController(value = "Platform.CertificateController")
@RequestMapping("/platform/Certificate")
@Api(description = "Exposes APIs to work with Certificate resource.", value = "CertificateController")
public class CertificateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CertificateController.class);

    @Autowired
    @Qualifier("platform.CertificateService")
    private CertificateService certificateService;

    @Autowired
    @Qualifier("platform.MatterService")
    private MatterService matterService;

    @Autowired
    @Qualifier("platform.AccrualService")
    private AccrualService accrualService;

    @Autowired
    @Qualifier("platform.AvailableSubsService")
    private AvailableSubsService availableSubsService;

    @Autowired
    @Qualifier("platform.NoteService")
    private NoteService noteService;

    @Autowired
    @Qualifier("platform.DisbursementService")
    private DisbursementService disbursementService;

    @Autowired
    @Qualifier("platform.PaymentService")
    private PaymentService paymentService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Certificate instances matching the search criteria.")
    public Page<Certificate> findCertificates(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Certificates list");
        return certificateService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Certificate instances.")
    public Page<Certificate> getCertificates(Pageable pageable) {
        LOGGER.debug("Rendering Certificates list");
        return certificateService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/accruals", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the accruals instance associated with the given id.")
    public Page<Accrual> findAssociatedaccruals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated accruals");
        return accrualService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/availableSubses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the availableSubses instance associated with the given id.")
    public Page<AvailableSubs> findAssociatedavailableSubses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated availableSubses");
        return availableSubsService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/payments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the payments instance associated with the given id.")
    public Page<Payment> findAssociatedpayments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payments");
        return paymentService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/disbursements", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the disbursements instance associated with the given id.")
    public Page<Disbursement> findAssociateddisbursements(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated disbursements");
        return disbursementService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/matters", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the matters instance associated with the given id.")
    public Page<Matter> findAssociatedmatters(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated matters");
        return matterService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/notes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the notes instance associated with the given id.")
    public Page<Note> findAssociatednotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated notes");
        return noteService.findAssociatedValues(id, "certificate", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCertificateService(CertificateService service) {
        this.certificateService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Certificate instance.")
    public Certificate createCertificate(@RequestBody Certificate instance) {
        LOGGER.debug("Create Certificate with information: {}", instance);
        instance = certificateService.create(instance);
        LOGGER.debug("Created Certificate with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Certificate instances.")
    public Long countAllCertificates() {
        LOGGER.debug("counting Certificates");
        Long count = certificateService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Certificate instance associated with the given id.")
    public Certificate getCertificate(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Certificate with id: {}", id);
        Certificate instance = certificateService.findById(id);
        LOGGER.debug("Certificate details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Certificate instance associated with the given id.")
    public Certificate editCertificate(@PathVariable(value = "id") Integer id, @RequestBody Certificate instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Certificate with id: {}", instance.getId());
        instance.setId(id);
        instance = certificateService.update(instance);
        LOGGER.debug("Certificate details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Certificate instance associated with the given id.")
    public boolean deleteCertificate(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Certificate with id: {}", id);
        Certificate deleted = certificateService.delete(id);
        return deleted != null;
    }
}
