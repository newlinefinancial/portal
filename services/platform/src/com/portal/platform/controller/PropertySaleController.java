/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PropertySaleService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PropertySale.
 * @see com.portal.platform.PropertySale
 */
@RestController(value = "Platform.PropertySaleController")
@RequestMapping("/platform/PropertySale")
@Api(description = "Exposes APIs to work with PropertySale resource.", value = "PropertySaleController")
public class PropertySaleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertySaleController.class);

    @Autowired
    @Qualifier("platform.PropertySaleService")
    private PropertySaleService propertySaleService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PropertySale instances matching the search criteria.")
    public Page<PropertySale> findPropertySales(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PropertySales list");
        return propertySaleService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PropertySale instances.")
    public Page<PropertySale> getPropertySales(Pageable pageable) {
        LOGGER.debug("Rendering PropertySales list");
        return propertySaleService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPropertySaleService(PropertySaleService service) {
        this.propertySaleService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PropertySale instance.")
    public PropertySale createPropertySale(@RequestBody PropertySale instance) {
        LOGGER.debug("Create PropertySale with information: {}", instance);
        instance = propertySaleService.create(instance);
        LOGGER.debug("Created PropertySale with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PropertySale instances.")
    public Long countAllPropertySales() {
        LOGGER.debug("counting PropertySales");
        Long count = propertySaleService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PropertySale instance associated with the given id.")
    public PropertySale getPropertySale(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PropertySale with id: {}", id);
        PropertySale instance = propertySaleService.findById(id);
        LOGGER.debug("PropertySale details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PropertySale instance associated with the given id.")
    public PropertySale editPropertySale(@PathVariable(value = "id") Integer id, @RequestBody PropertySale instance) throws EntityNotFoundException {
        LOGGER.debug("Editing PropertySale with id: {}", instance.getId());
        instance.setId(id);
        instance = propertySaleService.update(instance);
        LOGGER.debug("PropertySale details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PropertySale instance associated with the given id.")
    public boolean deletePropertySale(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PropertySale with id: {}", id);
        PropertySale deleted = propertySaleService.delete(id);
        return deleted != null;
    }
}
