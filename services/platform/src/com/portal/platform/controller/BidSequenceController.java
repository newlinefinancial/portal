/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.BidSequenceService;
import java.math.BigInteger;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BidSequence.
 * @see com.portal.platform.BidSequence
 */
@RestController(value = "Platform.BidSequenceController")
@RequestMapping("/platform/BidSequence")
@Api(description = "Exposes APIs to work with BidSequence resource.", value = "BidSequenceController")
public class BidSequenceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BidSequenceController.class);

    @Autowired
    @Qualifier("platform.BidSequenceService")
    private BidSequenceService bidSequenceService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BidSequence instances matching the search criteria.")
    public Page<BidSequence> findBidSequences(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BidSequences list");
        return bidSequenceService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BidSequence instances.")
    public Page<BidSequence> getBidSequences(Pageable pageable) {
        LOGGER.debug("Rendering BidSequences list");
        return bidSequenceService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBidSequenceService(BidSequenceService service) {
        this.bidSequenceService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BidSequence instance.")
    public BidSequence createBidSequence(@RequestBody BidSequence instance) {
        LOGGER.debug("Create BidSequence with information: {}", instance);
        instance = bidSequenceService.create(instance);
        LOGGER.debug("Created BidSequence with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BidSequence instance associated with the given composite-id.")
    public BidSequence getBidSequence(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "order", required = true) BigInteger order) throws EntityNotFoundException {
        BidSequenceId temp = new BidSequenceId();
        temp.setAuctionId(auctionId);
        temp.setTaxYear(taxYear);
        temp.setPropertyId(propertyId);
        temp.setAuctionDay(auctionDay);
        temp.setOrder(order);
        LOGGER.debug("Getting BidSequence with id: {}", temp);
        BidSequence instance = bidSequenceService.findById(temp);
        LOGGER.debug("BidSequence details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BidSequence instance associated with the given composite-id.")
    public BidSequence editBidSequence(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "order", required = true) BigInteger order, @RequestBody BidSequence instance) throws EntityNotFoundException {
        BidSequenceId temp = new BidSequenceId();
        temp.setAuctionId(auctionId);
        temp.setTaxYear(taxYear);
        temp.setPropertyId(propertyId);
        temp.setAuctionDay(auctionDay);
        temp.setOrder(order);
        bidSequenceService.delete(temp);
        instance = bidSequenceService.create(instance);
        LOGGER.debug("BidSequence details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BidSequence instance associated with the given composite-id.")
    public boolean deleteBidSequence(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "order", required = true) BigInteger order) throws EntityNotFoundException {
        BidSequenceId temp = new BidSequenceId();
        temp.setAuctionId(auctionId);
        temp.setTaxYear(taxYear);
        temp.setPropertyId(propertyId);
        temp.setAuctionDay(auctionDay);
        temp.setOrder(order);
        LOGGER.debug("Deleting BidSequence with id: {}", temp);
        BidSequence deleted = bidSequenceService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BidSequence instances.")
    public Long countAllBidSequences() {
        LOGGER.debug("counting BidSequences");
        Long count = bidSequenceService.countAll();
        return count;
    }
}
