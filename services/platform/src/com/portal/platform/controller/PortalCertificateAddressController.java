/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalCertificateAddress;
import com.portal.platform.PortalCertificateAddressId;
import com.portal.platform.service.PortalCertificateAddressService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateAddress.
 * @see PortalCertificateAddress
 */
@RestController("platform.PortalCertificateAddressController")
@RequestMapping("/platform/PortalCertificateAddress")
@Api(description = "Exposes APIs to work with PortalCertificateAddress resource.", value = "PortalCertificateAddressController")
public class PortalCertificateAddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateAddressController.class);

    @Autowired
    @Qualifier("platform.PortalCertificateAddressService")
    private PortalCertificateAddressService portalCertificateAddressService;

    /**
     * @deprecated Use {@link #findPortalCertificateAddresses(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateAddress instances matching the search criteria.")
    public Page<PortalCertificateAddress> findPortalCertificateAddresses(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateAddresses list");
        return portalCertificateAddressService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateAddress instances matching the search criteria.")
    public Page<PortalCertificateAddress> findPortalCertificateAddresses(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateAddresses list");
        return portalCertificateAddressService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalCertificateAddresses(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalCertificateAddressService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalCertificateAddressService instance
	 */
    protected void setPortalCertificateAddressService(PortalCertificateAddressService service) {
        this.portalCertificateAddressService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalCertificateAddress instance associated with the given composite-id.")
    public PortalCertificateAddress getPortalCertificateAddress(@RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "certificateId", required = true) int certificateId, @RequestParam(value = "bank", required = true) String bank, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "volume", required = true) int volume, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "addressVerified", required = true) boolean addressVerified, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "zoning", required = true) String zoning, @RequestParam(value = "improvementLevel", required = true) String improvementLevel, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid) throws EntityNotFoundException {
        PortalCertificateAddressId portalcertificateaddressId = new PortalCertificateAddressId();
        portalcertificateaddressId.setCountyName(countyName);
        portalcertificateaddressId.setCertificateId(certificateId);
        portalcertificateaddressId.setBank(bank);
        portalcertificateaddressId.setTaxYear(taxYear);
        portalcertificateaddressId.setVolume(volume);
        portalcertificateaddressId.setPin(pin);
        portalcertificateaddressId.setCertificateNumber(certificateNumber);
        portalcertificateaddressId.setDateSold(dateSold);
        portalcertificateaddressId.setExpirationDate(expirationDate);
        portalcertificateaddressId.setStatus(status);
        portalcertificateaddressId.setTaxYearNotices(taxYearNotices);
        portalcertificateaddressId.setAddressLine1(addressLine1);
        portalcertificateaddressId.setAddressLine2(addressLine2);
        portalcertificateaddressId.setAddressCity(addressCity);
        portalcertificateaddressId.setAddressZip(addressZip);
        portalcertificateaddressId.setAddressVerified(addressVerified);
        portalcertificateaddressId.setAddressSource1(addressSource1);
        portalcertificateaddressId.setAddressSource2(addressSource2);
        portalcertificateaddressId.setAssesseeName(assesseeName);
        portalcertificateaddressId.setAssesseeAddressLine1(assesseeAddressLine1);
        portalcertificateaddressId.setAssesseeAddressCity(assesseeAddressCity);
        portalcertificateaddressId.setAssesseeAddressState(assesseeAddressState);
        portalcertificateaddressId.setAssesseeAddressZip(assesseeAddressZip);
        portalcertificateaddressId.setCode(code);
        portalcertificateaddressId.setZoning(zoning);
        portalcertificateaddressId.setImprovementLevel(improvementLevel);
        portalcertificateaddressId.setCertificatePrincipal(certificatePrincipal);
        portalcertificateaddressId.setSubPrincipal(subPrincipal);
        portalcertificateaddressId.setFeePrincipal(feePrincipal);
        portalcertificateaddressId.setPrincipal(principal);
        portalcertificateaddressId.setCertificateRevenue(certificateRevenue);
        portalcertificateaddressId.setSubRevenue(subRevenue);
        portalcertificateaddressId.setFeeRevenue(feeRevenue);
        portalcertificateaddressId.setRevenue(revenue);
        portalcertificateaddressId.setRedemptionAmount(redemptionAmount);
        portalcertificateaddressId.setAmountPaid(amountPaid);
        LOGGER.debug("Getting PortalCertificateAddress with id: {}", portalcertificateaddressId);
        PortalCertificateAddress portalcertificateaddress = portalCertificateAddressService.getById(portalcertificateaddressId);
        LOGGER.debug("PortalCertificateAddress details with id: {}", portalcertificateaddress);
        return portalcertificateaddress;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalCertificateAddress instances.")
    public Long countPortalCertificateAddresses(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalCertificateAddresses");
        return portalCertificateAddressService.count(query);
    }
}
