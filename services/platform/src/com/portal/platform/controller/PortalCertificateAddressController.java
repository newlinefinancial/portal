/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalCertificateAddressService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateAddress.
 * @see com.portal.platform.PortalCertificateAddress
 */
@RestController(value = "Platform.PortalCertificateAddressController")
@RequestMapping("/platform/PortalCertificateAddress")
@Api(description = "Exposes APIs to work with PortalCertificateAddress resource.", value = "PortalCertificateAddressController")
public class PortalCertificateAddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificateAddressController.class);

    @Autowired
    @Qualifier("platform.PortalCertificateAddressService")
    private PortalCertificateAddressService portalCertificateAddressService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateAddress instances matching the search criteria.")
    public Page<PortalCertificateAddress> findPortalCertificateAddresss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateAddresss list");
        return portalCertificateAddressService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateAddress instances.")
    public Page<PortalCertificateAddress> getPortalCertificateAddresss(Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateAddresss list");
        return portalCertificateAddressService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalCertificateAddressService(PortalCertificateAddressService service) {
        this.portalCertificateAddressService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalCertificateAddress instance.")
    public PortalCertificateAddress createPortalCertificateAddress(@RequestBody PortalCertificateAddress instance) {
        LOGGER.debug("Create PortalCertificateAddress with information: {}", instance);
        instance = portalCertificateAddressService.create(instance);
        LOGGER.debug("Created PortalCertificateAddress with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalCertificateAddress instance associated with the given composite-id.")
    public PortalCertificateAddress getPortalCertificateAddress(@RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "bank", required = true) String bank, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "addressVerified", required = true) Boolean addressVerified, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "zoning", required = true) String zoning, @RequestParam(value = "improvementLevel", required = true) String improvementLevel, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid) throws EntityNotFoundException {
        PortalCertificateAddressId temp = new PortalCertificateAddressId();
        temp.setCountyName(countyName);
        temp.setCertificateId(certificateId);
        temp.setBank(bank);
        temp.setTaxYear(taxYear);
        temp.setVolume(volume);
        temp.setPin(pin);
        temp.setCertificateNumber(certificateNumber);
        temp.setDateSold(dateSold);
        temp.setExpirationDate(expirationDate);
        temp.setStatus(status);
        temp.setTaxYearNotices(taxYearNotices);
        temp.setAddressLine1(addressLine1);
        temp.setAddressLine2(addressLine2);
        temp.setAddressCity(addressCity);
        temp.setAddressZip(addressZip);
        temp.setAddressVerified(addressVerified);
        temp.setAddressSource1(addressSource1);
        temp.setAddressSource2(addressSource2);
        temp.setAssesseeName(assesseeName);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setCode(code);
        temp.setZoning(zoning);
        temp.setImprovementLevel(improvementLevel);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setFeePrincipal(feePrincipal);
        temp.setPrincipal(principal);
        temp.setCertificateRevenue(certificateRevenue);
        temp.setSubRevenue(subRevenue);
        temp.setFeeRevenue(feeRevenue);
        temp.setRevenue(revenue);
        temp.setRedemptionAmount(redemptionAmount);
        temp.setAmountPaid(amountPaid);
        LOGGER.debug("Getting PortalCertificateAddress with id: {}", temp);
        PortalCertificateAddress instance = portalCertificateAddressService.findById(temp);
        LOGGER.debug("PortalCertificateAddress details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalCertificateAddress instance associated with the given composite-id.")
    public PortalCertificateAddress editPortalCertificateAddress(@RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "bank", required = true) String bank, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "addressVerified", required = true) Boolean addressVerified, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "zoning", required = true) String zoning, @RequestParam(value = "improvementLevel", required = true) String improvementLevel, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid, @RequestBody PortalCertificateAddress instance) throws EntityNotFoundException {
        PortalCertificateAddressId temp = new PortalCertificateAddressId();
        temp.setCountyName(countyName);
        temp.setCertificateId(certificateId);
        temp.setBank(bank);
        temp.setTaxYear(taxYear);
        temp.setVolume(volume);
        temp.setPin(pin);
        temp.setCertificateNumber(certificateNumber);
        temp.setDateSold(dateSold);
        temp.setExpirationDate(expirationDate);
        temp.setStatus(status);
        temp.setTaxYearNotices(taxYearNotices);
        temp.setAddressLine1(addressLine1);
        temp.setAddressLine2(addressLine2);
        temp.setAddressCity(addressCity);
        temp.setAddressZip(addressZip);
        temp.setAddressVerified(addressVerified);
        temp.setAddressSource1(addressSource1);
        temp.setAddressSource2(addressSource2);
        temp.setAssesseeName(assesseeName);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setCode(code);
        temp.setZoning(zoning);
        temp.setImprovementLevel(improvementLevel);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setFeePrincipal(feePrincipal);
        temp.setPrincipal(principal);
        temp.setCertificateRevenue(certificateRevenue);
        temp.setSubRevenue(subRevenue);
        temp.setFeeRevenue(feeRevenue);
        temp.setRevenue(revenue);
        temp.setRedemptionAmount(redemptionAmount);
        temp.setAmountPaid(amountPaid);
        portalCertificateAddressService.delete(temp);
        instance = portalCertificateAddressService.create(instance);
        LOGGER.debug("PortalCertificateAddress details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalCertificateAddress instance associated with the given composite-id.")
    public boolean deletePortalCertificateAddress(@RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestParam(value = "bank", required = true) String bank, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "dateSold", required = true) Date dateSold, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "taxYearNotices", required = true) String taxYearNotices, @RequestParam(value = "addressLine1", required = true) String addressLine1, @RequestParam(value = "addressLine2", required = true) String addressLine2, @RequestParam(value = "addressCity", required = true) String addressCity, @RequestParam(value = "addressZip", required = true) String addressZip, @RequestParam(value = "addressVerified", required = true) Boolean addressVerified, @RequestParam(value = "addressSource1", required = true) String addressSource1, @RequestParam(value = "addressSource2", required = true) String addressSource2, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "zoning", required = true) String zoning, @RequestParam(value = "improvementLevel", required = true) String improvementLevel, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "feePrincipal", required = true) Double feePrincipal, @RequestParam(value = "principal", required = true) Double principal, @RequestParam(value = "certificateRevenue", required = true) Double certificateRevenue, @RequestParam(value = "subRevenue", required = true) Double subRevenue, @RequestParam(value = "feeRevenue", required = true) Double feeRevenue, @RequestParam(value = "revenue", required = true) Double revenue, @RequestParam(value = "redemptionAmount", required = true) Double redemptionAmount, @RequestParam(value = "amountPaid", required = true) Double amountPaid) throws EntityNotFoundException {
        PortalCertificateAddressId temp = new PortalCertificateAddressId();
        temp.setCountyName(countyName);
        temp.setCertificateId(certificateId);
        temp.setBank(bank);
        temp.setTaxYear(taxYear);
        temp.setVolume(volume);
        temp.setPin(pin);
        temp.setCertificateNumber(certificateNumber);
        temp.setDateSold(dateSold);
        temp.setExpirationDate(expirationDate);
        temp.setStatus(status);
        temp.setTaxYearNotices(taxYearNotices);
        temp.setAddressLine1(addressLine1);
        temp.setAddressLine2(addressLine2);
        temp.setAddressCity(addressCity);
        temp.setAddressZip(addressZip);
        temp.setAddressVerified(addressVerified);
        temp.setAddressSource1(addressSource1);
        temp.setAddressSource2(addressSource2);
        temp.setAssesseeName(assesseeName);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setCode(code);
        temp.setZoning(zoning);
        temp.setImprovementLevel(improvementLevel);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setFeePrincipal(feePrincipal);
        temp.setPrincipal(principal);
        temp.setCertificateRevenue(certificateRevenue);
        temp.setSubRevenue(subRevenue);
        temp.setFeeRevenue(feeRevenue);
        temp.setRevenue(revenue);
        temp.setRedemptionAmount(redemptionAmount);
        temp.setAmountPaid(amountPaid);
        LOGGER.debug("Deleting PortalCertificateAddress with id: {}", temp);
        PortalCertificateAddress deleted = portalCertificateAddressService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalCertificateAddress instances.")
    public Long countAllPortalCertificateAddresss() {
        LOGGER.debug("counting PortalCertificateAddresss");
        Long count = portalCertificateAddressService.countAll();
        return count;
    }
}
