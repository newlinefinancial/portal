/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.ModelPostingAvailabilityService;
import java.math.BigDecimal;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ModelPostingAvailability.
 * @see com.portal.platform.ModelPostingAvailability
 */
@RestController(value = "Platform.ModelPostingAvailabilityController")
@RequestMapping("/platform/ModelPostingAvailability")
@Api(description = "Exposes APIs to work with ModelPostingAvailability resource.", value = "ModelPostingAvailabilityController")
public class ModelPostingAvailabilityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModelPostingAvailabilityController.class);

    @Autowired
    @Qualifier("platform.ModelPostingAvailabilityService")
    private ModelPostingAvailabilityService modelPostingAvailabilityService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ModelPostingAvailability instances matching the search criteria.")
    public Page<ModelPostingAvailability> findModelPostingAvailabilitys(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ModelPostingAvailabilitys list");
        return modelPostingAvailabilityService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ModelPostingAvailability instances.")
    public Page<ModelPostingAvailability> getModelPostingAvailabilitys(Pageable pageable) {
        LOGGER.debug("Rendering ModelPostingAvailabilitys list");
        return modelPostingAvailabilityService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setModelPostingAvailabilityService(ModelPostingAvailabilityService service) {
        this.modelPostingAvailabilityService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ModelPostingAvailability instance.")
    public ModelPostingAvailability createModelPostingAvailability(@RequestBody ModelPostingAvailability instance) {
        LOGGER.debug("Create ModelPostingAvailability with information: {}", instance);
        instance = modelPostingAvailabilityService.create(instance);
        LOGGER.debug("Created ModelPostingAvailability with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ModelPostingAvailability instance associated with the given composite-id.")
    public ModelPostingAvailability getModelPostingAvailability(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "sub1Pct", required = true) BigDecimal sub1Pct, @RequestParam(value = "sub2Pct", required = true) BigDecimal sub2Pct, @RequestParam(value = "sub3Pct", required = true) BigDecimal sub3Pct, @RequestParam(value = "sub4Pct", required = true) BigDecimal sub4Pct, @RequestParam(value = "sub5Pct", required = true) BigDecimal sub5Pct, @RequestParam(value = "sub6Pct", required = true) BigDecimal sub6Pct) throws EntityNotFoundException {
        ModelPostingAvailabilityId temp = new ModelPostingAvailabilityId();
        temp.setAuctionId(auctionId);
        temp.setSub1Pct(sub1Pct);
        temp.setSub2Pct(sub2Pct);
        temp.setSub3Pct(sub3Pct);
        temp.setSub4Pct(sub4Pct);
        temp.setSub5Pct(sub5Pct);
        temp.setSub6Pct(sub6Pct);
        LOGGER.debug("Getting ModelPostingAvailability with id: {}", temp);
        ModelPostingAvailability instance = modelPostingAvailabilityService.findById(temp);
        LOGGER.debug("ModelPostingAvailability details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ModelPostingAvailability instance associated with the given composite-id.")
    public ModelPostingAvailability editModelPostingAvailability(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "sub1Pct", required = true) BigDecimal sub1Pct, @RequestParam(value = "sub2Pct", required = true) BigDecimal sub2Pct, @RequestParam(value = "sub3Pct", required = true) BigDecimal sub3Pct, @RequestParam(value = "sub4Pct", required = true) BigDecimal sub4Pct, @RequestParam(value = "sub5Pct", required = true) BigDecimal sub5Pct, @RequestParam(value = "sub6Pct", required = true) BigDecimal sub6Pct, @RequestBody ModelPostingAvailability instance) throws EntityNotFoundException {
        ModelPostingAvailabilityId temp = new ModelPostingAvailabilityId();
        temp.setAuctionId(auctionId);
        temp.setSub1Pct(sub1Pct);
        temp.setSub2Pct(sub2Pct);
        temp.setSub3Pct(sub3Pct);
        temp.setSub4Pct(sub4Pct);
        temp.setSub5Pct(sub5Pct);
        temp.setSub6Pct(sub6Pct);
        modelPostingAvailabilityService.delete(temp);
        instance = modelPostingAvailabilityService.create(instance);
        LOGGER.debug("ModelPostingAvailability details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ModelPostingAvailability instance associated with the given composite-id.")
    public boolean deleteModelPostingAvailability(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "sub1Pct", required = true) BigDecimal sub1Pct, @RequestParam(value = "sub2Pct", required = true) BigDecimal sub2Pct, @RequestParam(value = "sub3Pct", required = true) BigDecimal sub3Pct, @RequestParam(value = "sub4Pct", required = true) BigDecimal sub4Pct, @RequestParam(value = "sub5Pct", required = true) BigDecimal sub5Pct, @RequestParam(value = "sub6Pct", required = true) BigDecimal sub6Pct) throws EntityNotFoundException {
        ModelPostingAvailabilityId temp = new ModelPostingAvailabilityId();
        temp.setAuctionId(auctionId);
        temp.setSub1Pct(sub1Pct);
        temp.setSub2Pct(sub2Pct);
        temp.setSub3Pct(sub3Pct);
        temp.setSub4Pct(sub4Pct);
        temp.setSub5Pct(sub5Pct);
        temp.setSub6Pct(sub6Pct);
        LOGGER.debug("Deleting ModelPostingAvailability with id: {}", temp);
        ModelPostingAvailability deleted = modelPostingAvailabilityService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ModelPostingAvailability instances.")
    public Long countAllModelPostingAvailabilitys() {
        LOGGER.debug("counting ModelPostingAvailabilitys");
        Long count = modelPostingAvailabilityService.countAll();
        return count;
    }
}
