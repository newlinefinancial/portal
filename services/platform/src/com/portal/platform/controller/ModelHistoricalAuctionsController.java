/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.ModelHistoricalAuctionsService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ModelHistoricalAuctions.
 * @see com.portal.platform.ModelHistoricalAuctions
 */
@RestController(value = "Platform.ModelHistoricalAuctionsController")
@RequestMapping("/platform/ModelHistoricalAuctions")
@Api(description = "Exposes APIs to work with ModelHistoricalAuctions resource.", value = "ModelHistoricalAuctionsController")
public class ModelHistoricalAuctionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModelHistoricalAuctionsController.class);

    @Autowired
    @Qualifier("platform.ModelHistoricalAuctionsService")
    private ModelHistoricalAuctionsService modelHistoricalAuctionsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ModelHistoricalAuctions instances matching the search criteria.")
    public Page<ModelHistoricalAuctions> findModelHistoricalAuctionss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ModelHistoricalAuctionss list");
        return modelHistoricalAuctionsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ModelHistoricalAuctions instances.")
    public Page<ModelHistoricalAuctions> getModelHistoricalAuctionss(Pageable pageable) {
        LOGGER.debug("Rendering ModelHistoricalAuctionss list");
        return modelHistoricalAuctionsService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setModelHistoricalAuctionsService(ModelHistoricalAuctionsService service) {
        this.modelHistoricalAuctionsService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ModelHistoricalAuctions instance.")
    public ModelHistoricalAuctions createModelHistoricalAuctions(@RequestBody ModelHistoricalAuctions instance) {
        LOGGER.debug("Create ModelHistoricalAuctions with information: {}", instance);
        instance = modelHistoricalAuctionsService.create(instance);
        LOGGER.debug("Created ModelHistoricalAuctions with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ModelHistoricalAuctions instance associated with the given composite-id.")
    public ModelHistoricalAuctions getModelHistoricalAuctions(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors, @RequestParam(value = "taxYear1", required = true) Integer taxYear1, @RequestParam(value = "auctionResult1", required = true) String auctionResult1, @RequestParam(value = "dispositionStatus1", required = true) String dispositionStatus1, @RequestParam(value = "dispositionDate1", required = true) Date dispositionDate1, @RequestParam(value = "openStatus1", required = true) String openStatus1, @RequestParam(value = "taxYear2", required = true) Integer taxYear2, @RequestParam(value = "auctionResult2", required = true) String auctionResult2, @RequestParam(value = "dispositionStatus2", required = true) String dispositionStatus2, @RequestParam(value = "dispositionDate2", required = true) Date dispositionDate2, @RequestParam(value = "openStatus2", required = true) String openStatus2, @RequestParam(value = "taxYear3", required = true) Integer taxYear3, @RequestParam(value = "auctionResult3", required = true) String auctionResult3, @RequestParam(value = "dispositionStatus3", required = true) String dispositionStatus3, @RequestParam(value = "dispositionDate3", required = true) Date dispositionDate3, @RequestParam(value = "openStatus3", required = true) String openStatus3, @RequestParam(value = "taxYear4", required = true) Integer taxYear4, @RequestParam(value = "auctionResult4", required = true) String auctionResult4, @RequestParam(value = "dispositionStatus4", required = true) String dispositionStatus4, @RequestParam(value = "dispositionDate4", required = true) Date dispositionDate4, @RequestParam(value = "openStatus4", required = true) String openStatus4, @RequestParam(value = "taxYear5", required = true) Integer taxYear5, @RequestParam(value = "auctionResult5", required = true) String auctionResult5, @RequestParam(value = "dispositionStatus5", required = true) String dispositionStatus5, @RequestParam(value = "dispositionDate5", required = true) Date dispositionDate5, @RequestParam(value = "openStatus5", required = true) String openStatus5) throws EntityNotFoundException {
        ModelHistoricalAuctionsId temp = new ModelHistoricalAuctionsId();
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        temp.setTaxYear1(taxYear1);
        temp.setAuctionResult1(auctionResult1);
        temp.setDispositionStatus1(dispositionStatus1);
        temp.setDispositionDate1(dispositionDate1);
        temp.setOpenStatus1(openStatus1);
        temp.setTaxYear2(taxYear2);
        temp.setAuctionResult2(auctionResult2);
        temp.setDispositionStatus2(dispositionStatus2);
        temp.setDispositionDate2(dispositionDate2);
        temp.setOpenStatus2(openStatus2);
        temp.setTaxYear3(taxYear3);
        temp.setAuctionResult3(auctionResult3);
        temp.setDispositionStatus3(dispositionStatus3);
        temp.setDispositionDate3(dispositionDate3);
        temp.setOpenStatus3(openStatus3);
        temp.setTaxYear4(taxYear4);
        temp.setAuctionResult4(auctionResult4);
        temp.setDispositionStatus4(dispositionStatus4);
        temp.setDispositionDate4(dispositionDate4);
        temp.setOpenStatus4(openStatus4);
        temp.setTaxYear5(taxYear5);
        temp.setAuctionResult5(auctionResult5);
        temp.setDispositionStatus5(dispositionStatus5);
        temp.setDispositionDate5(dispositionDate5);
        temp.setOpenStatus5(openStatus5);
        LOGGER.debug("Getting ModelHistoricalAuctions with id: {}", temp);
        ModelHistoricalAuctions instance = modelHistoricalAuctionsService.findById(temp);
        LOGGER.debug("ModelHistoricalAuctions details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ModelHistoricalAuctions instance associated with the given composite-id.")
    public ModelHistoricalAuctions editModelHistoricalAuctions(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors, @RequestParam(value = "taxYear1", required = true) Integer taxYear1, @RequestParam(value = "auctionResult1", required = true) String auctionResult1, @RequestParam(value = "dispositionStatus1", required = true) String dispositionStatus1, @RequestParam(value = "dispositionDate1", required = true) Date dispositionDate1, @RequestParam(value = "openStatus1", required = true) String openStatus1, @RequestParam(value = "taxYear2", required = true) Integer taxYear2, @RequestParam(value = "auctionResult2", required = true) String auctionResult2, @RequestParam(value = "dispositionStatus2", required = true) String dispositionStatus2, @RequestParam(value = "dispositionDate2", required = true) Date dispositionDate2, @RequestParam(value = "openStatus2", required = true) String openStatus2, @RequestParam(value = "taxYear3", required = true) Integer taxYear3, @RequestParam(value = "auctionResult3", required = true) String auctionResult3, @RequestParam(value = "dispositionStatus3", required = true) String dispositionStatus3, @RequestParam(value = "dispositionDate3", required = true) Date dispositionDate3, @RequestParam(value = "openStatus3", required = true) String openStatus3, @RequestParam(value = "taxYear4", required = true) Integer taxYear4, @RequestParam(value = "auctionResult4", required = true) String auctionResult4, @RequestParam(value = "dispositionStatus4", required = true) String dispositionStatus4, @RequestParam(value = "dispositionDate4", required = true) Date dispositionDate4, @RequestParam(value = "openStatus4", required = true) String openStatus4, @RequestParam(value = "taxYear5", required = true) Integer taxYear5, @RequestParam(value = "auctionResult5", required = true) String auctionResult5, @RequestParam(value = "dispositionStatus5", required = true) String dispositionStatus5, @RequestParam(value = "dispositionDate5", required = true) Date dispositionDate5, @RequestParam(value = "openStatus5", required = true) String openStatus5, @RequestBody ModelHistoricalAuctions instance) throws EntityNotFoundException {
        ModelHistoricalAuctionsId temp = new ModelHistoricalAuctionsId();
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        temp.setTaxYear1(taxYear1);
        temp.setAuctionResult1(auctionResult1);
        temp.setDispositionStatus1(dispositionStatus1);
        temp.setDispositionDate1(dispositionDate1);
        temp.setOpenStatus1(openStatus1);
        temp.setTaxYear2(taxYear2);
        temp.setAuctionResult2(auctionResult2);
        temp.setDispositionStatus2(dispositionStatus2);
        temp.setDispositionDate2(dispositionDate2);
        temp.setOpenStatus2(openStatus2);
        temp.setTaxYear3(taxYear3);
        temp.setAuctionResult3(auctionResult3);
        temp.setDispositionStatus3(dispositionStatus3);
        temp.setDispositionDate3(dispositionDate3);
        temp.setOpenStatus3(openStatus3);
        temp.setTaxYear4(taxYear4);
        temp.setAuctionResult4(auctionResult4);
        temp.setDispositionStatus4(dispositionStatus4);
        temp.setDispositionDate4(dispositionDate4);
        temp.setOpenStatus4(openStatus4);
        temp.setTaxYear5(taxYear5);
        temp.setAuctionResult5(auctionResult5);
        temp.setDispositionStatus5(dispositionStatus5);
        temp.setDispositionDate5(dispositionDate5);
        temp.setOpenStatus5(openStatus5);
        modelHistoricalAuctionsService.delete(temp);
        instance = modelHistoricalAuctionsService.create(instance);
        LOGGER.debug("ModelHistoricalAuctions details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ModelHistoricalAuctions instance associated with the given composite-id.")
    public boolean deleteModelHistoricalAuctions(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors, @RequestParam(value = "taxYear1", required = true) Integer taxYear1, @RequestParam(value = "auctionResult1", required = true) String auctionResult1, @RequestParam(value = "dispositionStatus1", required = true) String dispositionStatus1, @RequestParam(value = "dispositionDate1", required = true) Date dispositionDate1, @RequestParam(value = "openStatus1", required = true) String openStatus1, @RequestParam(value = "taxYear2", required = true) Integer taxYear2, @RequestParam(value = "auctionResult2", required = true) String auctionResult2, @RequestParam(value = "dispositionStatus2", required = true) String dispositionStatus2, @RequestParam(value = "dispositionDate2", required = true) Date dispositionDate2, @RequestParam(value = "openStatus2", required = true) String openStatus2, @RequestParam(value = "taxYear3", required = true) Integer taxYear3, @RequestParam(value = "auctionResult3", required = true) String auctionResult3, @RequestParam(value = "dispositionStatus3", required = true) String dispositionStatus3, @RequestParam(value = "dispositionDate3", required = true) Date dispositionDate3, @RequestParam(value = "openStatus3", required = true) String openStatus3, @RequestParam(value = "taxYear4", required = true) Integer taxYear4, @RequestParam(value = "auctionResult4", required = true) String auctionResult4, @RequestParam(value = "dispositionStatus4", required = true) String dispositionStatus4, @RequestParam(value = "dispositionDate4", required = true) Date dispositionDate4, @RequestParam(value = "openStatus4", required = true) String openStatus4, @RequestParam(value = "taxYear5", required = true) Integer taxYear5, @RequestParam(value = "auctionResult5", required = true) String auctionResult5, @RequestParam(value = "dispositionStatus5", required = true) String dispositionStatus5, @RequestParam(value = "dispositionDate5", required = true) Date dispositionDate5, @RequestParam(value = "openStatus5", required = true) String openStatus5) throws EntityNotFoundException {
        ModelHistoricalAuctionsId temp = new ModelHistoricalAuctionsId();
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        temp.setTaxYear1(taxYear1);
        temp.setAuctionResult1(auctionResult1);
        temp.setDispositionStatus1(dispositionStatus1);
        temp.setDispositionDate1(dispositionDate1);
        temp.setOpenStatus1(openStatus1);
        temp.setTaxYear2(taxYear2);
        temp.setAuctionResult2(auctionResult2);
        temp.setDispositionStatus2(dispositionStatus2);
        temp.setDispositionDate2(dispositionDate2);
        temp.setOpenStatus2(openStatus2);
        temp.setTaxYear3(taxYear3);
        temp.setAuctionResult3(auctionResult3);
        temp.setDispositionStatus3(dispositionStatus3);
        temp.setDispositionDate3(dispositionDate3);
        temp.setOpenStatus3(openStatus3);
        temp.setTaxYear4(taxYear4);
        temp.setAuctionResult4(auctionResult4);
        temp.setDispositionStatus4(dispositionStatus4);
        temp.setDispositionDate4(dispositionDate4);
        temp.setOpenStatus4(openStatus4);
        temp.setTaxYear5(taxYear5);
        temp.setAuctionResult5(auctionResult5);
        temp.setDispositionStatus5(dispositionStatus5);
        temp.setDispositionDate5(dispositionDate5);
        temp.setOpenStatus5(openStatus5);
        LOGGER.debug("Deleting ModelHistoricalAuctions with id: {}", temp);
        ModelHistoricalAuctions deleted = modelHistoricalAuctionsService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ModelHistoricalAuctions instances.")
    public Long countAllModelHistoricalAuctionss() {
        LOGGER.debug("counting ModelHistoricalAuctionss");
        Long count = modelHistoricalAuctionsService.countAll();
        return count;
    }
}
