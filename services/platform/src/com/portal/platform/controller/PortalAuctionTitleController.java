/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalAuctionTitleService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAuctionTitle.
 * @see com.portal.platform.PortalAuctionTitle
 */
@RestController(value = "Platform.PortalAuctionTitleController")
@RequestMapping("/platform/PortalAuctionTitle")
@Api(description = "Exposes APIs to work with PortalAuctionTitle resource.", value = "PortalAuctionTitleController")
public class PortalAuctionTitleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionTitleController.class);

    @Autowired
    @Qualifier("platform.PortalAuctionTitleService")
    private PortalAuctionTitleService portalAuctionTitleService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAuctionTitle instances matching the search criteria.")
    public Page<PortalAuctionTitle> findPortalAuctionTitles(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAuctionTitles list");
        return portalAuctionTitleService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAuctionTitle instances.")
    public Page<PortalAuctionTitle> getPortalAuctionTitles(Pageable pageable) {
        LOGGER.debug("Rendering PortalAuctionTitles list");
        return portalAuctionTitleService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalAuctionTitleService(PortalAuctionTitleService service) {
        this.portalAuctionTitleService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalAuctionTitle instance.")
    public PortalAuctionTitle createPortalAuctionTitle(@RequestBody PortalAuctionTitle instance) {
        LOGGER.debug("Create PortalAuctionTitle with information: {}", instance);
        instance = portalAuctionTitleService.create(instance);
        LOGGER.debug("Created PortalAuctionTitle with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalAuctionTitle instance associated with the given composite-id.")
    public PortalAuctionTitle getPortalAuctionTitle(@RequestParam(value = "consideration", required = true) Double consideration, @RequestParam(value = "date", required = true) Date date, @RequestParam(value = "docNumber", required = true) String docNumber, @RequestParam(value = "grantee", required = true) String grantee, @RequestParam(value = "grantor", required = true) String grantor, @RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "titleType", required = true) String titleType, @RequestParam(value = "category", required = true) String category, @RequestParam(value = "name", required = true) String name) throws EntityNotFoundException {
        PortalAuctionTitleId temp = new PortalAuctionTitleId();
        temp.setConsideration(consideration);
        temp.setDate(date);
        temp.setDocNumber(docNumber);
        temp.setGrantee(grantee);
        temp.setGrantor(grantor);
        temp.setId(id);
        temp.setPropertyId(propertyId);
        temp.setTitleType(titleType);
        temp.setCategory(category);
        temp.setName(name);
        LOGGER.debug("Getting PortalAuctionTitle with id: {}", temp);
        PortalAuctionTitle instance = portalAuctionTitleService.findById(temp);
        LOGGER.debug("PortalAuctionTitle details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalAuctionTitle instance associated with the given composite-id.")
    public PortalAuctionTitle editPortalAuctionTitle(@RequestParam(value = "consideration", required = true) Double consideration, @RequestParam(value = "date", required = true) Date date, @RequestParam(value = "docNumber", required = true) String docNumber, @RequestParam(value = "grantee", required = true) String grantee, @RequestParam(value = "grantor", required = true) String grantor, @RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "titleType", required = true) String titleType, @RequestParam(value = "category", required = true) String category, @RequestParam(value = "name", required = true) String name, @RequestBody PortalAuctionTitle instance) throws EntityNotFoundException {
        PortalAuctionTitleId temp = new PortalAuctionTitleId();
        temp.setConsideration(consideration);
        temp.setDate(date);
        temp.setDocNumber(docNumber);
        temp.setGrantee(grantee);
        temp.setGrantor(grantor);
        temp.setId(id);
        temp.setPropertyId(propertyId);
        temp.setTitleType(titleType);
        temp.setCategory(category);
        temp.setName(name);
        portalAuctionTitleService.delete(temp);
        instance = portalAuctionTitleService.create(instance);
        LOGGER.debug("PortalAuctionTitle details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalAuctionTitle instance associated with the given composite-id.")
    public boolean deletePortalAuctionTitle(@RequestParam(value = "consideration", required = true) Double consideration, @RequestParam(value = "date", required = true) Date date, @RequestParam(value = "docNumber", required = true) String docNumber, @RequestParam(value = "grantee", required = true) String grantee, @RequestParam(value = "grantor", required = true) String grantor, @RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "titleType", required = true) String titleType, @RequestParam(value = "category", required = true) String category, @RequestParam(value = "name", required = true) String name) throws EntityNotFoundException {
        PortalAuctionTitleId temp = new PortalAuctionTitleId();
        temp.setConsideration(consideration);
        temp.setDate(date);
        temp.setDocNumber(docNumber);
        temp.setGrantee(grantee);
        temp.setGrantor(grantor);
        temp.setId(id);
        temp.setPropertyId(propertyId);
        temp.setTitleType(titleType);
        temp.setCategory(category);
        temp.setName(name);
        LOGGER.debug("Deleting PortalAuctionTitle with id: {}", temp);
        PortalAuctionTitle deleted = portalAuctionTitleService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalAuctionTitle instances.")
    public Long countAllPortalAuctionTitles() {
        LOGGER.debug("counting PortalAuctionTitles");
        Long count = portalAuctionTitleService.countAll();
        return count;
    }
}
