/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PropertySaleService;
import com.portal.platform.service.ResearchService;
import com.portal.platform.service.TaxHistoryService;
import com.portal.platform.service.TitleTransactionService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Research.
 * @see com.portal.platform.Research
 */
@RestController(value = "Platform.ResearchController")
@RequestMapping("/platform/Research")
@Api(description = "Exposes APIs to work with Research resource.", value = "ResearchController")
public class ResearchController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResearchController.class);

    @Autowired
    @Qualifier("platform.ResearchService")
    private ResearchService researchService;

    @Autowired
    @Qualifier("platform.PropertySaleService")
    private PropertySaleService propertySaleService;

    @Autowired
    @Qualifier("platform.TaxHistoryService")
    private TaxHistoryService taxHistoryService;

    @Autowired
    @Qualifier("platform.TitleTransactionService")
    private TitleTransactionService titleTransactionService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Research instances matching the search criteria.")
    public Page<Research> findResearchs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Researchs list");
        return researchService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Research instances.")
    public Page<Research> getResearchs(Pageable pageable) {
        LOGGER.debug("Rendering Researchs list");
        return researchService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/propertySales", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the propertySales instance associated with the given id.")
    public Page<PropertySale> findAssociatedpropertySales(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated propertySales");
        return propertySaleService.findAssociatedValues(id, "research", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/taxHistories", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the taxHistories instance associated with the given id.")
    public Page<TaxHistory> findAssociatedtaxHistories(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated taxHistories");
        return taxHistoryService.findAssociatedValues(id, "research", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/titleTransactions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the titleTransactions instance associated with the given id.")
    public Page<TitleTransaction> findAssociatedtitleTransactions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated titleTransactions");
        return titleTransactionService.findAssociatedValues(id, "research", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setResearchService(ResearchService service) {
        this.researchService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Research instance.")
    public Research createResearch(@RequestBody Research instance) {
        LOGGER.debug("Create Research with information: {}", instance);
        instance = researchService.create(instance);
        LOGGER.debug("Created Research with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Research instances.")
    public Long countAllResearchs() {
        LOGGER.debug("counting Researchs");
        Long count = researchService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Research instance associated with the given id.")
    public Research getResearch(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Research with id: {}", id);
        Research instance = researchService.findById(id);
        LOGGER.debug("Research details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Research instance associated with the given id.")
    public Research editResearch(@PathVariable(value = "id") Integer id, @RequestBody Research instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Research with id: {}", instance.getId());
        instance.setId(id);
        instance = researchService.update(instance);
        LOGGER.debug("Research details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Research instance associated with the given id.")
    public boolean deleteResearch(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Research with id: {}", id);
        Research deleted = researchService.delete(id);
        return deleted != null;
    }
}
