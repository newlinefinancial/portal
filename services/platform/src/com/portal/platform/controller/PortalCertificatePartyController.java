/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalCertificateParty;
import com.portal.platform.PortalCertificatePartyId;
import com.portal.platform.service.PortalCertificatePartyService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalCertificateParty.
 * @see PortalCertificateParty
 */
@RestController("platform.PortalCertificatePartyController")
@RequestMapping("/platform/PortalCertificateParty")
@Api(description = "Exposes APIs to work with PortalCertificateParty resource.", value = "PortalCertificatePartyController")
public class PortalCertificatePartyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalCertificatePartyController.class);

    @Autowired
    @Qualifier("platform.PortalCertificatePartyService")
    private PortalCertificatePartyService portalCertificatePartyService;

    /**
     * @deprecated Use {@link #findPortalCertificateParties(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalCertificateParty instances matching the search criteria.")
    public Page<PortalCertificateParty> findPortalCertificateParties(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalCertificateParties list");
        return portalCertificatePartyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalCertificateParty instances matching the search criteria.")
    public Page<PortalCertificateParty> findPortalCertificateParties(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalCertificateParties list");
        return portalCertificatePartyService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalCertificateParties(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalCertificatePartyService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalCertificatePartyService instance
	 */
    protected void setPortalCertificatePartyService(PortalCertificatePartyService service) {
        this.portalCertificatePartyService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalCertificateParty instance associated with the given composite-id.")
    public PortalCertificateParty getPortalCertificateParty(@RequestParam(value = "certificatePartyId", required = true) int certificatePartyId, @RequestParam(value = "certificateId", required = true) int certificateId, @RequestParam(value = "interestType1", required = true) String interestType1, @RequestParam(value = "interestType2", required = true) String interestType2, @RequestParam(value = "interestType3", required = true) String interestType3, @RequestParam(value = "letter1", required = true) Date letter1, @RequestParam(value = "letter2", required = true) Date letter2, @RequestParam(value = "serviceType", required = true) String serviceType, @RequestParam(value = "service1Reference", required = true) String service1Reference, @RequestParam(value = "service1Status", required = true) String service1Status, @RequestParam(value = "service2Reference", required = true) String service2Reference, @RequestParam(value = "service2Status", required = true) String service2Status, @RequestParam(value = "service2Flag", required = true) String service2Flag, @RequestParam(value = "service3Reference", required = true) String service3Reference, @RequestParam(value = "service3Status", required = true) String service3Status, @RequestParam(value = "service3Flag", required = true) String service3Flag, @RequestParam(value = "name", required = true) String name, @RequestParam(value = "careOf", required = true) String careOf, @RequestParam(value = "address", required = true) String address, @RequestParam(value = "city", required = true) String city, @RequestParam(value = "state", required = true) String state, @RequestParam(value = "zip", required = true) String zip, @RequestParam(value = "partyId", required = true) int partyId, @RequestParam(value = "partyCsz", required = true) String partyCsz, @RequestParam(value = "class_", required = true) String class_, @RequestParam(value = "source1", required = true) String source1, @RequestParam(value = "source2", required = true) String source2, @RequestParam(value = "piq", required = true) boolean piq) throws EntityNotFoundException {
        PortalCertificatePartyId portalcertificatepartyId = new PortalCertificatePartyId();
        portalcertificatepartyId.setCertificatePartyId(certificatePartyId);
        portalcertificatepartyId.setCertificateId(certificateId);
        portalcertificatepartyId.setInterestType1(interestType1);
        portalcertificatepartyId.setInterestType2(interestType2);
        portalcertificatepartyId.setInterestType3(interestType3);
        portalcertificatepartyId.setLetter1(letter1);
        portalcertificatepartyId.setLetter2(letter2);
        portalcertificatepartyId.setServiceType(serviceType);
        portalcertificatepartyId.setService1Reference(service1Reference);
        portalcertificatepartyId.setService1Status(service1Status);
        portalcertificatepartyId.setService2Reference(service2Reference);
        portalcertificatepartyId.setService2Status(service2Status);
        portalcertificatepartyId.setService2Flag(service2Flag);
        portalcertificatepartyId.setService3Reference(service3Reference);
        portalcertificatepartyId.setService3Status(service3Status);
        portalcertificatepartyId.setService3Flag(service3Flag);
        portalcertificatepartyId.setName(name);
        portalcertificatepartyId.setCareOf(careOf);
        portalcertificatepartyId.setAddress(address);
        portalcertificatepartyId.setCity(city);
        portalcertificatepartyId.setState(state);
        portalcertificatepartyId.setZip(zip);
        portalcertificatepartyId.setPartyId(partyId);
        portalcertificatepartyId.setPartyCsz(partyCsz);
        portalcertificatepartyId.setClass_(class_);
        portalcertificatepartyId.setSource1(source1);
        portalcertificatepartyId.setSource2(source2);
        portalcertificatepartyId.setPiq(piq);
        LOGGER.debug("Getting PortalCertificateParty with id: {}", portalcertificatepartyId);
        PortalCertificateParty portalcertificateparty = portalCertificatePartyService.getById(portalcertificatepartyId);
        LOGGER.debug("PortalCertificateParty details with id: {}", portalcertificateparty);
        return portalcertificateparty;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalCertificateParty instances.")
    public Long countPortalCertificateParties(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalCertificateParties");
        return portalCertificatePartyService.count(query);
    }
}
