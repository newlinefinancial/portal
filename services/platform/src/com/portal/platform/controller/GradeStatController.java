/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.GradeStatService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class GradeStat.
 * @see com.portal.platform.GradeStat
 */
@RestController(value = "Platform.GradeStatController")
@RequestMapping("/platform/GradeStat")
@Api(description = "Exposes APIs to work with GradeStat resource.", value = "GradeStatController")
public class GradeStatController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GradeStatController.class);

    @Autowired
    @Qualifier("platform.GradeStatService")
    private GradeStatService gradeStatService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of GradeStat instances matching the search criteria.")
    public Page<GradeStat> findGradeStats(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GradeStats list");
        return gradeStatService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of GradeStat instances.")
    public Page<GradeStat> getGradeStats(Pageable pageable) {
        LOGGER.debug("Rendering GradeStats list");
        return gradeStatService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setGradeStatService(GradeStatService service) {
        this.gradeStatService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new GradeStat instance.")
    public GradeStat createGradeStat(@RequestBody GradeStat instance) {
        LOGGER.debug("Create GradeStat with information: {}", instance);
        instance = gradeStatService.create(instance);
        LOGGER.debug("Created GradeStat with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of GradeStat instances.")
    public Long countAllGradeStats() {
        LOGGER.debug("counting GradeStats");
        Long count = gradeStatService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the GradeStat instance associated with the given id.")
    public GradeStat getGradeStat(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting GradeStat with id: {}", id);
        GradeStat instance = gradeStatService.findById(id);
        LOGGER.debug("GradeStat details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the GradeStat instance associated with the given id.")
    public GradeStat editGradeStat(@PathVariable(value = "id") Integer id, @RequestBody GradeStat instance) throws EntityNotFoundException {
        LOGGER.debug("Editing GradeStat with id: {}", instance.getGradeId());
        instance.setGradeId(id);
        instance = gradeStatService.update(instance);
        LOGGER.debug("GradeStat details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the GradeStat instance associated with the given id.")
    public boolean deleteGradeStat(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting GradeStat with id: {}", id);
        GradeStat deleted = gradeStatService.delete(id);
        return deleted != null;
    }
}
