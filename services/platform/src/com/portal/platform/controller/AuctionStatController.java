/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.AuctionStatService;
import java.math.BigDecimal;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AuctionStat.
 * @see com.portal.platform.AuctionStat
 */
@RestController(value = "Platform.AuctionStatController")
@RequestMapping("/platform/AuctionStat")
@Api(description = "Exposes APIs to work with AuctionStat resource.", value = "AuctionStatController")
public class AuctionStatController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuctionStatController.class);

    @Autowired
    @Qualifier("platform.AuctionStatService")
    private AuctionStatService auctionStatService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AuctionStat instances matching the search criteria.")
    public Page<AuctionStat> findAuctionStats(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AuctionStats list");
        return auctionStatService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AuctionStat instances.")
    public Page<AuctionStat> getAuctionStats(Pageable pageable) {
        LOGGER.debug("Rendering AuctionStats list");
        return auctionStatService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setAuctionStatService(AuctionStatService service) {
        this.auctionStatService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AuctionStat instance.")
    public AuctionStat createAuctionStat(@RequestBody AuctionStat instance) {
        LOGGER.debug("Create AuctionStat with information: {}", instance);
        instance = auctionStatService.create(instance);
        LOGGER.debug("Created AuctionStat with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AuctionStat instance associated with the given composite-id.")
    public AuctionStat getAuctionStat(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "lifetimeInvestment", required = true) BigDecimal lifetimeInvestment, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors) throws EntityNotFoundException {
        AuctionStatId temp = new AuctionStatId();
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setLifetimeInvestment(lifetimeInvestment);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        LOGGER.debug("Getting AuctionStat with id: {}", temp);
        AuctionStat instance = auctionStatService.findById(temp);
        LOGGER.debug("AuctionStat details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AuctionStat instance associated with the given composite-id.")
    public AuctionStat editAuctionStat(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "lifetimeInvestment", required = true) BigDecimal lifetimeInvestment, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors, @RequestBody AuctionStat instance) throws EntityNotFoundException {
        AuctionStatId temp = new AuctionStatId();
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setLifetimeInvestment(lifetimeInvestment);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        auctionStatService.delete(temp);
        instance = auctionStatService.create(instance);
        LOGGER.debug("AuctionStat details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AuctionStat instance associated with the given composite-id.")
    public boolean deleteAuctionStat(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "lifetimeInvestment", required = true) BigDecimal lifetimeInvestment, @RequestParam(value = "countPublished", required = true) Integer countPublished, @RequestParam(value = "countAuctioned", required = true) Integer countAuctioned, @RequestParam(value = "countForfeited", required = true) Integer countForfeited, @RequestParam(value = "countOpensales", required = true) Integer countOpensales, @RequestParam(value = "countOpenpriors", required = true) Integer countOpenpriors) throws EntityNotFoundException {
        AuctionStatId temp = new AuctionStatId();
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setLifetimeInvestment(lifetimeInvestment);
        temp.setCountPublished(countPublished);
        temp.setCountAuctioned(countAuctioned);
        temp.setCountForfeited(countForfeited);
        temp.setCountOpensales(countOpensales);
        temp.setCountOpenpriors(countOpenpriors);
        LOGGER.debug("Deleting AuctionStat with id: {}", temp);
        AuctionStat deleted = auctionStatService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AuctionStat instances.")
    public Long countAllAuctionStats() {
        LOGGER.debug("counting AuctionStats");
        Long count = auctionStatService.countAll();
        return count;
    }
}
