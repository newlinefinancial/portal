/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Buyer;
import com.portal.platform.BuyerGroup;
import com.portal.platform.service.BuyerGroupService;
import com.portal.platform.service.BuyerService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BuyerGroup.
 * @see BuyerGroup
 */
@RestController("platform.BuyerGroupController")
@RequestMapping("/platform/BuyerGroup")
@Api(description = "Exposes APIs to work with BuyerGroup resource.", value = "BuyerGroupController")
public class BuyerGroupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BuyerGroupController.class);

    @Autowired
    @Qualifier("platform.BuyerGroupService")
    private BuyerGroupService buyerGroupService;

    @Autowired
    @Qualifier("platform.BuyerService")
    private BuyerService buyerService;

    /**
     * @deprecated Use {@link #findBuyerGroups(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BuyerGroup instances matching the search criteria.")
    public Page<BuyerGroup> findBuyerGroups(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BuyerGroups list");
        return buyerGroupService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BuyerGroup instances matching the search criteria.")
    public Page<BuyerGroup> findBuyerGroups(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BuyerGroups list");
        return buyerGroupService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBuyerGroups(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return buyerGroupService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of BuyerGroup instances.")
    public Long countBuyerGroups(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting BuyerGroups");
        return buyerGroupService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/buyers", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the buyers instance associated with the given id.")
    public Page<Buyer> findAssociatedBuyers(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated buyers");
        return buyerService.findAssociatedValues(id, "buyerGroup", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BuyerGroupService instance
	 */
    protected void setBuyerGroupService(BuyerGroupService service) {
        this.buyerGroupService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BuyerService instance
	 */
    protected void setBuyerService(BuyerService service) {
        this.buyerService = service;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BuyerGroup instance associated with the given id.")
    public BuyerGroup getBuyerGroup(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BuyerGroup with id: {}", id);
        BuyerGroup foundBuyerGroup = buyerGroupService.getById(id);
        LOGGER.debug("BuyerGroup details with id: {}", foundBuyerGroup);
        return foundBuyerGroup;
    }
}
