/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalAuctionNote;
import com.portal.platform.PortalAuctionNoteId;
import com.portal.platform.service.PortalAuctionNoteService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAuctionNote.
 * @see PortalAuctionNote
 */
@RestController("platform.PortalAuctionNoteController")
@RequestMapping("/platform/PortalAuctionNote")
@Api(description = "Exposes APIs to work with PortalAuctionNote resource.", value = "PortalAuctionNoteController")
public class PortalAuctionNoteController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionNoteController.class);

    @Autowired
    @Qualifier("platform.PortalAuctionNoteService")
    private PortalAuctionNoteService portalAuctionNoteService;

    /**
     * @deprecated Use {@link #findPortalAuctionNotes(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAuctionNote instances matching the search criteria.")
    public Page<PortalAuctionNote> findPortalAuctionNotes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAuctionNotes list");
        return portalAuctionNoteService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAuctionNote instances matching the search criteria.")
    public Page<PortalAuctionNote> findPortalAuctionNotes(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalAuctionNotes list");
        return portalAuctionNoteService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalAuctionNotes(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalAuctionNoteService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalAuctionNoteService instance
	 */
    protected void setPortalAuctionNoteService(PortalAuctionNoteService service) {
        this.portalAuctionNoteService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalAuctionNote instance associated with the given composite-id.")
    public PortalAuctionNote getPortalAuctionNote(@RequestParam(value = "propertyId", required = true) int propertyId, @RequestParam(value = "noteId", required = true) int noteId, @RequestParam(value = "user", required = true) String user, @RequestParam(value = "created", required = true) Date created, @RequestParam(value = "done", required = true) Date done, @RequestParam(value = "noteDescription", required = true) String noteDescription, @RequestParam(value = "noteTypeId", required = true) int noteTypeId) throws EntityNotFoundException {
        PortalAuctionNoteId portalauctionnoteId = new PortalAuctionNoteId();
        portalauctionnoteId.setPropertyId(propertyId);
        portalauctionnoteId.setNoteId(noteId);
        portalauctionnoteId.setUser(user);
        portalauctionnoteId.setCreated(created);
        portalauctionnoteId.setDone(done);
        portalauctionnoteId.setNoteDescription(noteDescription);
        portalauctionnoteId.setNoteTypeId(noteTypeId);
        LOGGER.debug("Getting PortalAuctionNote with id: {}", portalauctionnoteId);
        PortalAuctionNote portalauctionnote = portalAuctionNoteService.getById(portalauctionnoteId);
        LOGGER.debug("PortalAuctionNote details with id: {}", portalauctionnote);
        return portalauctionnote;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalAuctionNote instances.")
    public Long countPortalAuctionNotes(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalAuctionNotes");
        return portalAuctionNoteService.count(query);
    }
}
