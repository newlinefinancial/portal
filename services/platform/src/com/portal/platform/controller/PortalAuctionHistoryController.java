/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalAuctionHistory;
import com.portal.platform.PortalAuctionHistoryId;
import com.portal.platform.service.PortalAuctionHistoryService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAuctionHistory.
 * @see PortalAuctionHistory
 */
@RestController("platform.PortalAuctionHistoryController")
@RequestMapping("/platform/PortalAuctionHistory")
@Api(description = "Exposes APIs to work with PortalAuctionHistory resource.", value = "PortalAuctionHistoryController")
public class PortalAuctionHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionHistoryController.class);

    @Autowired
    @Qualifier("platform.PortalAuctionHistoryService")
    private PortalAuctionHistoryService portalAuctionHistoryService;

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the PortalAuctionHistory instance associated with the given composite-id.")
    public PortalAuctionHistory getPortalAuctionHistory(@RequestParam("propertyId") Integer propertyId, @RequestParam("auctionId") int auctionId, @RequestParam("auctionYear") int auctionYear, @RequestParam("priorYearsDue") Double priorYearsDue, @RequestParam("auctionYearBilled") Double auctionYearBilled, @RequestParam("auctionYearDue") Double auctionYearDue, @RequestParam("saleAmount") double saleAmount, @RequestParam("removed") boolean removed, @RequestParam("marketValue") Double marketValue, @RequestParam("assessedValuationBuilding") Double assessedValuationBuilding, @RequestParam("assessedValuationLand") Double assessedValuationLand, @RequestParam("assessedValuationTotal") Double assessedValuationTotal, @RequestParam("assesseeAddressCity") String assesseeAddressCity, @RequestParam("assesseeAddressLine1") String assesseeAddressLine1, @RequestParam("assesseeAddressState") String assesseeAddressState, @RequestParam("assesseeAddressZip") String assesseeAddressZip, @RequestParam("assesseeName") String assesseeName, @RequestParam("homeExemption") Double homeExemption, @RequestParam("seniorExemption") Double seniorExemption, @RequestParam("assessmentYear") Integer assessmentYear, @RequestParam("code") String code, @RequestParam("description") String description, @RequestParam("propertyType") String propertyType, @RequestParam("status") String status, @RequestParam("bidRate") Integer bidRate, @RequestParam("overrideTimestamp") Date overrideTimestamp, @RequestParam("overrideUser") String overrideUser, @RequestParam("saleDate") Date saleDate, @RequestParam("winningBid") BigDecimal winningBid, @RequestParam("buyer") String buyer, @RequestParam("auctionResult") String auctionResult, @RequestParam("auctionStatus") String auctionStatus, @RequestParam("dispositionDate") Date dispositionDate, @RequestParam("dispositionResearchDate") Date dispositionResearchDate) throws EntityNotFoundException {
        PortalAuctionHistoryId portalauctionhistoryId = new PortalAuctionHistoryId();
        portalauctionhistoryId.setPropertyId(propertyId);
        portalauctionhistoryId.setAuctionId(auctionId);
        portalauctionhistoryId.setAuctionYear(auctionYear);
        portalauctionhistoryId.setPriorYearsDue(priorYearsDue);
        portalauctionhistoryId.setAuctionYearBilled(auctionYearBilled);
        portalauctionhistoryId.setAuctionYearDue(auctionYearDue);
        portalauctionhistoryId.setSaleAmount(saleAmount);
        portalauctionhistoryId.setRemoved(removed);
        portalauctionhistoryId.setMarketValue(marketValue);
        portalauctionhistoryId.setAssessedValuationBuilding(assessedValuationBuilding);
        portalauctionhistoryId.setAssessedValuationLand(assessedValuationLand);
        portalauctionhistoryId.setAssessedValuationTotal(assessedValuationTotal);
        portalauctionhistoryId.setAssesseeAddressCity(assesseeAddressCity);
        portalauctionhistoryId.setAssesseeAddressLine1(assesseeAddressLine1);
        portalauctionhistoryId.setAssesseeAddressState(assesseeAddressState);
        portalauctionhistoryId.setAssesseeAddressZip(assesseeAddressZip);
        portalauctionhistoryId.setAssesseeName(assesseeName);
        portalauctionhistoryId.setHomeExemption(homeExemption);
        portalauctionhistoryId.setSeniorExemption(seniorExemption);
        portalauctionhistoryId.setAssessmentYear(assessmentYear);
        portalauctionhistoryId.setCode(code);
        portalauctionhistoryId.setDescription(description);
        portalauctionhistoryId.setPropertyType(propertyType);
        portalauctionhistoryId.setStatus(status);
        portalauctionhistoryId.setBidRate(bidRate);
        portalauctionhistoryId.setOverrideTimestamp(overrideTimestamp);
        portalauctionhistoryId.setOverrideUser(overrideUser);
        portalauctionhistoryId.setSaleDate(saleDate);
        portalauctionhistoryId.setWinningBid(winningBid);
        portalauctionhistoryId.setBuyer(buyer);
        portalauctionhistoryId.setAuctionResult(auctionResult);
        portalauctionhistoryId.setAuctionStatus(auctionStatus);
        portalauctionhistoryId.setDispositionDate(dispositionDate);
        portalauctionhistoryId.setDispositionResearchDate(dispositionResearchDate);
        LOGGER.debug("Getting PortalAuctionHistory with id: {}", portalauctionhistoryId);
        PortalAuctionHistory portalauctionhistory = portalAuctionHistoryService.getById(portalauctionhistoryId);
        LOGGER.debug("PortalAuctionHistory details with id: {}", portalauctionhistory);
        return portalauctionhistory;
    }

    /**
     * @deprecated Use {@link #findPortalAuctionHistories(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAuctionHistory instances matching the search criteria.")
    public Page<PortalAuctionHistory> findPortalAuctionHistories(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAuctionHistories list");
        return portalAuctionHistoryService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAuctionHistory instances matching the search criteria.")
    public Page<PortalAuctionHistory> findPortalAuctionHistories(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalAuctionHistories list");
        return portalAuctionHistoryService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalAuctionHistories(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalAuctionHistoryService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of PortalAuctionHistory instances.")
    public Long countPortalAuctionHistories(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalAuctionHistories");
        return portalAuctionHistoryService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalAuctionHistoryService instance
	 */
    protected void setPortalAuctionHistoryService(PortalAuctionHistoryService service) {
        this.portalAuctionHistoryService = service;
    }
}
