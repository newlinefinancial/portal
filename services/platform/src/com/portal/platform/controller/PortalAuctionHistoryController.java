/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalAuctionHistoryService;
import java.math.BigDecimal;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAuctionHistory.
 * @see com.portal.platform.PortalAuctionHistory
 */
@RestController(value = "Platform.PortalAuctionHistoryController")
@RequestMapping("/platform/PortalAuctionHistory")
@Api(description = "Exposes APIs to work with PortalAuctionHistory resource.", value = "PortalAuctionHistoryController")
public class PortalAuctionHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionHistoryController.class);

    @Autowired
    @Qualifier("platform.PortalAuctionHistoryService")
    private PortalAuctionHistoryService portalAuctionHistoryService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAuctionHistory instances matching the search criteria.")
    public Page<PortalAuctionHistory> findPortalAuctionHistorys(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAuctionHistorys list");
        return portalAuctionHistoryService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAuctionHistory instances.")
    public Page<PortalAuctionHistory> getPortalAuctionHistorys(Pageable pageable) {
        LOGGER.debug("Rendering PortalAuctionHistorys list");
        return portalAuctionHistoryService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalAuctionHistoryService(PortalAuctionHistoryService service) {
        this.portalAuctionHistoryService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalAuctionHistory instance.")
    public PortalAuctionHistory createPortalAuctionHistory(@RequestBody PortalAuctionHistory instance) {
        LOGGER.debug("Create PortalAuctionHistory with information: {}", instance);
        instance = portalAuctionHistoryService.create(instance);
        LOGGER.debug("Created PortalAuctionHistory with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalAuctionHistory instance associated with the given composite-id.")
    public PortalAuctionHistory getPortalAuctionHistory(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "auctionYearBilled", required = true) Double auctionYearBilled, @RequestParam(value = "auctionYearDue", required = true) Double auctionYearDue, @RequestParam(value = "saleAmount", required = true) Double saleAmount, @RequestParam(value = "removed", required = true) Boolean removed, @RequestParam(value = "marketValue", required = true) Double marketValue, @RequestParam(value = "assessedValuationBuilding", required = true) Double assessedValuationBuilding, @RequestParam(value = "assessedValuationLand", required = true) Double assessedValuationLand, @RequestParam(value = "assessedValuationTotal", required = true) Double assessedValuationTotal, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "homeExemption", required = true) Double homeExemption, @RequestParam(value = "seniorExemption", required = true) Double seniorExemption, @RequestParam(value = "assessmentYear", required = true) Integer assessmentYear, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "description", required = true) String description, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "bidRate", required = true) Integer bidRate, @RequestParam(value = "overrideTimestamp", required = true) Date overrideTimestamp, @RequestParam(value = "overrideUser", required = true) String overrideUser, @RequestParam(value = "saleDate", required = true) Date saleDate, @RequestParam(value = "winningBid", required = true) BigDecimal winningBid, @RequestParam(value = "buyer", required = true) String buyer, @RequestParam(value = "auctionResult", required = true) String auctionResult, @RequestParam(value = "auctionStatus", required = true) String auctionStatus, @RequestParam(value = "dispositionDate", required = true) Date dispositionDate, @RequestParam(value = "dispositionResearchDate", required = true) Date dispositionResearchDate) throws EntityNotFoundException {
        PortalAuctionHistoryId temp = new PortalAuctionHistoryId();
        temp.setPropertyId(propertyId);
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setAuctionYearBilled(auctionYearBilled);
        temp.setAuctionYearDue(auctionYearDue);
        temp.setSaleAmount(saleAmount);
        temp.setRemoved(removed);
        temp.setMarketValue(marketValue);
        temp.setAssessedValuationBuilding(assessedValuationBuilding);
        temp.setAssessedValuationLand(assessedValuationLand);
        temp.setAssessedValuationTotal(assessedValuationTotal);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setAssesseeName(assesseeName);
        temp.setHomeExemption(homeExemption);
        temp.setSeniorExemption(seniorExemption);
        temp.setAssessmentYear(assessmentYear);
        temp.setCode(code);
        temp.setDescription(description);
        temp.setPropertyType(propertyType);
        temp.setStatus(status);
        temp.setBidRate(bidRate);
        temp.setOverrideTimestamp(overrideTimestamp);
        temp.setOverrideUser(overrideUser);
        temp.setSaleDate(saleDate);
        temp.setWinningBid(winningBid);
        temp.setBuyer(buyer);
        temp.setAuctionResult(auctionResult);
        temp.setAuctionStatus(auctionStatus);
        temp.setDispositionDate(dispositionDate);
        temp.setDispositionResearchDate(dispositionResearchDate);
        LOGGER.debug("Getting PortalAuctionHistory with id: {}", temp);
        PortalAuctionHistory instance = portalAuctionHistoryService.findById(temp);
        LOGGER.debug("PortalAuctionHistory details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalAuctionHistory instance associated with the given composite-id.")
    public PortalAuctionHistory editPortalAuctionHistory(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "auctionYearBilled", required = true) Double auctionYearBilled, @RequestParam(value = "auctionYearDue", required = true) Double auctionYearDue, @RequestParam(value = "saleAmount", required = true) Double saleAmount, @RequestParam(value = "removed", required = true) Boolean removed, @RequestParam(value = "marketValue", required = true) Double marketValue, @RequestParam(value = "assessedValuationBuilding", required = true) Double assessedValuationBuilding, @RequestParam(value = "assessedValuationLand", required = true) Double assessedValuationLand, @RequestParam(value = "assessedValuationTotal", required = true) Double assessedValuationTotal, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "homeExemption", required = true) Double homeExemption, @RequestParam(value = "seniorExemption", required = true) Double seniorExemption, @RequestParam(value = "assessmentYear", required = true) Integer assessmentYear, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "description", required = true) String description, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "bidRate", required = true) Integer bidRate, @RequestParam(value = "overrideTimestamp", required = true) Date overrideTimestamp, @RequestParam(value = "overrideUser", required = true) String overrideUser, @RequestParam(value = "saleDate", required = true) Date saleDate, @RequestParam(value = "winningBid", required = true) BigDecimal winningBid, @RequestParam(value = "buyer", required = true) String buyer, @RequestParam(value = "auctionResult", required = true) String auctionResult, @RequestParam(value = "auctionStatus", required = true) String auctionStatus, @RequestParam(value = "dispositionDate", required = true) Date dispositionDate, @RequestParam(value = "dispositionResearchDate", required = true) Date dispositionResearchDate, @RequestBody PortalAuctionHistory instance) throws EntityNotFoundException {
        PortalAuctionHistoryId temp = new PortalAuctionHistoryId();
        temp.setPropertyId(propertyId);
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setAuctionYearBilled(auctionYearBilled);
        temp.setAuctionYearDue(auctionYearDue);
        temp.setSaleAmount(saleAmount);
        temp.setRemoved(removed);
        temp.setMarketValue(marketValue);
        temp.setAssessedValuationBuilding(assessedValuationBuilding);
        temp.setAssessedValuationLand(assessedValuationLand);
        temp.setAssessedValuationTotal(assessedValuationTotal);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setAssesseeName(assesseeName);
        temp.setHomeExemption(homeExemption);
        temp.setSeniorExemption(seniorExemption);
        temp.setAssessmentYear(assessmentYear);
        temp.setCode(code);
        temp.setDescription(description);
        temp.setPropertyType(propertyType);
        temp.setStatus(status);
        temp.setBidRate(bidRate);
        temp.setOverrideTimestamp(overrideTimestamp);
        temp.setOverrideUser(overrideUser);
        temp.setSaleDate(saleDate);
        temp.setWinningBid(winningBid);
        temp.setBuyer(buyer);
        temp.setAuctionResult(auctionResult);
        temp.setAuctionStatus(auctionStatus);
        temp.setDispositionDate(dispositionDate);
        temp.setDispositionResearchDate(dispositionResearchDate);
        portalAuctionHistoryService.delete(temp);
        instance = portalAuctionHistoryService.create(instance);
        LOGGER.debug("PortalAuctionHistory details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalAuctionHistory instance associated with the given composite-id.")
    public boolean deletePortalAuctionHistory(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "auctionYear", required = true) Integer auctionYear, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "auctionYearBilled", required = true) Double auctionYearBilled, @RequestParam(value = "auctionYearDue", required = true) Double auctionYearDue, @RequestParam(value = "saleAmount", required = true) Double saleAmount, @RequestParam(value = "removed", required = true) Boolean removed, @RequestParam(value = "marketValue", required = true) Double marketValue, @RequestParam(value = "assessedValuationBuilding", required = true) Double assessedValuationBuilding, @RequestParam(value = "assessedValuationLand", required = true) Double assessedValuationLand, @RequestParam(value = "assessedValuationTotal", required = true) Double assessedValuationTotal, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "homeExemption", required = true) Double homeExemption, @RequestParam(value = "seniorExemption", required = true) Double seniorExemption, @RequestParam(value = "assessmentYear", required = true) Integer assessmentYear, @RequestParam(value = "code", required = true) String code, @RequestParam(value = "description", required = true) String description, @RequestParam(value = "propertyType", required = true) String propertyType, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "bidRate", required = true) Integer bidRate, @RequestParam(value = "overrideTimestamp", required = true) Date overrideTimestamp, @RequestParam(value = "overrideUser", required = true) String overrideUser, @RequestParam(value = "saleDate", required = true) Date saleDate, @RequestParam(value = "winningBid", required = true) BigDecimal winningBid, @RequestParam(value = "buyer", required = true) String buyer, @RequestParam(value = "auctionResult", required = true) String auctionResult, @RequestParam(value = "auctionStatus", required = true) String auctionStatus, @RequestParam(value = "dispositionDate", required = true) Date dispositionDate, @RequestParam(value = "dispositionResearchDate", required = true) Date dispositionResearchDate) throws EntityNotFoundException {
        PortalAuctionHistoryId temp = new PortalAuctionHistoryId();
        temp.setPropertyId(propertyId);
        temp.setAuctionId(auctionId);
        temp.setAuctionYear(auctionYear);
        temp.setPriorYearsDue(priorYearsDue);
        temp.setAuctionYearBilled(auctionYearBilled);
        temp.setAuctionYearDue(auctionYearDue);
        temp.setSaleAmount(saleAmount);
        temp.setRemoved(removed);
        temp.setMarketValue(marketValue);
        temp.setAssessedValuationBuilding(assessedValuationBuilding);
        temp.setAssessedValuationLand(assessedValuationLand);
        temp.setAssessedValuationTotal(assessedValuationTotal);
        temp.setAssesseeAddressCity(assesseeAddressCity);
        temp.setAssesseeAddressLine1(assesseeAddressLine1);
        temp.setAssesseeAddressState(assesseeAddressState);
        temp.setAssesseeAddressZip(assesseeAddressZip);
        temp.setAssesseeName(assesseeName);
        temp.setHomeExemption(homeExemption);
        temp.setSeniorExemption(seniorExemption);
        temp.setAssessmentYear(assessmentYear);
        temp.setCode(code);
        temp.setDescription(description);
        temp.setPropertyType(propertyType);
        temp.setStatus(status);
        temp.setBidRate(bidRate);
        temp.setOverrideTimestamp(overrideTimestamp);
        temp.setOverrideUser(overrideUser);
        temp.setSaleDate(saleDate);
        temp.setWinningBid(winningBid);
        temp.setBuyer(buyer);
        temp.setAuctionResult(auctionResult);
        temp.setAuctionStatus(auctionStatus);
        temp.setDispositionDate(dispositionDate);
        temp.setDispositionResearchDate(dispositionResearchDate);
        LOGGER.debug("Deleting PortalAuctionHistory with id: {}", temp);
        PortalAuctionHistory deleted = portalAuctionHistoryService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalAuctionHistory instances.")
    public Long countAllPortalAuctionHistorys() {
        LOGGER.debug("counting PortalAuctionHistorys");
        Long count = portalAuctionHistoryService.countAll();
        return count;
    }
}
