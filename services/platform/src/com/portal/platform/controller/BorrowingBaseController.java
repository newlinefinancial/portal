/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.BorrowingBase;
import com.portal.platform.BorrowingBaseId;
import com.portal.platform.service.BorrowingBaseService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BorrowingBase.
 * @see BorrowingBase
 */
@RestController("platform.BorrowingBaseController")
@RequestMapping("/platform/BorrowingBase")
@Api(description = "Exposes APIs to work with BorrowingBase resource.", value = "BorrowingBaseController")
public class BorrowingBaseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BorrowingBaseController.class);

    @Autowired
    @Qualifier("platform.BorrowingBaseService")
    private BorrowingBaseService borrowingBaseService;

    /**
     * @deprecated Use {@link #findBorrowingBases(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BorrowingBase instances matching the search criteria.")
    public Page<BorrowingBase> findBorrowingBases(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BorrowingBases list");
        return borrowingBaseService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BorrowingBase instances matching the search criteria.")
    public Page<BorrowingBase> findBorrowingBases(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BorrowingBases list");
        return borrowingBaseService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBorrowingBases(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return borrowingBaseService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BorrowingBaseService instance
	 */
    protected void setBorrowingBaseService(BorrowingBaseService service) {
        this.borrowingBaseService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BorrowingBase instance associated with the given composite-id.")
    public BorrowingBase getBorrowingBase(@RequestParam(value = "state", required = true) String state, @RequestParam(value = "county", required = true) String county, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "trustReceipt", required = true) Double trustReceipt) throws EntityNotFoundException {
        BorrowingBaseId borrowingbaseId = new BorrowingBaseId();
        borrowingbaseId.setState(state);
        borrowingbaseId.setCounty(county);
        borrowingbaseId.setTaxYear(taxYear);
        borrowingbaseId.setCertificatePrincipal(certificatePrincipal);
        borrowingbaseId.setSubPrincipal(subPrincipal);
        borrowingbaseId.setTrustReceipt(trustReceipt);
        LOGGER.debug("Getting BorrowingBase with id: {}", borrowingbaseId);
        BorrowingBase borrowingbase = borrowingBaseService.getById(borrowingbaseId);
        LOGGER.debug("BorrowingBase details with id: {}", borrowingbase);
        return borrowingbase;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BorrowingBase instances.")
    public Long countBorrowingBases(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting BorrowingBases");
        return borrowingBaseService.count(query);
    }
}
