/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.BorrowingBaseService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BorrowingBase.
 * @see com.portal.platform.BorrowingBase
 */
@RestController(value = "Platform.BorrowingBaseController")
@RequestMapping("/platform/BorrowingBase")
@Api(description = "Exposes APIs to work with BorrowingBase resource.", value = "BorrowingBaseController")
public class BorrowingBaseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BorrowingBaseController.class);

    @Autowired
    @Qualifier("platform.BorrowingBaseService")
    private BorrowingBaseService borrowingBaseService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BorrowingBase instances matching the search criteria.")
    public Page<BorrowingBase> findBorrowingBases(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BorrowingBases list");
        return borrowingBaseService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BorrowingBase instances.")
    public Page<BorrowingBase> getBorrowingBases(Pageable pageable) {
        LOGGER.debug("Rendering BorrowingBases list");
        return borrowingBaseService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBorrowingBaseService(BorrowingBaseService service) {
        this.borrowingBaseService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BorrowingBase instance.")
    public BorrowingBase createBorrowingBase(@RequestBody BorrowingBase instance) {
        LOGGER.debug("Create BorrowingBase with information: {}", instance);
        instance = borrowingBaseService.create(instance);
        LOGGER.debug("Created BorrowingBase with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BorrowingBase instance associated with the given composite-id.")
    public BorrowingBase getBorrowingBase(@RequestParam(value = "state", required = true) String state, @RequestParam(value = "county", required = true) String county, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "trustReceipt", required = true) Double trustReceipt) throws EntityNotFoundException {
        BorrowingBaseId temp = new BorrowingBaseId();
        temp.setState(state);
        temp.setCounty(county);
        temp.setTaxYear(taxYear);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setTrustReceipt(trustReceipt);
        LOGGER.debug("Getting BorrowingBase with id: {}", temp);
        BorrowingBase instance = borrowingBaseService.findById(temp);
        LOGGER.debug("BorrowingBase details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BorrowingBase instance associated with the given composite-id.")
    public BorrowingBase editBorrowingBase(@RequestParam(value = "state", required = true) String state, @RequestParam(value = "county", required = true) String county, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "trustReceipt", required = true) Double trustReceipt, @RequestBody BorrowingBase instance) throws EntityNotFoundException {
        BorrowingBaseId temp = new BorrowingBaseId();
        temp.setState(state);
        temp.setCounty(county);
        temp.setTaxYear(taxYear);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setTrustReceipt(trustReceipt);
        borrowingBaseService.delete(temp);
        instance = borrowingBaseService.create(instance);
        LOGGER.debug("BorrowingBase details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BorrowingBase instance associated with the given composite-id.")
    public boolean deleteBorrowingBase(@RequestParam(value = "state", required = true) String state, @RequestParam(value = "county", required = true) String county, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "certificatePrincipal", required = true) Double certificatePrincipal, @RequestParam(value = "subPrincipal", required = true) Double subPrincipal, @RequestParam(value = "trustReceipt", required = true) Double trustReceipt) throws EntityNotFoundException {
        BorrowingBaseId temp = new BorrowingBaseId();
        temp.setState(state);
        temp.setCounty(county);
        temp.setTaxYear(taxYear);
        temp.setCertificatePrincipal(certificatePrincipal);
        temp.setSubPrincipal(subPrincipal);
        temp.setTrustReceipt(trustReceipt);
        LOGGER.debug("Deleting BorrowingBase with id: {}", temp);
        BorrowingBase deleted = borrowingBaseService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BorrowingBase instances.")
    public Long countAllBorrowingBases() {
        LOGGER.debug("counting BorrowingBases");
        Long count = borrowingBaseService.countAll();
        return count;
    }
}
