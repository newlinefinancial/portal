/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Party;
import com.portal.platform.Source;
import com.portal.platform.service.PartyService;
import com.portal.platform.service.SourceService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Source.
 * @see Source
 */
@RestController("platform.SourceController")
@RequestMapping("/platform/Source")
@Api(description = "Exposes APIs to work with Source resource.", value = "SourceController")
public class SourceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SourceController.class);

    @Autowired
    @Qualifier("platform.SourceService")
    private SourceService sourceService;

    @Autowired
    @Qualifier("platform.PartyService")
    private PartyService partyService;

    /**
     * @deprecated Use {@link #findSources(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Source instances matching the search criteria.")
    public Page<Source> findSources(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Sources list");
        return sourceService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Source instances matching the search criteria.")
    public Page<Source> findSources(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Sources list");
        return sourceService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportSources(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return sourceService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/partiesForSource2", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the partiesForSource2 instance associated with the given id.")
    public Page<Party> findAssociatedPartiesForSource2(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated partiesForSource2");
        return partyService.findAssociatedValues(id, "sourceBySource2", "code", pageable);
    }

    @RequestMapping(value = "/{id:.+}/partiesForSource1", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the partiesForSource1 instance associated with the given id.")
    public Page<Party> findAssociatedPartiesForSource1(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated partiesForSource1");
        return partyService.findAssociatedValues(id, "sourceBySource1", "code", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SourceService instance
	 */
    protected void setSourceService(SourceService service) {
        this.sourceService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartyService instance
	 */
    protected void setPartyService(PartyService service) {
        this.partyService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Source instances.")
    public Long countSources(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Sources");
        return sourceService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Source instance associated with the given id.")
    public Source getSource(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Source with id: {}", id);
        Source foundSource = sourceService.getById(id);
        LOGGER.debug("Source details with id: {}", foundSource);
        return foundSource;
    }
}
