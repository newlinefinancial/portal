/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.ModelTitleService;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ModelTitle.
 * @see com.portal.platform.ModelTitle
 */
@RestController(value = "Platform.ModelTitleController")
@RequestMapping("/platform/ModelTitle")
@Api(description = "Exposes APIs to work with ModelTitle resource.", value = "ModelTitleController")
public class ModelTitleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModelTitleController.class);

    @Autowired
    @Qualifier("platform.ModelTitleService")
    private ModelTitleService modelTitleService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ModelTitle instances matching the search criteria.")
    public Page<ModelTitle> findModelTitles(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ModelTitles list");
        return modelTitleService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ModelTitle instances.")
    public Page<ModelTitle> getModelTitles(Pageable pageable) {
        LOGGER.debug("Rendering ModelTitles list");
        return modelTitleService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setModelTitleService(ModelTitleService service) {
        this.modelTitleService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ModelTitle instance.")
    public ModelTitle createModelTitle(@RequestBody ModelTitle instance) {
        LOGGER.debug("Create ModelTitle with information: {}", instance);
        instance = modelTitleService.create(instance);
        LOGGER.debug("Created ModelTitle with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ModelTitle instance associated with the given composite-id.")
    public ModelTitle getModelTitle(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "demoFlg", required = true) BigDecimal demoFlg, @RequestParam(value = "gov", required = true) Integer gov, @RequestParam(value = "govLien", required = true) Integer govLien, @RequestParam(value = "numMortgages", required = true) Integer numMortgages, @RequestParam(value = "valMortgages", required = true) BigInteger valMortgages, @RequestParam(value = "maxValMortgages", required = true) BigInteger maxValMortgages, @RequestParam(value = "minValMortgages", required = true) BigInteger minValMortgages, @RequestParam(value = "newestMortgage", required = true) Integer newestMortgage, @RequestParam(value = "oldestMortgage", required = true) Integer oldestMortgage, @RequestParam(value = "numDeed", required = true) Integer numDeed, @RequestParam(value = "valDeed", required = true) BigInteger valDeed, @RequestParam(value = "maxValDeed", required = true) BigInteger maxValDeed, @RequestParam(value = "minValDeed", required = true) BigInteger minValDeed, @RequestParam(value = "newestDeed", required = true) Integer newestDeed, @RequestParam(value = "oldestDeed", required = true) Integer oldestDeed, @RequestParam(value = "numLien", required = true) Integer numLien, @RequestParam(value = "valLien", required = true) BigInteger valLien, @RequestParam(value = "maxValLien", required = true) BigInteger maxValLien, @RequestParam(value = "minValLien", required = true) BigInteger minValLien, @RequestParam(value = "newestLien", required = true) Integer newestLien, @RequestParam(value = "oldestLien", required = true) Integer oldestLien, @RequestParam(value = "numLis", required = true) Integer numLis, @RequestParam(value = "valLis", required = true) BigInteger valLis, @RequestParam(value = "maxValLis", required = true) BigInteger maxValLis, @RequestParam(value = "minValLis", required = true) BigInteger minValLis, @RequestParam(value = "newestLis", required = true) Integer newestLis, @RequestParam(value = "oldestLis", required = true) Integer oldestLis, @RequestParam(value = "numAssignment", required = true) Integer numAssignment, @RequestParam(value = "valAssignment", required = true) BigInteger valAssignment, @RequestParam(value = "maxValAssignment", required = true) BigInteger maxValAssignment, @RequestParam(value = "minValAssignment", required = true) BigInteger minValAssignment, @RequestParam(value = "newestAssignment", required = true) Integer newestAssignment, @RequestParam(value = "oldestAssignment", required = true) Integer oldestAssignment, @RequestParam(value = "numQuit", required = true) Integer numQuit, @RequestParam(value = "valQuit", required = true) BigInteger valQuit, @RequestParam(value = "maxValQuit", required = true) BigInteger maxValQuit, @RequestParam(value = "minValQuit", required = true) BigInteger minValQuit, @RequestParam(value = "newestQuit", required = true) Integer newestQuit, @RequestParam(value = "oldestQuit", required = true) Integer oldestQuit, @RequestParam(value = "numForeclosure", required = true) Integer numForeclosure, @RequestParam(value = "valForeclosure", required = true) BigInteger valForeclosure, @RequestParam(value = "maxValForeclosure", required = true) BigInteger maxValForeclosure, @RequestParam(value = "minValForeclosure", required = true) BigInteger minValForeclosure, @RequestParam(value = "newestForeclosure", required = true) Integer newestForeclosure, @RequestParam(value = "oldestForeclosure", required = true) Integer oldestForeclosure, @RequestParam(value = "numRents", required = true) Integer numRents, @RequestParam(value = "valRents", required = true) BigInteger valRents, @RequestParam(value = "maxValRents", required = true) BigInteger maxValRents, @RequestParam(value = "minValRents", required = true) BigInteger minValRents, @RequestParam(value = "newestRents", required = true) Integer newestRents, @RequestParam(value = "oldestRents", required = true) Integer oldestRents, @RequestParam(value = "numBuilding", required = true) Integer numBuilding, @RequestParam(value = "valBuilding", required = true) BigInteger valBuilding, @RequestParam(value = "maxValBuilding", required = true) BigInteger maxValBuilding, @RequestParam(value = "minValBuilding", required = true) BigInteger minValBuilding, @RequestParam(value = "newestBuilding", required = true) Integer newestBuilding, @RequestParam(value = "oldestBuilding", required = true) Integer oldestBuilding) throws EntityNotFoundException {
        ModelTitleId temp = new ModelTitleId();
        temp.setAuctionId(auctionId);
        temp.setPropertyId(propertyId);
        temp.setDemoFlg(demoFlg);
        temp.setGov(gov);
        temp.setGovLien(govLien);
        temp.setNumMortgages(numMortgages);
        temp.setValMortgages(valMortgages);
        temp.setMaxValMortgages(maxValMortgages);
        temp.setMinValMortgages(minValMortgages);
        temp.setNewestMortgage(newestMortgage);
        temp.setOldestMortgage(oldestMortgage);
        temp.setNumDeed(numDeed);
        temp.setValDeed(valDeed);
        temp.setMaxValDeed(maxValDeed);
        temp.setMinValDeed(minValDeed);
        temp.setNewestDeed(newestDeed);
        temp.setOldestDeed(oldestDeed);
        temp.setNumLien(numLien);
        temp.setValLien(valLien);
        temp.setMaxValLien(maxValLien);
        temp.setMinValLien(minValLien);
        temp.setNewestLien(newestLien);
        temp.setOldestLien(oldestLien);
        temp.setNumLis(numLis);
        temp.setValLis(valLis);
        temp.setMaxValLis(maxValLis);
        temp.setMinValLis(minValLis);
        temp.setNewestLis(newestLis);
        temp.setOldestLis(oldestLis);
        temp.setNumAssignment(numAssignment);
        temp.setValAssignment(valAssignment);
        temp.setMaxValAssignment(maxValAssignment);
        temp.setMinValAssignment(minValAssignment);
        temp.setNewestAssignment(newestAssignment);
        temp.setOldestAssignment(oldestAssignment);
        temp.setNumQuit(numQuit);
        temp.setValQuit(valQuit);
        temp.setMaxValQuit(maxValQuit);
        temp.setMinValQuit(minValQuit);
        temp.setNewestQuit(newestQuit);
        temp.setOldestQuit(oldestQuit);
        temp.setNumForeclosure(numForeclosure);
        temp.setValForeclosure(valForeclosure);
        temp.setMaxValForeclosure(maxValForeclosure);
        temp.setMinValForeclosure(minValForeclosure);
        temp.setNewestForeclosure(newestForeclosure);
        temp.setOldestForeclosure(oldestForeclosure);
        temp.setNumRents(numRents);
        temp.setValRents(valRents);
        temp.setMaxValRents(maxValRents);
        temp.setMinValRents(minValRents);
        temp.setNewestRents(newestRents);
        temp.setOldestRents(oldestRents);
        temp.setNumBuilding(numBuilding);
        temp.setValBuilding(valBuilding);
        temp.setMaxValBuilding(maxValBuilding);
        temp.setMinValBuilding(minValBuilding);
        temp.setNewestBuilding(newestBuilding);
        temp.setOldestBuilding(oldestBuilding);
        LOGGER.debug("Getting ModelTitle with id: {}", temp);
        ModelTitle instance = modelTitleService.findById(temp);
        LOGGER.debug("ModelTitle details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ModelTitle instance associated with the given composite-id.")
    public ModelTitle editModelTitle(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "demoFlg", required = true) BigDecimal demoFlg, @RequestParam(value = "gov", required = true) Integer gov, @RequestParam(value = "govLien", required = true) Integer govLien, @RequestParam(value = "numMortgages", required = true) Integer numMortgages, @RequestParam(value = "valMortgages", required = true) BigInteger valMortgages, @RequestParam(value = "maxValMortgages", required = true) BigInteger maxValMortgages, @RequestParam(value = "minValMortgages", required = true) BigInteger minValMortgages, @RequestParam(value = "newestMortgage", required = true) Integer newestMortgage, @RequestParam(value = "oldestMortgage", required = true) Integer oldestMortgage, @RequestParam(value = "numDeed", required = true) Integer numDeed, @RequestParam(value = "valDeed", required = true) BigInteger valDeed, @RequestParam(value = "maxValDeed", required = true) BigInteger maxValDeed, @RequestParam(value = "minValDeed", required = true) BigInteger minValDeed, @RequestParam(value = "newestDeed", required = true) Integer newestDeed, @RequestParam(value = "oldestDeed", required = true) Integer oldestDeed, @RequestParam(value = "numLien", required = true) Integer numLien, @RequestParam(value = "valLien", required = true) BigInteger valLien, @RequestParam(value = "maxValLien", required = true) BigInteger maxValLien, @RequestParam(value = "minValLien", required = true) BigInteger minValLien, @RequestParam(value = "newestLien", required = true) Integer newestLien, @RequestParam(value = "oldestLien", required = true) Integer oldestLien, @RequestParam(value = "numLis", required = true) Integer numLis, @RequestParam(value = "valLis", required = true) BigInteger valLis, @RequestParam(value = "maxValLis", required = true) BigInteger maxValLis, @RequestParam(value = "minValLis", required = true) BigInteger minValLis, @RequestParam(value = "newestLis", required = true) Integer newestLis, @RequestParam(value = "oldestLis", required = true) Integer oldestLis, @RequestParam(value = "numAssignment", required = true) Integer numAssignment, @RequestParam(value = "valAssignment", required = true) BigInteger valAssignment, @RequestParam(value = "maxValAssignment", required = true) BigInteger maxValAssignment, @RequestParam(value = "minValAssignment", required = true) BigInteger minValAssignment, @RequestParam(value = "newestAssignment", required = true) Integer newestAssignment, @RequestParam(value = "oldestAssignment", required = true) Integer oldestAssignment, @RequestParam(value = "numQuit", required = true) Integer numQuit, @RequestParam(value = "valQuit", required = true) BigInteger valQuit, @RequestParam(value = "maxValQuit", required = true) BigInteger maxValQuit, @RequestParam(value = "minValQuit", required = true) BigInteger minValQuit, @RequestParam(value = "newestQuit", required = true) Integer newestQuit, @RequestParam(value = "oldestQuit", required = true) Integer oldestQuit, @RequestParam(value = "numForeclosure", required = true) Integer numForeclosure, @RequestParam(value = "valForeclosure", required = true) BigInteger valForeclosure, @RequestParam(value = "maxValForeclosure", required = true) BigInteger maxValForeclosure, @RequestParam(value = "minValForeclosure", required = true) BigInteger minValForeclosure, @RequestParam(value = "newestForeclosure", required = true) Integer newestForeclosure, @RequestParam(value = "oldestForeclosure", required = true) Integer oldestForeclosure, @RequestParam(value = "numRents", required = true) Integer numRents, @RequestParam(value = "valRents", required = true) BigInteger valRents, @RequestParam(value = "maxValRents", required = true) BigInteger maxValRents, @RequestParam(value = "minValRents", required = true) BigInteger minValRents, @RequestParam(value = "newestRents", required = true) Integer newestRents, @RequestParam(value = "oldestRents", required = true) Integer oldestRents, @RequestParam(value = "numBuilding", required = true) Integer numBuilding, @RequestParam(value = "valBuilding", required = true) BigInteger valBuilding, @RequestParam(value = "maxValBuilding", required = true) BigInteger maxValBuilding, @RequestParam(value = "minValBuilding", required = true) BigInteger minValBuilding, @RequestParam(value = "newestBuilding", required = true) Integer newestBuilding, @RequestParam(value = "oldestBuilding", required = true) Integer oldestBuilding, @RequestBody ModelTitle instance) throws EntityNotFoundException {
        ModelTitleId temp = new ModelTitleId();
        temp.setAuctionId(auctionId);
        temp.setPropertyId(propertyId);
        temp.setDemoFlg(demoFlg);
        temp.setGov(gov);
        temp.setGovLien(govLien);
        temp.setNumMortgages(numMortgages);
        temp.setValMortgages(valMortgages);
        temp.setMaxValMortgages(maxValMortgages);
        temp.setMinValMortgages(minValMortgages);
        temp.setNewestMortgage(newestMortgage);
        temp.setOldestMortgage(oldestMortgage);
        temp.setNumDeed(numDeed);
        temp.setValDeed(valDeed);
        temp.setMaxValDeed(maxValDeed);
        temp.setMinValDeed(minValDeed);
        temp.setNewestDeed(newestDeed);
        temp.setOldestDeed(oldestDeed);
        temp.setNumLien(numLien);
        temp.setValLien(valLien);
        temp.setMaxValLien(maxValLien);
        temp.setMinValLien(minValLien);
        temp.setNewestLien(newestLien);
        temp.setOldestLien(oldestLien);
        temp.setNumLis(numLis);
        temp.setValLis(valLis);
        temp.setMaxValLis(maxValLis);
        temp.setMinValLis(minValLis);
        temp.setNewestLis(newestLis);
        temp.setOldestLis(oldestLis);
        temp.setNumAssignment(numAssignment);
        temp.setValAssignment(valAssignment);
        temp.setMaxValAssignment(maxValAssignment);
        temp.setMinValAssignment(minValAssignment);
        temp.setNewestAssignment(newestAssignment);
        temp.setOldestAssignment(oldestAssignment);
        temp.setNumQuit(numQuit);
        temp.setValQuit(valQuit);
        temp.setMaxValQuit(maxValQuit);
        temp.setMinValQuit(minValQuit);
        temp.setNewestQuit(newestQuit);
        temp.setOldestQuit(oldestQuit);
        temp.setNumForeclosure(numForeclosure);
        temp.setValForeclosure(valForeclosure);
        temp.setMaxValForeclosure(maxValForeclosure);
        temp.setMinValForeclosure(minValForeclosure);
        temp.setNewestForeclosure(newestForeclosure);
        temp.setOldestForeclosure(oldestForeclosure);
        temp.setNumRents(numRents);
        temp.setValRents(valRents);
        temp.setMaxValRents(maxValRents);
        temp.setMinValRents(minValRents);
        temp.setNewestRents(newestRents);
        temp.setOldestRents(oldestRents);
        temp.setNumBuilding(numBuilding);
        temp.setValBuilding(valBuilding);
        temp.setMaxValBuilding(maxValBuilding);
        temp.setMinValBuilding(minValBuilding);
        temp.setNewestBuilding(newestBuilding);
        temp.setOldestBuilding(oldestBuilding);
        modelTitleService.delete(temp);
        instance = modelTitleService.create(instance);
        LOGGER.debug("ModelTitle details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ModelTitle instance associated with the given composite-id.")
    public boolean deleteModelTitle(@RequestParam(value = "auctionId", required = true) Integer auctionId, @RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "demoFlg", required = true) BigDecimal demoFlg, @RequestParam(value = "gov", required = true) Integer gov, @RequestParam(value = "govLien", required = true) Integer govLien, @RequestParam(value = "numMortgages", required = true) Integer numMortgages, @RequestParam(value = "valMortgages", required = true) BigInteger valMortgages, @RequestParam(value = "maxValMortgages", required = true) BigInteger maxValMortgages, @RequestParam(value = "minValMortgages", required = true) BigInteger minValMortgages, @RequestParam(value = "newestMortgage", required = true) Integer newestMortgage, @RequestParam(value = "oldestMortgage", required = true) Integer oldestMortgage, @RequestParam(value = "numDeed", required = true) Integer numDeed, @RequestParam(value = "valDeed", required = true) BigInteger valDeed, @RequestParam(value = "maxValDeed", required = true) BigInteger maxValDeed, @RequestParam(value = "minValDeed", required = true) BigInteger minValDeed, @RequestParam(value = "newestDeed", required = true) Integer newestDeed, @RequestParam(value = "oldestDeed", required = true) Integer oldestDeed, @RequestParam(value = "numLien", required = true) Integer numLien, @RequestParam(value = "valLien", required = true) BigInteger valLien, @RequestParam(value = "maxValLien", required = true) BigInteger maxValLien, @RequestParam(value = "minValLien", required = true) BigInteger minValLien, @RequestParam(value = "newestLien", required = true) Integer newestLien, @RequestParam(value = "oldestLien", required = true) Integer oldestLien, @RequestParam(value = "numLis", required = true) Integer numLis, @RequestParam(value = "valLis", required = true) BigInteger valLis, @RequestParam(value = "maxValLis", required = true) BigInteger maxValLis, @RequestParam(value = "minValLis", required = true) BigInteger minValLis, @RequestParam(value = "newestLis", required = true) Integer newestLis, @RequestParam(value = "oldestLis", required = true) Integer oldestLis, @RequestParam(value = "numAssignment", required = true) Integer numAssignment, @RequestParam(value = "valAssignment", required = true) BigInteger valAssignment, @RequestParam(value = "maxValAssignment", required = true) BigInteger maxValAssignment, @RequestParam(value = "minValAssignment", required = true) BigInteger minValAssignment, @RequestParam(value = "newestAssignment", required = true) Integer newestAssignment, @RequestParam(value = "oldestAssignment", required = true) Integer oldestAssignment, @RequestParam(value = "numQuit", required = true) Integer numQuit, @RequestParam(value = "valQuit", required = true) BigInteger valQuit, @RequestParam(value = "maxValQuit", required = true) BigInteger maxValQuit, @RequestParam(value = "minValQuit", required = true) BigInteger minValQuit, @RequestParam(value = "newestQuit", required = true) Integer newestQuit, @RequestParam(value = "oldestQuit", required = true) Integer oldestQuit, @RequestParam(value = "numForeclosure", required = true) Integer numForeclosure, @RequestParam(value = "valForeclosure", required = true) BigInteger valForeclosure, @RequestParam(value = "maxValForeclosure", required = true) BigInteger maxValForeclosure, @RequestParam(value = "minValForeclosure", required = true) BigInteger minValForeclosure, @RequestParam(value = "newestForeclosure", required = true) Integer newestForeclosure, @RequestParam(value = "oldestForeclosure", required = true) Integer oldestForeclosure, @RequestParam(value = "numRents", required = true) Integer numRents, @RequestParam(value = "valRents", required = true) BigInteger valRents, @RequestParam(value = "maxValRents", required = true) BigInteger maxValRents, @RequestParam(value = "minValRents", required = true) BigInteger minValRents, @RequestParam(value = "newestRents", required = true) Integer newestRents, @RequestParam(value = "oldestRents", required = true) Integer oldestRents, @RequestParam(value = "numBuilding", required = true) Integer numBuilding, @RequestParam(value = "valBuilding", required = true) BigInteger valBuilding, @RequestParam(value = "maxValBuilding", required = true) BigInteger maxValBuilding, @RequestParam(value = "minValBuilding", required = true) BigInteger minValBuilding, @RequestParam(value = "newestBuilding", required = true) Integer newestBuilding, @RequestParam(value = "oldestBuilding", required = true) Integer oldestBuilding) throws EntityNotFoundException {
        ModelTitleId temp = new ModelTitleId();
        temp.setAuctionId(auctionId);
        temp.setPropertyId(propertyId);
        temp.setDemoFlg(demoFlg);
        temp.setGov(gov);
        temp.setGovLien(govLien);
        temp.setNumMortgages(numMortgages);
        temp.setValMortgages(valMortgages);
        temp.setMaxValMortgages(maxValMortgages);
        temp.setMinValMortgages(minValMortgages);
        temp.setNewestMortgage(newestMortgage);
        temp.setOldestMortgage(oldestMortgage);
        temp.setNumDeed(numDeed);
        temp.setValDeed(valDeed);
        temp.setMaxValDeed(maxValDeed);
        temp.setMinValDeed(minValDeed);
        temp.setNewestDeed(newestDeed);
        temp.setOldestDeed(oldestDeed);
        temp.setNumLien(numLien);
        temp.setValLien(valLien);
        temp.setMaxValLien(maxValLien);
        temp.setMinValLien(minValLien);
        temp.setNewestLien(newestLien);
        temp.setOldestLien(oldestLien);
        temp.setNumLis(numLis);
        temp.setValLis(valLis);
        temp.setMaxValLis(maxValLis);
        temp.setMinValLis(minValLis);
        temp.setNewestLis(newestLis);
        temp.setOldestLis(oldestLis);
        temp.setNumAssignment(numAssignment);
        temp.setValAssignment(valAssignment);
        temp.setMaxValAssignment(maxValAssignment);
        temp.setMinValAssignment(minValAssignment);
        temp.setNewestAssignment(newestAssignment);
        temp.setOldestAssignment(oldestAssignment);
        temp.setNumQuit(numQuit);
        temp.setValQuit(valQuit);
        temp.setMaxValQuit(maxValQuit);
        temp.setMinValQuit(minValQuit);
        temp.setNewestQuit(newestQuit);
        temp.setOldestQuit(oldestQuit);
        temp.setNumForeclosure(numForeclosure);
        temp.setValForeclosure(valForeclosure);
        temp.setMaxValForeclosure(maxValForeclosure);
        temp.setMinValForeclosure(minValForeclosure);
        temp.setNewestForeclosure(newestForeclosure);
        temp.setOldestForeclosure(oldestForeclosure);
        temp.setNumRents(numRents);
        temp.setValRents(valRents);
        temp.setMaxValRents(maxValRents);
        temp.setMinValRents(minValRents);
        temp.setNewestRents(newestRents);
        temp.setOldestRents(oldestRents);
        temp.setNumBuilding(numBuilding);
        temp.setValBuilding(valBuilding);
        temp.setMaxValBuilding(maxValBuilding);
        temp.setMinValBuilding(minValBuilding);
        temp.setNewestBuilding(newestBuilding);
        temp.setOldestBuilding(oldestBuilding);
        LOGGER.debug("Deleting ModelTitle with id: {}", temp);
        ModelTitle deleted = modelTitleService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ModelTitle instances.")
    public Long countAllModelTitles() {
        LOGGER.debug("counting ModelTitles");
        Long count = modelTitleService.countAll();
        return count;
    }
}
