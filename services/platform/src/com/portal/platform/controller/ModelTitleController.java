/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import java.math.BigInteger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.ModelTitle;
import com.portal.platform.ModelTitleId;
import com.portal.platform.service.ModelTitleService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ModelTitle.
 * @see ModelTitle
 */
@RestController("platform.ModelTitleController")
@RequestMapping("/platform/ModelTitle")
@Api(description = "Exposes APIs to work with ModelTitle resource.", value = "ModelTitleController")
public class ModelTitleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ModelTitleController.class);

    @Autowired
    @Qualifier("platform.ModelTitleService")
    private ModelTitleService modelTitleService;

    /**
     * @deprecated Use {@link #findModelTitles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ModelTitle instances matching the search criteria.")
    public Page<ModelTitle> findModelTitles(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ModelTitles list");
        return modelTitleService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ModelTitle instances matching the search criteria.")
    public Page<ModelTitle> findModelTitles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ModelTitles list");
        return modelTitleService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportModelTitles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return modelTitleService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ModelTitleService instance
	 */
    protected void setModelTitleService(ModelTitleService service) {
        this.modelTitleService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ModelTitle instance associated with the given composite-id.")
    public ModelTitle getModelTitle(@RequestParam(value = "auctionId", required = true) int auctionId, @RequestParam(value = "propertyId", required = true) int propertyId, @RequestParam(value = "demoFlg", required = true) BigDecimal demoFlg, @RequestParam(value = "gov", required = true) Integer gov, @RequestParam(value = "govLien", required = true) Integer govLien, @RequestParam(value = "numMortgages", required = true) Integer numMortgages, @RequestParam(value = "valMortgages", required = true) BigInteger valMortgages, @RequestParam(value = "maxValMortgages", required = true) BigInteger maxValMortgages, @RequestParam(value = "minValMortgages", required = true) BigInteger minValMortgages, @RequestParam(value = "newestMortgage", required = true) Integer newestMortgage, @RequestParam(value = "oldestMortgage", required = true) Integer oldestMortgage, @RequestParam(value = "numDeed", required = true) Integer numDeed, @RequestParam(value = "valDeed", required = true) BigInteger valDeed, @RequestParam(value = "maxValDeed", required = true) BigInteger maxValDeed, @RequestParam(value = "minValDeed", required = true) BigInteger minValDeed, @RequestParam(value = "newestDeed", required = true) Integer newestDeed, @RequestParam(value = "oldestDeed", required = true) Integer oldestDeed, @RequestParam(value = "numLien", required = true) Integer numLien, @RequestParam(value = "valLien", required = true) BigInteger valLien, @RequestParam(value = "maxValLien", required = true) BigInteger maxValLien, @RequestParam(value = "minValLien", required = true) BigInteger minValLien, @RequestParam(value = "newestLien", required = true) Integer newestLien, @RequestParam(value = "oldestLien", required = true) Integer oldestLien, @RequestParam(value = "numLis", required = true) Integer numLis, @RequestParam(value = "valLis", required = true) BigInteger valLis, @RequestParam(value = "maxValLis", required = true) BigInteger maxValLis, @RequestParam(value = "minValLis", required = true) BigInteger minValLis, @RequestParam(value = "newestLis", required = true) Integer newestLis, @RequestParam(value = "oldestLis", required = true) Integer oldestLis, @RequestParam(value = "numAssignment", required = true) Integer numAssignment, @RequestParam(value = "valAssignment", required = true) BigInteger valAssignment, @RequestParam(value = "maxValAssignment", required = true) BigInteger maxValAssignment, @RequestParam(value = "minValAssignment", required = true) BigInteger minValAssignment, @RequestParam(value = "newestAssignment", required = true) Integer newestAssignment, @RequestParam(value = "oldestAssignment", required = true) Integer oldestAssignment, @RequestParam(value = "numQuit", required = true) Integer numQuit, @RequestParam(value = "valQuit", required = true) BigInteger valQuit, @RequestParam(value = "maxValQuit", required = true) BigInteger maxValQuit, @RequestParam(value = "minValQuit", required = true) BigInteger minValQuit, @RequestParam(value = "newestQuit", required = true) Integer newestQuit, @RequestParam(value = "oldestQuit", required = true) Integer oldestQuit, @RequestParam(value = "numForeclosure", required = true) Integer numForeclosure, @RequestParam(value = "valForeclosure", required = true) BigInteger valForeclosure, @RequestParam(value = "maxValForeclosure", required = true) BigInteger maxValForeclosure, @RequestParam(value = "minValForeclosure", required = true) BigInteger minValForeclosure, @RequestParam(value = "newestForeclosure", required = true) Integer newestForeclosure, @RequestParam(value = "oldestForeclosure", required = true) Integer oldestForeclosure, @RequestParam(value = "numRents", required = true) Integer numRents, @RequestParam(value = "valRents", required = true) BigInteger valRents, @RequestParam(value = "maxValRents", required = true) BigInteger maxValRents, @RequestParam(value = "minValRents", required = true) BigInteger minValRents, @RequestParam(value = "newestRents", required = true) Integer newestRents, @RequestParam(value = "oldestRents", required = true) Integer oldestRents, @RequestParam(value = "numBuilding", required = true) Integer numBuilding, @RequestParam(value = "valBuilding", required = true) BigInteger valBuilding, @RequestParam(value = "maxValBuilding", required = true) BigInteger maxValBuilding, @RequestParam(value = "minValBuilding", required = true) BigInteger minValBuilding, @RequestParam(value = "newestBuilding", required = true) Integer newestBuilding, @RequestParam(value = "oldestBuilding", required = true) Integer oldestBuilding) throws EntityNotFoundException {
        ModelTitleId modeltitleId = new ModelTitleId();
        modeltitleId.setAuctionId(auctionId);
        modeltitleId.setPropertyId(propertyId);
        modeltitleId.setDemoFlg(demoFlg);
        modeltitleId.setGov(gov);
        modeltitleId.setGovLien(govLien);
        modeltitleId.setNumMortgages(numMortgages);
        modeltitleId.setValMortgages(valMortgages);
        modeltitleId.setMaxValMortgages(maxValMortgages);
        modeltitleId.setMinValMortgages(minValMortgages);
        modeltitleId.setNewestMortgage(newestMortgage);
        modeltitleId.setOldestMortgage(oldestMortgage);
        modeltitleId.setNumDeed(numDeed);
        modeltitleId.setValDeed(valDeed);
        modeltitleId.setMaxValDeed(maxValDeed);
        modeltitleId.setMinValDeed(minValDeed);
        modeltitleId.setNewestDeed(newestDeed);
        modeltitleId.setOldestDeed(oldestDeed);
        modeltitleId.setNumLien(numLien);
        modeltitleId.setValLien(valLien);
        modeltitleId.setMaxValLien(maxValLien);
        modeltitleId.setMinValLien(minValLien);
        modeltitleId.setNewestLien(newestLien);
        modeltitleId.setOldestLien(oldestLien);
        modeltitleId.setNumLis(numLis);
        modeltitleId.setValLis(valLis);
        modeltitleId.setMaxValLis(maxValLis);
        modeltitleId.setMinValLis(minValLis);
        modeltitleId.setNewestLis(newestLis);
        modeltitleId.setOldestLis(oldestLis);
        modeltitleId.setNumAssignment(numAssignment);
        modeltitleId.setValAssignment(valAssignment);
        modeltitleId.setMaxValAssignment(maxValAssignment);
        modeltitleId.setMinValAssignment(minValAssignment);
        modeltitleId.setNewestAssignment(newestAssignment);
        modeltitleId.setOldestAssignment(oldestAssignment);
        modeltitleId.setNumQuit(numQuit);
        modeltitleId.setValQuit(valQuit);
        modeltitleId.setMaxValQuit(maxValQuit);
        modeltitleId.setMinValQuit(minValQuit);
        modeltitleId.setNewestQuit(newestQuit);
        modeltitleId.setOldestQuit(oldestQuit);
        modeltitleId.setNumForeclosure(numForeclosure);
        modeltitleId.setValForeclosure(valForeclosure);
        modeltitleId.setMaxValForeclosure(maxValForeclosure);
        modeltitleId.setMinValForeclosure(minValForeclosure);
        modeltitleId.setNewestForeclosure(newestForeclosure);
        modeltitleId.setOldestForeclosure(oldestForeclosure);
        modeltitleId.setNumRents(numRents);
        modeltitleId.setValRents(valRents);
        modeltitleId.setMaxValRents(maxValRents);
        modeltitleId.setMinValRents(minValRents);
        modeltitleId.setNewestRents(newestRents);
        modeltitleId.setOldestRents(oldestRents);
        modeltitleId.setNumBuilding(numBuilding);
        modeltitleId.setValBuilding(valBuilding);
        modeltitleId.setMaxValBuilding(maxValBuilding);
        modeltitleId.setMinValBuilding(minValBuilding);
        modeltitleId.setNewestBuilding(newestBuilding);
        modeltitleId.setOldestBuilding(oldestBuilding);
        LOGGER.debug("Getting ModelTitle with id: {}", modeltitleId);
        ModelTitle modeltitle = modelTitleService.getById(modeltitleId);
        LOGGER.debug("ModelTitle details with id: {}", modeltitle);
        return modeltitle;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ModelTitle instances.")
    public Long countModelTitles(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ModelTitles");
        return modelTitleService.count(query);
    }
}
