/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.CertificateParty;
import com.portal.platform.Party;
import com.portal.platform.service.CertificatePartyService;
import com.portal.platform.service.PartyService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Party.
 * @see Party
 */
@RestController("platform.PartyController")
@RequestMapping("/platform/Party")
@Api(description = "Exposes APIs to work with Party resource.", value = "PartyController")
public class PartyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartyController.class);

    @Autowired
    @Qualifier("platform.PartyService")
    private PartyService partyService;

    @Autowired
    @Qualifier("platform.CertificatePartyService")
    private CertificatePartyService certificatePartyService;

    /**
     * @deprecated Use {@link #findParties(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Party instances matching the search criteria.")
    public Page<Party> findParties(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Parties list");
        return partyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Party instances matching the search criteria.")
    public Page<Party> findParties(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Parties list");
        return partyService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportParties(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return partyService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificateParties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificateParties instance associated with the given id.")
    public Page<CertificateParty> findAssociatedCertificateParties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated certificateParties");
        return certificatePartyService.findAssociatedValues(id, "party", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PartyService instance
	 */
    protected void setPartyService(PartyService service) {
        this.partyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CertificatePartyService instance
	 */
    protected void setCertificatePartyService(CertificatePartyService service) {
        this.certificatePartyService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Party instances.")
    public Long countParties(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Parties");
        return partyService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Party instance associated with the given id.")
    public Party getParty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Party with id: {}", id);
        Party foundParty = partyService.getById(id);
        LOGGER.debug("Party details with id: {}", foundParty);
        return foundParty;
    }
}
