/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.MatterPartyService;
import com.portal.platform.service.PartyService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Party.
 * @see com.portal.platform.Party
 */
@RestController(value = "Platform.PartyController")
@RequestMapping("/platform/Party")
@Api(description = "Exposes APIs to work with Party resource.", value = "PartyController")
public class PartyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PartyController.class);

    @Autowired
    @Qualifier("platform.PartyService")
    private PartyService partyService;

    @Autowired
    @Qualifier("platform.MatterPartyService")
    private MatterPartyService matterPartyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Party instances matching the search criteria.")
    public Page<Party> findPartys(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Partys list");
        return partyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Party instances.")
    public Page<Party> getPartys(Pageable pageable) {
        LOGGER.debug("Rendering Partys list");
        return partyService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/matterParties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the matterParties instance associated with the given id.")
    public Page<MatterParty> findAssociatedmatterParties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated matterParties");
        return matterPartyService.findAssociatedValues(id, "party", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPartyService(PartyService service) {
        this.partyService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Party instance.")
    public Party createParty(@RequestBody Party instance) {
        LOGGER.debug("Create Party with information: {}", instance);
        instance = partyService.create(instance);
        LOGGER.debug("Created Party with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Party instances.")
    public Long countAllPartys() {
        LOGGER.debug("counting Partys");
        Long count = partyService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Party instance associated with the given id.")
    public Party getParty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Party with id: {}", id);
        Party instance = partyService.findById(id);
        LOGGER.debug("Party details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Party instance associated with the given id.")
    public Party editParty(@PathVariable(value = "id") Integer id, @RequestBody Party instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Party with id: {}", instance.getId());
        instance.setId(id);
        instance = partyService.update(instance);
        LOGGER.debug("Party details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Party instance associated with the given id.")
    public boolean deleteParty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Party with id: {}", id);
        Party deleted = partyService.delete(id);
        return deleted != null;
    }
}
