/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Property;
import com.portal.platform.PropertyExterior;
import com.portal.platform.service.PropertyExteriorService;
import com.portal.platform.service.PropertyService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PropertyExterior.
 * @see PropertyExterior
 */
@RestController("platform.PropertyExteriorController")
@RequestMapping("/platform/PropertyExterior")
@Api(description = "Exposes APIs to work with PropertyExterior resource.", value = "PropertyExteriorController")
public class PropertyExteriorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyExteriorController.class);

    @Autowired
    @Qualifier("platform.PropertyExteriorService")
    private PropertyExteriorService propertyExteriorService;

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    /**
     * @deprecated Use {@link #findPropertyExteriors(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PropertyExterior instances matching the search criteria.")
    public Page<PropertyExterior> findPropertyExteriors(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PropertyExteriors list");
        return propertyExteriorService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PropertyExterior instances matching the search criteria.")
    public Page<PropertyExterior> findPropertyExteriors(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PropertyExteriors list");
        return propertyExteriorService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPropertyExteriors(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return propertyExteriorService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/properties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    public Page<Property> findAssociatedProperties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated properties");
        return propertyService.findAssociatedValues(id, "propertyExterior", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyExteriorService instance
	 */
    protected void setPropertyExteriorService(PropertyExteriorService service) {
        this.propertyExteriorService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyService instance
	 */
    protected void setPropertyService(PropertyService service) {
        this.propertyService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PropertyExterior instances.")
    public Long countPropertyExteriors(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PropertyExteriors");
        return propertyExteriorService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PropertyExterior instance associated with the given id.")
    public PropertyExterior getPropertyExterior(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PropertyExterior with id: {}", id);
        PropertyExterior foundPropertyExterior = propertyExteriorService.getById(id);
        LOGGER.debug("PropertyExterior details with id: {}", foundPropertyExterior);
        return foundPropertyExterior;
    }
}
