/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.TaxHistory;
import com.portal.platform.service.TaxHistoryService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TaxHistory.
 * @see TaxHistory
 */
@RestController("platform.TaxHistoryController")
@RequestMapping("/platform/TaxHistory")
@Api(description = "Exposes APIs to work with TaxHistory resource.", value = "TaxHistoryController")
public class TaxHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TaxHistoryController.class);

    @Autowired
    @Qualifier("platform.TaxHistoryService")
    private TaxHistoryService taxHistoryService;

    /**
     * @deprecated Use {@link #findTaxHistories(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TaxHistory instances matching the search criteria.")
    public Page<TaxHistory> findTaxHistories(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TaxHistories list");
        return taxHistoryService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TaxHistory instances matching the search criteria.")
    public Page<TaxHistory> findTaxHistories(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TaxHistories list");
        return taxHistoryService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTaxHistories(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return taxHistoryService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxHistoryService instance
	 */
    protected void setTaxHistoryService(TaxHistoryService service) {
        this.taxHistoryService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TaxHistory instances.")
    public Long countTaxHistories(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TaxHistories");
        return taxHistoryService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TaxHistory instance associated with the given id.")
    public TaxHistory getTaxHistory(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TaxHistory with id: {}", id);
        TaxHistory foundTaxHistory = taxHistoryService.getById(id);
        LOGGER.debug("TaxHistory details with id: {}", foundTaxHistory);
        return foundTaxHistory;
    }
}
