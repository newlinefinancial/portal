/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.Auction;
import com.portal.platform.Certificate;
import com.portal.platform.County;
import com.portal.platform.Grade;
import com.portal.platform.Property;
import com.portal.platform.PropertyClass;
import com.portal.platform.TaxSchedule;
import com.portal.platform.Township;
import com.portal.platform.service.AuctionService;
import com.portal.platform.service.CertificateService;
import com.portal.platform.service.CountyService;
import com.portal.platform.service.GradeService;
import com.portal.platform.service.PropertyClassService;
import com.portal.platform.service.PropertyService;
import com.portal.platform.service.TaxScheduleService;
import com.portal.platform.service.TownshipService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class County.
 * @see County
 */
@RestController("platform.CountyController")
@RequestMapping("/platform/County")
@Api(description = "Exposes APIs to work with County resource.", value = "CountyController")
public class CountyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountyController.class);

    @Autowired
    @Qualifier("platform.CountyService")
    private CountyService countyService;

    @Autowired
    @Qualifier("platform.CertificateService")
    private CertificateService certificateService;

    @Autowired
    @Qualifier("platform.PropertyService")
    private PropertyService propertyService;

    @Autowired
    @Qualifier("platform.TaxScheduleService")
    private TaxScheduleService taxScheduleService;

    @Autowired
    @Qualifier("platform.PropertyClassService")
    private PropertyClassService propertyClassService;

    @Autowired
    @Qualifier("platform.TownshipService")
    private TownshipService townshipService;

    @Autowired
    @Qualifier("platform.AuctionService")
    private AuctionService auctionService;

    @Autowired
    @Qualifier("platform.GradeService")
    private GradeService gradeService;

    /**
     * @deprecated Use {@link #findCounties(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of County instances matching the search criteria.")
    public Page<County> findCounties(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Counties list");
        return countyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of County instances matching the search criteria.")
    public Page<County> findCounties(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Counties list");
        return countyService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCounties(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return countyService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/propertyClasses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the propertyClasses instance associated with the given id.")
    public Page<PropertyClass> findAssociatedPropertyClasses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated propertyClasses");
        return propertyClassService.findAssociatedValues(id, "county", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/properties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    public Page<Property> findAssociatedProperties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated properties");
        return propertyService.findAssociatedValues(id, "county", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/auctions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the auctions instance associated with the given id.")
    public Page<Auction> findAssociatedAuctions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated auctions");
        return auctionService.findAssociatedValues(id, "county", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/townships", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the townships instance associated with the given id.")
    public Page<Township> findAssociatedTownships(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated townships");
        return townshipService.findAssociatedValues(id, "county", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/grades", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the grades instance associated with the given id.")
    public Page<Grade> findAssociatedGrades(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated grades");
        return gradeService.findAssociatedValues(id, "county", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/taxSchedules", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the taxSchedules instance associated with the given id.")
    public Page<TaxSchedule> findAssociatedTaxSchedules(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated taxSchedules");
        return taxScheduleService.findAssociatedValues(id, "county", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/certificates", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the certificates instance associated with the given id.")
    public Page<Certificate> findAssociatedCertificates(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated certificates");
        return certificateService.findAssociatedValues(id, "county", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CountyService instance
	 */
    protected void setCountyService(CountyService service) {
        this.countyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CertificateService instance
	 */
    protected void setCertificateService(CertificateService service) {
        this.certificateService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyService instance
	 */
    protected void setPropertyService(PropertyService service) {
        this.propertyService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TaxScheduleService instance
	 */
    protected void setTaxScheduleService(TaxScheduleService service) {
        this.taxScheduleService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PropertyClassService instance
	 */
    protected void setPropertyClassService(PropertyClassService service) {
        this.propertyClassService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TownshipService instance
	 */
    protected void setTownshipService(TownshipService service) {
        this.townshipService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AuctionService instance
	 */
    protected void setAuctionService(AuctionService service) {
        this.auctionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GradeService instance
	 */
    protected void setGradeService(GradeService service) {
        this.gradeService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of County instances.")
    public Long countCounties(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Counties");
        return countyService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the County instance associated with the given id.")
    public County getCounty(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting County with id: {}", id);
        County foundCounty = countyService.getById(id);
        LOGGER.debug("County details with id: {}", foundCounty);
        return foundCounty;
    }
}
