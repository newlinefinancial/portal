/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.CountyService;
import com.portal.platform.service.StateService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class State.
 * @see com.portal.platform.State
 */
@RestController(value = "Platform.StateController")
@RequestMapping("/platform/State")
@Api(description = "Exposes APIs to work with State resource.", value = "StateController")
public class StateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StateController.class);

    @Autowired
    @Qualifier("platform.StateService")
    private StateService stateService;

    @Autowired
    @Qualifier("platform.CountyService")
    private CountyService countyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of State instances matching the search criteria.")
    public Page<State> findStates(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering States list");
        return stateService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of State instances.")
    public Page<State> getStates(Pageable pageable) {
        LOGGER.debug("Rendering States list");
        return stateService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/counties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the counties instance associated with the given id.")
    public Page<County> findAssociatedcounties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated counties");
        return countyService.findAssociatedValues(id, "state", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setStateService(StateService service) {
        this.stateService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new State instance.")
    public State createState(@RequestBody State instance) {
        LOGGER.debug("Create State with information: {}", instance);
        instance = stateService.create(instance);
        LOGGER.debug("Created State with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of State instances.")
    public Long countAllStates() {
        LOGGER.debug("counting States");
        Long count = stateService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the State instance associated with the given id.")
    public State getState(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting State with id: {}", id);
        State instance = stateService.findById(id);
        LOGGER.debug("State details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the State instance associated with the given id.")
    public State editState(@PathVariable(value = "id") Integer id, @RequestBody State instance) throws EntityNotFoundException {
        LOGGER.debug("Editing State with id: {}", instance.getId());
        instance.setId(id);
        instance = stateService.update(instance);
        LOGGER.debug("State details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the State instance associated with the given id.")
    public boolean deleteState(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting State with id: {}", id);
        State deleted = stateService.delete(id);
        return deleted != null;
    }
}
