/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.CookBidFile;
import com.portal.platform.CookBidFileId;
import com.portal.platform.service.CookBidFileService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CookBidFile.
 * @see CookBidFile
 */
@RestController("platform.CookBidFileController")
@RequestMapping("/platform/CookBidFile")
@Api(description = "Exposes APIs to work with CookBidFile resource.", value = "CookBidFileController")
public class CookBidFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CookBidFileController.class);

    @Autowired
    @Qualifier("platform.CookBidFileService")
    private CookBidFileService cookBidFileService;

    /**
     * @deprecated Use {@link #findCookBidFiles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CookBidFile instances matching the search criteria.")
    public Page<CookBidFile> findCookBidFiles(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CookBidFiles list");
        return cookBidFileService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CookBidFile instances matching the search criteria.")
    public Page<CookBidFile> findCookBidFiles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CookBidFiles list");
        return cookBidFileService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCookBidFiles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return cookBidFileService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CookBidFileService instance
	 */
    protected void setCookBidFileService(CookBidFileService service) {
        this.cookBidFileService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CookBidFile instance associated with the given composite-id.")
    public CookBidFile getCookBidFile(@RequestParam(value = "auctionId", required = true) int auctionId, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "auctionDay", required = true) Integer auctionDay, @RequestParam(value = "advNumber", required = true) Integer advNumber, @RequestParam(value = "pinNumber", required = true) String pinNumber, @RequestParam(value = "bid", required = true) Integer bid) throws EntityNotFoundException {
        CookBidFileId cookbidfileId = new CookBidFileId();
        cookbidfileId.setAuctionId(auctionId);
        cookbidfileId.setTaxYear(taxYear);
        cookbidfileId.setAuctionDay(auctionDay);
        cookbidfileId.setAdvNumber(advNumber);
        cookbidfileId.setPinNumber(pinNumber);
        cookbidfileId.setBid(bid);
        LOGGER.debug("Getting CookBidFile with id: {}", cookbidfileId);
        CookBidFile cookbidfile = cookBidFileService.getById(cookbidfileId);
        LOGGER.debug("CookBidFile details with id: {}", cookbidfile);
        return cookbidfile;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CookBidFile instances.")
    public Long countCookBidFiles(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting CookBidFiles");
        return cookBidFileService.count(query);
    }
}
