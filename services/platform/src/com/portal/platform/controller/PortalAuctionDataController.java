/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.math.BigDecimal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalAuctionData;
import com.portal.platform.PortalAuctionDataId;
import com.portal.platform.service.PortalAuctionDataService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalAuctionData.
 * @see PortalAuctionData
 */
@RestController("platform.PortalAuctionDataController")
@RequestMapping("/platform/PortalAuctionData")
@Api(description = "Exposes APIs to work with PortalAuctionData resource.", value = "PortalAuctionDataController")
public class PortalAuctionDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalAuctionDataController.class);

    @Autowired
    @Qualifier("platform.PortalAuctionDataService")
    private PortalAuctionDataService portalAuctionDataService;

    /**
     * @deprecated Use {@link #findPortalAuctionDatas(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalAuctionData instances matching the search criteria.")
    public Page<PortalAuctionData> findPortalAuctionDatas(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalAuctionDatas list");
        return portalAuctionDataService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalAuctionData instances matching the search criteria.")
    public Page<PortalAuctionData> findPortalAuctionDatas(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalAuctionDatas list");
        return portalAuctionDataService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalAuctionDatas(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalAuctionDataService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalAuctionDataService instance
	 */
    protected void setPortalAuctionDataService(PortalAuctionDataService service) {
        this.portalAuctionDataService = service;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalAuctionData instance associated with the given composite-id.")
    public PortalAuctionData getPortalAuctionData(@RequestParam(value = "propertyId", required = true) int propertyId, @RequestParam(value = "gradeId", required = true) int gradeId, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "address1", required = true) String address1, @RequestParam(value = "addressCity1", required = true) String addressCity1, @RequestParam(value = "addressZip1", required = true) String addressZip1, @RequestParam(value = "latitude", required = true) Float latitude, @RequestParam(value = "longitude", required = true) Float longitude, @RequestParam(value = "header", required = true) String header, @RequestParam(value = "pinNd", required = true) String pinNd, @RequestParam(value = "piqAddress", required = true) String piqAddress, @RequestParam(value = "assessor", required = true) String assessor, @RequestParam(value = "clerk", required = true) String clerk, @RequestParam(value = "gis", required = true) String gis, @RequestParam(value = "treasurer", required = true) String treasurer, @RequestParam(value = "recorder", required = true) String recorder, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "assesmentTaxYear", required = true) Integer assesmentTaxYear, @RequestParam(value = "equalizedValuation", required = true) Double equalizedValuation, @RequestParam(value = "homeExemption", required = true) Double homeExemption, @RequestParam(value = "seniorExemption", required = true) Double seniorExemption, @RequestParam(value = "assessedValuationBuilding", required = true) Double assessedValuationBuilding, @RequestParam(value = "assessedValuationLand", required = true) Double assessedValuationLand, @RequestParam(value = "assessedValuationTotal", required = true) Double assessedValuationTotal, @RequestParam(value = "marketValue", required = true) Double marketValue, @RequestParam(value = "assesseeName", required = true) String assesseeName, @RequestParam(value = "assesseeAddressLine1", required = true) String assesseeAddressLine1, @RequestParam(value = "assesseeAddressCity", required = true) String assesseeAddressCity, @RequestParam(value = "assesseeAddressState", required = true) String assesseeAddressState, @RequestParam(value = "assesseeAddressZip", required = true) String assesseeAddressZip, @RequestParam(value = "taxRate", required = true) BigDecimal taxRate, @RequestParam(value = "equalizationFactor", required = true) Float equalizationFactor, @RequestParam(value = "taxYear", required = true) int taxYear, @RequestParam(value = "auctionId", required = true) int auctionId, @RequestParam(value = "priorYearsDue", required = true) Double priorYearsDue, @RequestParam(value = "auctionInst1Due", required = true) Double auctionInst1Due, @RequestParam(value = "auctionInst2Due", required = true) Double auctionInst2Due, @RequestParam(value = "auctionYearBilled", required = true) Double auctionYearBilled, @RequestParam(value = "auctionYearDue", required = true) Double auctionYearDue, @RequestParam(value = "otherDue", required = true) Double otherDue, @RequestParam(value = "saleAmount", required = true) double saleAmount, @RequestParam(value = "auctionStatSummary", required = true) String auctionStatSummary, @RequestParam(value = "currentStat", required = true) String currentStat, @RequestParam(value = "currentBid", required = true) Integer currentBid, @RequestParam(value = "lifetimeLtv", required = true) Float lifetimeLtv, @RequestParam(value = "predRedemptionPct", required = true) Float predRedemptionPct, @RequestParam(value = "predBidRate", required = true) Integer predBidRate, @RequestParam(value = "grade", required = true) char grade, @RequestParam(value = "avgBidrate", required = true) Float avgBidrate, @RequestParam(value = "forfeitStat", required = true) String forfeitStat, @RequestParam(value = "redemptionStat", required = true) String redemptionStat, @RequestParam(value = "townshipName", required = true) String townshipName, @RequestParam(value = "inst1", required = true) Double inst1, @RequestParam(value = "subYear", required = true) Integer subYear, @RequestParam(value = "inst2", required = true) Double inst2, @RequestParam(value = "total", required = true) Double total) throws EntityNotFoundException {
        PortalAuctionDataId portalauctiondataId = new PortalAuctionDataId();
        portalauctiondataId.setPropertyId(propertyId);
        portalauctiondataId.setGradeId(gradeId);
        portalauctiondataId.setPin(pin);
        portalauctiondataId.setVolume(volume);
        portalauctiondataId.setAddress1(address1);
        portalauctiondataId.setAddressCity1(addressCity1);
        portalauctiondataId.setAddressZip1(addressZip1);
        portalauctiondataId.setLatitude(latitude);
        portalauctiondataId.setLongitude(longitude);
        portalauctiondataId.setHeader(header);
        portalauctiondataId.setPinNd(pinNd);
        portalauctiondataId.setPiqAddress(piqAddress);
        portalauctiondataId.setAssessor(assessor);
        portalauctiondataId.setClerk(clerk);
        portalauctiondataId.setGis(gis);
        portalauctiondataId.setTreasurer(treasurer);
        portalauctiondataId.setRecorder(recorder);
        portalauctiondataId.setCountyName(countyName);
        portalauctiondataId.setAssesmentTaxYear(assesmentTaxYear);
        portalauctiondataId.setEqualizedValuation(equalizedValuation);
        portalauctiondataId.setHomeExemption(homeExemption);
        portalauctiondataId.setSeniorExemption(seniorExemption);
        portalauctiondataId.setAssessedValuationBuilding(assessedValuationBuilding);
        portalauctiondataId.setAssessedValuationLand(assessedValuationLand);
        portalauctiondataId.setAssessedValuationTotal(assessedValuationTotal);
        portalauctiondataId.setMarketValue(marketValue);
        portalauctiondataId.setAssesseeName(assesseeName);
        portalauctiondataId.setAssesseeAddressLine1(assesseeAddressLine1);
        portalauctiondataId.setAssesseeAddressCity(assesseeAddressCity);
        portalauctiondataId.setAssesseeAddressState(assesseeAddressState);
        portalauctiondataId.setAssesseeAddressZip(assesseeAddressZip);
        portalauctiondataId.setTaxRate(taxRate);
        portalauctiondataId.setEqualizationFactor(equalizationFactor);
        portalauctiondataId.setTaxYear(taxYear);
        portalauctiondataId.setAuctionId(auctionId);
        portalauctiondataId.setPriorYearsDue(priorYearsDue);
        portalauctiondataId.setAuctionInst1Due(auctionInst1Due);
        portalauctiondataId.setAuctionInst2Due(auctionInst2Due);
        portalauctiondataId.setAuctionYearBilled(auctionYearBilled);
        portalauctiondataId.setAuctionYearDue(auctionYearDue);
        portalauctiondataId.setOtherDue(otherDue);
        portalauctiondataId.setSaleAmount(saleAmount);
        portalauctiondataId.setAuctionStatSummary(auctionStatSummary);
        portalauctiondataId.setCurrentStat(currentStat);
        portalauctiondataId.setCurrentBid(currentBid);
        portalauctiondataId.setLifetimeLtv(lifetimeLtv);
        portalauctiondataId.setPredRedemptionPct(predRedemptionPct);
        portalauctiondataId.setPredBidRate(predBidRate);
        portalauctiondataId.setGrade(grade);
        portalauctiondataId.setAvgBidrate(avgBidrate);
        portalauctiondataId.setForfeitStat(forfeitStat);
        portalauctiondataId.setRedemptionStat(redemptionStat);
        portalauctiondataId.setTownshipName(townshipName);
        portalauctiondataId.setInst1(inst1);
        portalauctiondataId.setSubYear(subYear);
        portalauctiondataId.setInst2(inst2);
        portalauctiondataId.setTotal(total);
        LOGGER.debug("Getting PortalAuctionData with id: {}", portalauctiondataId);
        PortalAuctionData portalauctiondata = portalAuctionDataService.getById(portalauctiondataId);
        LOGGER.debug("PortalAuctionData details with id: {}", portalauctiondata);
        return portalauctiondata;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalAuctionData instances.")
    public Long countPortalAuctionDatas(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalAuctionDatas");
        return portalAuctionDataService.count(query);
    }
}
