/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.MatterPartyService;
import com.portal.platform.service.MatterService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Matter.
 * @see com.portal.platform.Matter
 */
@RestController(value = "Platform.MatterController")
@RequestMapping("/platform/Matter")
@Api(description = "Exposes APIs to work with Matter resource.", value = "MatterController")
public class MatterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MatterController.class);

    @Autowired
    @Qualifier("platform.MatterService")
    private MatterService matterService;

    @Autowired
    @Qualifier("platform.MatterPartyService")
    private MatterPartyService matterPartyService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Matter instances matching the search criteria.")
    public Page<Matter> findMatters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Matters list");
        return matterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Matter instances.")
    public Page<Matter> getMatters(Pageable pageable) {
        LOGGER.debug("Rendering Matters list");
        return matterService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/matterParties", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the matterParties instance associated with the given id.")
    public Page<MatterParty> findAssociatedmatterParties(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated matterParties");
        return matterPartyService.findAssociatedValues(id, "matter", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setMatterService(MatterService service) {
        this.matterService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Matter instance.")
    public Matter createMatter(@RequestBody Matter instance) {
        LOGGER.debug("Create Matter with information: {}", instance);
        instance = matterService.create(instance);
        LOGGER.debug("Created Matter with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Matter instances.")
    public Long countAllMatters() {
        LOGGER.debug("counting Matters");
        Long count = matterService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Matter instance associated with the given id.")
    public Matter getMatter(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Matter with id: {}", id);
        Matter instance = matterService.findById(id);
        LOGGER.debug("Matter details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Matter instance associated with the given id.")
    public Matter editMatter(@PathVariable(value = "id") Integer id, @RequestBody Matter instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Matter with id: {}", instance.getId());
        instance.setId(id);
        instance = matterService.update(instance);
        LOGGER.debug("Matter details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Matter instance associated with the given id.")
    public boolean deleteMatter(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Matter with id: {}", id);
        Matter deleted = matterService.delete(id);
        return deleted != null;
    }
}
