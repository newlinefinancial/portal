/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.PortalMatterFilter;
import com.portal.platform.PortalMatterFilterId;
import com.portal.platform.service.PortalMatterFilterService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalMatterFilter.
 * @see PortalMatterFilter
 */
@RestController("platform.PortalMatterFilterController")
@RequestMapping("/platform/PortalMatterFilter")
@Api(description = "Exposes APIs to work with PortalMatterFilter resource.", value = "PortalMatterFilterController")
public class PortalMatterFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalMatterFilterController.class);

    @Autowired
    @Qualifier("platform.PortalMatterFilterService")
    private PortalMatterFilterService portalMatterFilterService;

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the PortalMatterFilter instance associated with the given composite-id.")
    public PortalMatterFilter getPortalMatterFilter(@RequestParam("propertyId") int propertyId, @RequestParam("countyName") String countyName, @RequestParam("certificateNumber") String certificateNumber, @RequestParam("taxYear") int taxYear, @RequestParam("status") String status, @RequestParam("pin") String pin, @RequestParam("volume") int volume, @RequestParam("expirationDate") Date expirationDate, @RequestParam("matterNumber") String matterNumber, @RequestParam("closedDate") Date closedDate, @RequestParam("filedDate") Date filedDate, @RequestParam("matterId") int matterId, @RequestParam("certificateId") int certificateId) throws EntityNotFoundException {
        PortalMatterFilterId portalmatterfilterId = new PortalMatterFilterId();
        portalmatterfilterId.setPropertyId(propertyId);
        portalmatterfilterId.setCountyName(countyName);
        portalmatterfilterId.setCertificateNumber(certificateNumber);
        portalmatterfilterId.setTaxYear(taxYear);
        portalmatterfilterId.setStatus(status);
        portalmatterfilterId.setPin(pin);
        portalmatterfilterId.setVolume(volume);
        portalmatterfilterId.setExpirationDate(expirationDate);
        portalmatterfilterId.setMatterNumber(matterNumber);
        portalmatterfilterId.setClosedDate(closedDate);
        portalmatterfilterId.setFiledDate(filedDate);
        portalmatterfilterId.setMatterId(matterId);
        portalmatterfilterId.setCertificateId(certificateId);
        LOGGER.debug("Getting PortalMatterFilter with id: {}", portalmatterfilterId);
        PortalMatterFilter portalmatterfilter = portalMatterFilterService.getById(portalmatterfilterId);
        LOGGER.debug("PortalMatterFilter details with id: {}", portalmatterfilter);
        return portalmatterfilter;
    }

    /**
     * @deprecated Use {@link #findPortalMatterFilters(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalMatterFilter instances matching the search criteria.")
    public Page<PortalMatterFilter> findPortalMatterFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalMatterFilters list");
        return portalMatterFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalMatterFilter instances matching the search criteria.")
    public Page<PortalMatterFilter> findPortalMatterFilters(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PortalMatterFilters list");
        return portalMatterFilterService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPortalMatterFilters(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return portalMatterFilterService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of PortalMatterFilter instances.")
    public Long countPortalMatterFilters(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PortalMatterFilters");
        return portalMatterFilterService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PortalMatterFilterService instance
	 */
    protected void setPortalMatterFilterService(PortalMatterFilterService service) {
        this.portalMatterFilterService = service;
    }
}
