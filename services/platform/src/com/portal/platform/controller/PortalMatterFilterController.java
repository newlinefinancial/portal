/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.portal.platform.service.PortalMatterFilterService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.portal.platform.*;
import com.portal.platform.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PortalMatterFilter.
 * @see com.portal.platform.PortalMatterFilter
 */
@RestController(value = "Platform.PortalMatterFilterController")
@RequestMapping("/platform/PortalMatterFilter")
@Api(description = "Exposes APIs to work with PortalMatterFilter resource.", value = "PortalMatterFilterController")
public class PortalMatterFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PortalMatterFilterController.class);

    @Autowired
    @Qualifier("platform.PortalMatterFilterService")
    private PortalMatterFilterService portalMatterFilterService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PortalMatterFilter instances matching the search criteria.")
    public Page<PortalMatterFilter> findPortalMatterFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PortalMatterFilters list");
        return portalMatterFilterService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PortalMatterFilter instances.")
    public Page<PortalMatterFilter> getPortalMatterFilters(Pageable pageable) {
        LOGGER.debug("Rendering PortalMatterFilters list");
        return portalMatterFilterService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setPortalMatterFilterService(PortalMatterFilterService service) {
        this.portalMatterFilterService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PortalMatterFilter instance.")
    public PortalMatterFilter createPortalMatterFilter(@RequestBody PortalMatterFilter instance) {
        LOGGER.debug("Create PortalMatterFilter with information: {}", instance);
        instance = portalMatterFilterService.create(instance);
        LOGGER.debug("Created PortalMatterFilter with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PortalMatterFilter instance associated with the given composite-id.")
    public PortalMatterFilter getPortalMatterFilter(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "closedDate", required = true) Date closedDate, @RequestParam(value = "filedDate", required = true) Date filedDate, @RequestParam(value = "matterId", required = true) Integer matterId, @RequestParam(value = "certificateId", required = true) Integer certificateId) throws EntityNotFoundException {
        PortalMatterFilterId temp = new PortalMatterFilterId();
        temp.setPropertyId(propertyId);
        temp.setCountyName(countyName);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setStatus(status);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setExpirationDate(expirationDate);
        temp.setMatterNumber(matterNumber);
        temp.setClosedDate(closedDate);
        temp.setFiledDate(filedDate);
        temp.setMatterId(matterId);
        temp.setCertificateId(certificateId);
        LOGGER.debug("Getting PortalMatterFilter with id: {}", temp);
        PortalMatterFilter instance = portalMatterFilterService.findById(temp);
        LOGGER.debug("PortalMatterFilter details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PortalMatterFilter instance associated with the given composite-id.")
    public PortalMatterFilter editPortalMatterFilter(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "closedDate", required = true) Date closedDate, @RequestParam(value = "filedDate", required = true) Date filedDate, @RequestParam(value = "matterId", required = true) Integer matterId, @RequestParam(value = "certificateId", required = true) Integer certificateId, @RequestBody PortalMatterFilter instance) throws EntityNotFoundException {
        PortalMatterFilterId temp = new PortalMatterFilterId();
        temp.setPropertyId(propertyId);
        temp.setCountyName(countyName);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setStatus(status);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setExpirationDate(expirationDate);
        temp.setMatterNumber(matterNumber);
        temp.setClosedDate(closedDate);
        temp.setFiledDate(filedDate);
        temp.setMatterId(matterId);
        temp.setCertificateId(certificateId);
        portalMatterFilterService.delete(temp);
        instance = portalMatterFilterService.create(instance);
        LOGGER.debug("PortalMatterFilter details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PortalMatterFilter instance associated with the given composite-id.")
    public boolean deletePortalMatterFilter(@RequestParam(value = "propertyId", required = true) Integer propertyId, @RequestParam(value = "countyName", required = true) String countyName, @RequestParam(value = "certificateNumber", required = true) String certificateNumber, @RequestParam(value = "taxYear", required = true) Integer taxYear, @RequestParam(value = "status", required = true) String status, @RequestParam(value = "pin", required = true) String pin, @RequestParam(value = "volume", required = true) Integer volume, @RequestParam(value = "expirationDate", required = true) Date expirationDate, @RequestParam(value = "matterNumber", required = true) String matterNumber, @RequestParam(value = "closedDate", required = true) Date closedDate, @RequestParam(value = "filedDate", required = true) Date filedDate, @RequestParam(value = "matterId", required = true) Integer matterId, @RequestParam(value = "certificateId", required = true) Integer certificateId) throws EntityNotFoundException {
        PortalMatterFilterId temp = new PortalMatterFilterId();
        temp.setPropertyId(propertyId);
        temp.setCountyName(countyName);
        temp.setCertificateNumber(certificateNumber);
        temp.setTaxYear(taxYear);
        temp.setStatus(status);
        temp.setPin(pin);
        temp.setVolume(volume);
        temp.setExpirationDate(expirationDate);
        temp.setMatterNumber(matterNumber);
        temp.setClosedDate(closedDate);
        temp.setFiledDate(filedDate);
        temp.setMatterId(matterId);
        temp.setCertificateId(certificateId);
        LOGGER.debug("Deleting PortalMatterFilter with id: {}", temp);
        PortalMatterFilter deleted = portalMatterFilterService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PortalMatterFilter instances.")
    public Long countAllPortalMatterFilters() {
        LOGGER.debug("counting PortalMatterFilters");
        Long count = portalMatterFilterService.countAll();
        return count;
    }
}
