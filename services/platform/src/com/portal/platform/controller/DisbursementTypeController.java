/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/
package com.portal.platform.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.portal.platform.DisbursementType;
import com.portal.platform.service.DisbursementTypeService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DisbursementType.
 * @see DisbursementType
 */
@RestController("platform.DisbursementTypeController")
@RequestMapping("/platform/DisbursementType")
@Api(description = "Exposes APIs to work with DisbursementType resource.", value = "DisbursementTypeController")
public class DisbursementTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisbursementTypeController.class);

    @Autowired
    @Qualifier("platform.DisbursementTypeService")
    private DisbursementTypeService disbursementTypeService;

    /**
     * @deprecated Use {@link #findDisbursementTypes(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DisbursementType instances matching the search criteria.")
    public Page<DisbursementType> findDisbursementTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DisbursementTypes list");
        return disbursementTypeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DisbursementType instances matching the search criteria.")
    public Page<DisbursementType> findDisbursementTypes(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DisbursementTypes list");
        return disbursementTypeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportDisbursementTypes(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return disbursementTypeService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the total count of DisbursementType instances.")
    public Long countDisbursementTypes(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting DisbursementTypes");
        return disbursementTypeService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DisbursementTypeService instance
	 */
    protected void setDisbursementTypeService(DisbursementTypeService service) {
        this.disbursementTypeService = service;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DisbursementType instance associated with the given id.")
    public DisbursementType getDisbursementType(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DisbursementType with id: {}", id);
        DisbursementType foundDisbursementType = disbursementTypeService.getById(id);
        LOGGER.debug("DisbursementType details with id: {}", foundDisbursementType);
        return foundDisbursementType;
    }
}
