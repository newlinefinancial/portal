/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * PropertyExterior generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`property_exterior`", schema = "data", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`exterior`"})})
public class PropertyExterior implements Serializable {

    private int id;
    private String exterior;
    private List<Property> properties = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Column(name = "`exterior`", nullable = false, length = 255)
    public String getExterior() {
        return this.exterior;
    }

    public void setExterior(String exterior) {
        this.exterior = exterior;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "propertyExterior")
    public List<Property> getProperties() {
        return this.properties;
    }

    public void setProperties(List<Property> properties) {
        this.properties = properties;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PropertyExterior)) return false;
        final PropertyExterior propertyExterior = (PropertyExterior) o;
        return Objects.equals(getId(), propertyExterior.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

