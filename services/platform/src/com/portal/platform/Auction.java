/*Copyright (c) 2016-2017 newlinefinancial.com All Rights Reserved.
 This software is the confidential and proprietary information of newlinefinancial.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with newlinefinancial.com*/

package com.portal.platform;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Auction generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`auction`", schema = "data")
public class Auction implements Serializable {

    private int id;
    private java.util.Date updatedTimestamp;
    private int taxYear;
    private Integer sequence;
    private Double priorYearsDue;
    private Double otherDue;
    private Double auctionYearBilled;
    private Double auctionYearDue;
    private Double auctionInst1Due;
    private Double auctionInst2Due;
    private double saleAmount;
    private boolean removed;
    private Integer lastImportId;
    private List<Underwriting> underwritings = new ArrayList<>();
    private County county;
    private Property property;
    private List<Sample> samples = new ArrayList<>();
    private List<AuctionResult> auctionResults = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`updated_timestamp`", nullable = false)
    public java.util.Date getUpdatedTimestamp() {
        return this.updatedTimestamp;
    }

    public void setUpdatedTimestamp(java.util.Date updatedTimestamp) {
        this.updatedTimestamp = updatedTimestamp;
    }

    @Column(name = "`tax_year`", nullable = false, scale = 0, precision = 10)
    public int getTaxYear() {
        return this.taxYear;
    }

    public void setTaxYear(int taxYear) {
        this.taxYear = taxYear;
    }

    @Column(name = "`sequence`", nullable = true, scale = 0, precision = 10)
    public Integer getSequence() {
        return this.sequence;
    }

    public void setSequence(Integer sequence) {
        this.sequence = sequence;
    }

    @Column(name = "`prior_years_due`", nullable = true, scale = 4, precision = 19)
    public Double getPriorYearsDue() {
        return this.priorYearsDue;
    }

    public void setPriorYearsDue(Double priorYearsDue) {
        this.priorYearsDue = priorYearsDue;
    }

    @Column(name = "`other_due`", nullable = true, scale = 4, precision = 19)
    public Double getOtherDue() {
        return this.otherDue;
    }

    public void setOtherDue(Double otherDue) {
        this.otherDue = otherDue;
    }

    @Column(name = "`auction_year_billed`", nullable = true, scale = 4, precision = 19)
    public Double getAuctionYearBilled() {
        return this.auctionYearBilled;
    }

    public void setAuctionYearBilled(Double auctionYearBilled) {
        this.auctionYearBilled = auctionYearBilled;
    }

    @Column(name = "`auction_year_due`", nullable = true, scale = 4, precision = 19)
    public Double getAuctionYearDue() {
        return this.auctionYearDue;
    }

    public void setAuctionYearDue(Double auctionYearDue) {
        this.auctionYearDue = auctionYearDue;
    }

    @Column(name = "`auction_inst1_due`", nullable = true, scale = 4, precision = 19)
    public Double getAuctionInst1Due() {
        return this.auctionInst1Due;
    }

    public void setAuctionInst1Due(Double auctionInst1Due) {
        this.auctionInst1Due = auctionInst1Due;
    }

    @Column(name = "`auction_inst2_due`", nullable = true, scale = 4, precision = 19)
    public Double getAuctionInst2Due() {
        return this.auctionInst2Due;
    }

    public void setAuctionInst2Due(Double auctionInst2Due) {
        this.auctionInst2Due = auctionInst2Due;
    }

    @Column(name = "`sale_amount`", nullable = false, scale = 4, precision = 19)
    public double getSaleAmount() {
        return this.saleAmount;
    }

    public void setSaleAmount(double saleAmount) {
        this.saleAmount = saleAmount;
    }

    @Column(name = "`removed`", nullable = false)
    public boolean isRemoved() {
        return this.removed;
    }

    public void setRemoved(boolean removed) {
        this.removed = removed;
    }

    @Column(name = "`last_import_id`", nullable = true, scale = 0, precision = 10)
    public Integer getLastImportId() {
        return this.lastImportId;
    }

    public void setLastImportId(Integer lastImportId) {
        this.lastImportId = lastImportId;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "auction")
    public List<Underwriting> getUnderwritings() {
        return this.underwritings;
    }

    public void setUnderwritings(List<Underwriting> underwritings) {
        this.underwritings = underwritings;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`county_id`", referencedColumnName = "`id`", insertable = true, updatable = true)
    public County getCounty() {
        return this.county;
    }

    public void setCounty(County county) {
        this.county = county;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`property_id`", referencedColumnName = "`ID`", insertable = true, updatable = true)
    public Property getProperty() {
        return this.property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "auction")
    public List<Sample> getSamples() {
        return this.samples;
    }

    public void setSamples(List<Sample> samples) {
        this.samples = samples;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "auction")
    public List<AuctionResult> getAuctionResults() {
        return this.auctionResults;
    }

    public void setAuctionResults(List<AuctionResult> auctionResults) {
        this.auctionResults = auctionResults;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Auction)) return false;
        final Auction auction = (Auction) o;
        return Objects.equals(getId(), auction.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

